//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;

/* Package-scope variables */
var newChild, caretPlaceholder;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                             //
// packages/mrt_bootstrap3-wysihtml5/packages/mrt_bootstrap3-wysihtml5.js                      //
//                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                               //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mrt:bootstrap3-wysihtml5/lib/wysihtml5-0.3.0.js                                                            //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license wysihtml5 v0.3.0                                                                                           // 2
 * https://github.com/xing/wysihtml5                                                                                   // 3
 *                                                                                                                     // 4
 * Author: Christopher Blum (https://github.com/tiff)                                                                  // 5
 *                                                                                                                     // 6
 * Copyright (C) 2012 XING AG                                                                                          // 7
 * Licensed under the MIT license (MIT)                                                                                // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
var wysihtml5 = {                                                                                                      // 11
  version: "0.3.0",                                                                                                    // 12
                                                                                                                       // 13
  // namespaces                                                                                                        // 14
  commands:   {},                                                                                                      // 15
  dom:        {},                                                                                                      // 16
  quirks:     {},                                                                                                      // 17
  toolbar:    {},                                                                                                      // 18
  lang:       {},                                                                                                      // 19
  selection:  {},                                                                                                      // 20
  views:      {},                                                                                                      // 21
                                                                                                                       // 22
  INVISIBLE_SPACE: "\uFEFF",                                                                                           // 23
                                                                                                                       // 24
  EMPTY_FUNCTION: function() {},                                                                                       // 25
                                                                                                                       // 26
  ELEMENT_NODE: 1,                                                                                                     // 27
  TEXT_NODE:    3,                                                                                                     // 28
                                                                                                                       // 29
  BACKSPACE_KEY:  8,                                                                                                   // 30
  ENTER_KEY:      13,                                                                                                  // 31
  ESCAPE_KEY:     27,                                                                                                  // 32
  SPACE_KEY:      32,                                                                                                  // 33
  DELETE_KEY:     46                                                                                                   // 34
};/**                                                                                                                  // 35
 * @license Rangy, a cross-browser JavaScript range and selection library                                              // 36
 * http://code.google.com/p/rangy/                                                                                     // 37
 *                                                                                                                     // 38
 * Copyright 2011, Tim Down                                                                                            // 39
 * Licensed under the MIT license.                                                                                     // 40
 * Version: 1.2.2                                                                                                      // 41
 * Build date: 13 November 2011                                                                                        // 42
 */                                                                                                                    // 43
window['rangy'] = (function() {                                                                                        // 44
                                                                                                                       // 45
                                                                                                                       // 46
    var OBJECT = "object", FUNCTION = "function", UNDEFINED = "undefined";                                             // 47
                                                                                                                       // 48
    var domRangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",               // 49
        "commonAncestorContainer", "START_TO_START", "START_TO_END", "END_TO_START", "END_TO_END"];                    // 50
                                                                                                                       // 51
    var domRangeMethods = ["setStart", "setStartBefore", "setStartAfter", "setEnd", "setEndBefore",                    // 52
        "setEndAfter", "collapse", "selectNode", "selectNodeContents", "compareBoundaryPoints", "deleteContents",      // 53
        "extractContents", "cloneContents", "insertNode", "surroundContents", "cloneRange", "toString", "detach"];     // 54
                                                                                                                       // 55
    var textRangeProperties = ["boundingHeight", "boundingLeft", "boundingTop", "boundingWidth", "htmlText", "text"];  // 56
                                                                                                                       // 57
    // Subset of TextRange's full set of methods that we're interested in                                              // 58
    var textRangeMethods = ["collapse", "compareEndPoints", "duplicate", "getBookmark", "moveToBookmark",              // 59
        "moveToElementText", "parentElement", "pasteHTML", "select", "setEndPoint", "getBoundingClientRect"];          // 60
                                                                                                                       // 61
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 63
    // Trio of functions taken from Peter Michaux's article:                                                           // 64
    // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting                           // 65
    function isHostMethod(o, p) {                                                                                      // 66
        var t = typeof o[p];                                                                                           // 67
        return t == FUNCTION || (!!(t == OBJECT && o[p])) || t == "unknown";                                           // 68
    }                                                                                                                  // 69
                                                                                                                       // 70
    function isHostObject(o, p) {                                                                                      // 71
        return !!(typeof o[p] == OBJECT && o[p]);                                                                      // 72
    }                                                                                                                  // 73
                                                                                                                       // 74
    function isHostProperty(o, p) {                                                                                    // 75
        return typeof o[p] != UNDEFINED;                                                                               // 76
    }                                                                                                                  // 77
                                                                                                                       // 78
    // Creates a convenience function to save verbose repeated calls to tests functions                                // 79
    function createMultiplePropertyTest(testFunc) {                                                                    // 80
        return function(o, props) {                                                                                    // 81
            var i = props.length;                                                                                      // 82
            while (i--) {                                                                                              // 83
                if (!testFunc(o, props[i])) {                                                                          // 84
                    return false;                                                                                      // 85
                }                                                                                                      // 86
            }                                                                                                          // 87
            return true;                                                                                               // 88
        };                                                                                                             // 89
    }                                                                                                                  // 90
                                                                                                                       // 91
    // Next trio of functions are a convenience to save verbose repeated calls to previous two functions               // 92
    var areHostMethods = createMultiplePropertyTest(isHostMethod);                                                     // 93
    var areHostObjects = createMultiplePropertyTest(isHostObject);                                                     // 94
    var areHostProperties = createMultiplePropertyTest(isHostProperty);                                                // 95
                                                                                                                       // 96
    function isTextRange(range) {                                                                                      // 97
        return range && areHostMethods(range, textRangeMethods) && areHostProperties(range, textRangeProperties);      // 98
    }                                                                                                                  // 99
                                                                                                                       // 100
    var api = {                                                                                                        // 101
        version: "1.2.2",                                                                                              // 102
        initialized: false,                                                                                            // 103
        supported: true,                                                                                               // 104
                                                                                                                       // 105
        util: {                                                                                                        // 106
            isHostMethod: isHostMethod,                                                                                // 107
            isHostObject: isHostObject,                                                                                // 108
            isHostProperty: isHostProperty,                                                                            // 109
            areHostMethods: areHostMethods,                                                                            // 110
            areHostObjects: areHostObjects,                                                                            // 111
            areHostProperties: areHostProperties,                                                                      // 112
            isTextRange: isTextRange                                                                                   // 113
        },                                                                                                             // 114
                                                                                                                       // 115
        features: {},                                                                                                  // 116
                                                                                                                       // 117
        modules: {},                                                                                                   // 118
        config: {                                                                                                      // 119
            alertOnWarn: false,                                                                                        // 120
            preferTextRange: false                                                                                     // 121
        }                                                                                                              // 122
    };                                                                                                                 // 123
                                                                                                                       // 124
    function fail(reason) {                                                                                            // 125
        window.alert("Rangy not supported in your browser. Reason: " + reason);                                        // 126
        api.initialized = true;                                                                                        // 127
        api.supported = false;                                                                                         // 128
    }                                                                                                                  // 129
                                                                                                                       // 130
    api.fail = fail;                                                                                                   // 131
                                                                                                                       // 132
    function warn(msg) {                                                                                               // 133
        var warningMessage = "Rangy warning: " + msg;                                                                  // 134
        if (api.config.alertOnWarn) {                                                                                  // 135
            window.alert(warningMessage);                                                                              // 136
        } else if (typeof window.console != UNDEFINED && typeof window.console.log != UNDEFINED) {                     // 137
            window.console.log(warningMessage);                                                                        // 138
        }                                                                                                              // 139
    }                                                                                                                  // 140
                                                                                                                       // 141
    api.warn = warn;                                                                                                   // 142
                                                                                                                       // 143
    if ({}.hasOwnProperty) {                                                                                           // 144
        api.util.extend = function(o, props) {                                                                         // 145
            for (var i in props) {                                                                                     // 146
                if (props.hasOwnProperty(i)) {                                                                         // 147
                    o[i] = props[i];                                                                                   // 148
                }                                                                                                      // 149
            }                                                                                                          // 150
        };                                                                                                             // 151
    } else {                                                                                                           // 152
        fail("hasOwnProperty not supported");                                                                          // 153
    }                                                                                                                  // 154
                                                                                                                       // 155
    var initListeners = [];                                                                                            // 156
    var moduleInitializers = [];                                                                                       // 157
                                                                                                                       // 158
    // Initialization                                                                                                  // 159
    function init() {                                                                                                  // 160
        if (api.initialized) {                                                                                         // 161
            return;                                                                                                    // 162
        }                                                                                                              // 163
        var testRange;                                                                                                 // 164
        var implementsDomRange = false, implementsTextRange = false;                                                   // 165
                                                                                                                       // 166
        // First, perform basic feature tests                                                                          // 167
                                                                                                                       // 168
        if (isHostMethod(document, "createRange")) {                                                                   // 169
            testRange = document.createRange();                                                                        // 170
            if (areHostMethods(testRange, domRangeMethods) && areHostProperties(testRange, domRangeProperties)) {      // 171
                implementsDomRange = true;                                                                             // 172
            }                                                                                                          // 173
            testRange.detach();                                                                                        // 174
        }                                                                                                              // 175
                                                                                                                       // 176
        var body = isHostObject(document, "body") ? document.body : document.getElementsByTagName("body")[0];          // 177
                                                                                                                       // 178
        if (body && isHostMethod(body, "createTextRange")) {                                                           // 179
            testRange = body.createTextRange();                                                                        // 180
            if (isTextRange(testRange)) {                                                                              // 181
                implementsTextRange = true;                                                                            // 182
            }                                                                                                          // 183
        }                                                                                                              // 184
                                                                                                                       // 185
        if (!implementsDomRange && !implementsTextRange) {                                                             // 186
            fail("Neither Range nor TextRange are implemented");                                                       // 187
        }                                                                                                              // 188
                                                                                                                       // 189
        api.initialized = true;                                                                                        // 190
        api.features = {                                                                                               // 191
            implementsDomRange: implementsDomRange,                                                                    // 192
            implementsTextRange: implementsTextRange                                                                   // 193
        };                                                                                                             // 194
                                                                                                                       // 195
        // Initialize modules and call init listeners                                                                  // 196
        var allListeners = moduleInitializers.concat(initListeners);                                                   // 197
        for (var i = 0, len = allListeners.length; i < len; ++i) {                                                     // 198
            try {                                                                                                      // 199
                allListeners[i](api);                                                                                  // 200
            } catch (ex) {                                                                                             // 201
                if (isHostObject(window, "console") && isHostMethod(window.console, "log")) {                          // 202
                    window.console.log("Init listener threw an exception. Continuing.", ex);                           // 203
                }                                                                                                      // 204
                                                                                                                       // 205
            }                                                                                                          // 206
        }                                                                                                              // 207
    }                                                                                                                  // 208
                                                                                                                       // 209
    // Allow external scripts to initialize this library in case it's loaded after the document has loaded             // 210
    api.init = init;                                                                                                   // 211
                                                                                                                       // 212
    // Execute listener immediately if already initialized                                                             // 213
    api.addInitListener = function(listener) {                                                                         // 214
        if (api.initialized) {                                                                                         // 215
            listener(api);                                                                                             // 216
        } else {                                                                                                       // 217
            initListeners.push(listener);                                                                              // 218
        }                                                                                                              // 219
    };                                                                                                                 // 220
                                                                                                                       // 221
    var createMissingNativeApiListeners = [];                                                                          // 222
                                                                                                                       // 223
    api.addCreateMissingNativeApiListener = function(listener) {                                                       // 224
        createMissingNativeApiListeners.push(listener);                                                                // 225
    };                                                                                                                 // 226
                                                                                                                       // 227
    function createMissingNativeApi(win) {                                                                             // 228
        win = win || window;                                                                                           // 229
        init();                                                                                                        // 230
                                                                                                                       // 231
        // Notify listeners                                                                                            // 232
        for (var i = 0, len = createMissingNativeApiListeners.length; i < len; ++i) {                                  // 233
            createMissingNativeApiListeners[i](win);                                                                   // 234
        }                                                                                                              // 235
    }                                                                                                                  // 236
                                                                                                                       // 237
    api.createMissingNativeApi = createMissingNativeApi;                                                               // 238
                                                                                                                       // 239
    /**                                                                                                                // 240
     * @constructor                                                                                                    // 241
     */                                                                                                                // 242
    function Module(name) {                                                                                            // 243
        this.name = name;                                                                                              // 244
        this.initialized = false;                                                                                      // 245
        this.supported = false;                                                                                        // 246
    }                                                                                                                  // 247
                                                                                                                       // 248
    Module.prototype.fail = function(reason) {                                                                         // 249
        this.initialized = true;                                                                                       // 250
        this.supported = false;                                                                                        // 251
                                                                                                                       // 252
        throw new Error("Module '" + this.name + "' failed to load: " + reason);                                       // 253
    };                                                                                                                 // 254
                                                                                                                       // 255
    Module.prototype.warn = function(msg) {                                                                            // 256
        api.warn("Module " + this.name + ": " + msg);                                                                  // 257
    };                                                                                                                 // 258
                                                                                                                       // 259
    Module.prototype.createError = function(msg) {                                                                     // 260
        return new Error("Error in Rangy " + this.name + " module: " + msg);                                           // 261
    };                                                                                                                 // 262
                                                                                                                       // 263
    api.createModule = function(name, initFunc) {                                                                      // 264
        var module = new Module(name);                                                                                 // 265
        api.modules[name] = module;                                                                                    // 266
                                                                                                                       // 267
        moduleInitializers.push(function(api) {                                                                        // 268
            initFunc(api, module);                                                                                     // 269
            module.initialized = true;                                                                                 // 270
            module.supported = true;                                                                                   // 271
        });                                                                                                            // 272
    };                                                                                                                 // 273
                                                                                                                       // 274
    api.requireModules = function(modules) {                                                                           // 275
        for (var i = 0, len = modules.length, module, moduleName; i < len; ++i) {                                      // 276
            moduleName = modules[i];                                                                                   // 277
            module = api.modules[moduleName];                                                                          // 278
            if (!module || !(module instanceof Module)) {                                                              // 279
                throw new Error("Module '" + moduleName + "' not found");                                              // 280
            }                                                                                                          // 281
            if (!module.supported) {                                                                                   // 282
                throw new Error("Module '" + moduleName + "' not supported");                                          // 283
            }                                                                                                          // 284
        }                                                                                                              // 285
    };                                                                                                                 // 286
                                                                                                                       // 287
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 289
    // Wait for document to load before running tests                                                                  // 290
                                                                                                                       // 291
    var docReady = false;                                                                                              // 292
                                                                                                                       // 293
    var loadHandler = function(e) {                                                                                    // 294
                                                                                                                       // 295
        if (!docReady) {                                                                                               // 296
            docReady = true;                                                                                           // 297
            if (!api.initialized) {                                                                                    // 298
                init();                                                                                                // 299
            }                                                                                                          // 300
        }                                                                                                              // 301
    };                                                                                                                 // 302
                                                                                                                       // 303
    // Test whether we have window and document objects that we will need                                              // 304
    if (typeof window == UNDEFINED) {                                                                                  // 305
        fail("No window found");                                                                                       // 306
        return;                                                                                                        // 307
    }                                                                                                                  // 308
    if (typeof document == UNDEFINED) {                                                                                // 309
        fail("No document found");                                                                                     // 310
        return;                                                                                                        // 311
    }                                                                                                                  // 312
                                                                                                                       // 313
    if (isHostMethod(document, "addEventListener")) {                                                                  // 314
        document.addEventListener("DOMContentLoaded", loadHandler, false);                                             // 315
    }                                                                                                                  // 316
                                                                                                                       // 317
    // Add a fallback in case the DOMContentLoaded event isn't supported                                               // 318
    if (isHostMethod(window, "addEventListener")) {                                                                    // 319
        window.addEventListener("load", loadHandler, false);                                                           // 320
    } else if (isHostMethod(window, "attachEvent")) {                                                                  // 321
        window.attachEvent("onload", loadHandler);                                                                     // 322
    } else {                                                                                                           // 323
        fail("Window does not have required addEventListener or attachEvent method");                                  // 324
    }                                                                                                                  // 325
                                                                                                                       // 326
    return api;                                                                                                        // 327
})();                                                                                                                  // 328
rangy.createModule("DomUtil", function(api, module) {                                                                  // 329
                                                                                                                       // 330
    var UNDEF = "undefined";                                                                                           // 331
    var util = api.util;                                                                                               // 332
                                                                                                                       // 333
    // Perform feature tests                                                                                           // 334
    if (!util.areHostMethods(document, ["createDocumentFragment", "createElement", "createTextNode"])) {               // 335
        module.fail("document missing a Node creation method");                                                        // 336
    }                                                                                                                  // 337
                                                                                                                       // 338
    if (!util.isHostMethod(document, "getElementsByTagName")) {                                                        // 339
        module.fail("document missing getElementsByTagName method");                                                   // 340
    }                                                                                                                  // 341
                                                                                                                       // 342
    var el = document.createElement("div");                                                                            // 343
    if (!util.areHostMethods(el, ["insertBefore", "appendChild", "cloneNode"] ||                                       // 344
            !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]))) {               // 345
        module.fail("Incomplete Element implementation");                                                              // 346
    }                                                                                                                  // 347
                                                                                                                       // 348
    // innerHTML is required for Range's createContextualFragment method                                               // 349
    if (!util.isHostProperty(el, "innerHTML")) {                                                                       // 350
        module.fail("Element is missing innerHTML property");                                                          // 351
    }                                                                                                                  // 352
                                                                                                                       // 353
    var textNode = document.createTextNode("test");                                                                    // 354
    if (!util.areHostMethods(textNode, ["splitText", "deleteData", "insertData", "appendData", "cloneNode"] ||         // 355
            !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]) ||                // 356
            !util.areHostProperties(textNode, ["data"]))) {                                                            // 357
        module.fail("Incomplete Text Node implementation");                                                            // 358
    }                                                                                                                  // 359
                                                                                                                       // 360
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 362
    // Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been
    // able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that       // 364
    // contains just the document as a single element and the value searched for is the document.                      // 365
    var arrayContains = /*Array.prototype.indexOf ?                                                                    // 366
        function(arr, val) {                                                                                           // 367
            return arr.indexOf(val) > -1;                                                                              // 368
        }:*/                                                                                                           // 369
                                                                                                                       // 370
        function(arr, val) {                                                                                           // 371
            var i = arr.length;                                                                                        // 372
            while (i--) {                                                                                              // 373
                if (arr[i] === val) {                                                                                  // 374
                    return true;                                                                                       // 375
                }                                                                                                      // 376
            }                                                                                                          // 377
            return false;                                                                                              // 378
        };                                                                                                             // 379
                                                                                                                       // 380
    // Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI                // 381
    function isHtmlNamespace(node) {                                                                                   // 382
        var ns;                                                                                                        // 383
        return typeof node.namespaceURI == UNDEF || ((ns = node.namespaceURI) === null || ns == "http://www.w3.org/1999/xhtml");
    }                                                                                                                  // 385
                                                                                                                       // 386
    function parentElement(node) {                                                                                     // 387
        var parent = node.parentNode;                                                                                  // 388
        return (parent.nodeType == 1) ? parent : null;                                                                 // 389
    }                                                                                                                  // 390
                                                                                                                       // 391
    function getNodeIndex(node) {                                                                                      // 392
        var i = 0;                                                                                                     // 393
        while( (node = node.previousSibling) ) {                                                                       // 394
            i++;                                                                                                       // 395
        }                                                                                                              // 396
        return i;                                                                                                      // 397
    }                                                                                                                  // 398
                                                                                                                       // 399
    function getNodeLength(node) {                                                                                     // 400
        var childNodes;                                                                                                // 401
        return isCharacterDataNode(node) ? node.length : ((childNodes = node.childNodes) ? childNodes.length : 0);     // 402
    }                                                                                                                  // 403
                                                                                                                       // 404
    function getCommonAncestor(node1, node2) {                                                                         // 405
        var ancestors = [], n;                                                                                         // 406
        for (n = node1; n; n = n.parentNode) {                                                                         // 407
            ancestors.push(n);                                                                                         // 408
        }                                                                                                              // 409
                                                                                                                       // 410
        for (n = node2; n; n = n.parentNode) {                                                                         // 411
            if (arrayContains(ancestors, n)) {                                                                         // 412
                return n;                                                                                              // 413
            }                                                                                                          // 414
        }                                                                                                              // 415
                                                                                                                       // 416
        return null;                                                                                                   // 417
    }                                                                                                                  // 418
                                                                                                                       // 419
    function isAncestorOf(ancestor, descendant, selfIsAncestor) {                                                      // 420
        var n = selfIsAncestor ? descendant : descendant.parentNode;                                                   // 421
        while (n) {                                                                                                    // 422
            if (n === ancestor) {                                                                                      // 423
                return true;                                                                                           // 424
            } else {                                                                                                   // 425
                n = n.parentNode;                                                                                      // 426
            }                                                                                                          // 427
        }                                                                                                              // 428
        return false;                                                                                                  // 429
    }                                                                                                                  // 430
                                                                                                                       // 431
    function getClosestAncestorIn(node, ancestor, selfIsAncestor) {                                                    // 432
        var p, n = selfIsAncestor ? node : node.parentNode;                                                            // 433
        while (n) {                                                                                                    // 434
            p = n.parentNode;                                                                                          // 435
            if (p === ancestor) {                                                                                      // 436
                return n;                                                                                              // 437
            }                                                                                                          // 438
            n = p;                                                                                                     // 439
        }                                                                                                              // 440
        return null;                                                                                                   // 441
    }                                                                                                                  // 442
                                                                                                                       // 443
    function isCharacterDataNode(node) {                                                                               // 444
        var t = node.nodeType;                                                                                         // 445
        return t == 3 || t == 4 || t == 8 ; // Text, CDataSection or Comment                                           // 446
    }                                                                                                                  // 447
                                                                                                                       // 448
    function insertAfter(node, precedingNode) {                                                                        // 449
        var nextNode = precedingNode.nextSibling, parent = precedingNode.parentNode;                                   // 450
        if (nextNode) {                                                                                                // 451
            parent.insertBefore(node, nextNode);                                                                       // 452
        } else {                                                                                                       // 453
            parent.appendChild(node);                                                                                  // 454
        }                                                                                                              // 455
        return node;                                                                                                   // 456
    }                                                                                                                  // 457
                                                                                                                       // 458
    // Note that we cannot use splitText() because it is bugridden in IE 9.                                            // 459
    function splitDataNode(node, index) {                                                                              // 460
        var newNode = node.cloneNode(false);                                                                           // 461
        newNode.deleteData(0, index);                                                                                  // 462
        node.deleteData(index, node.length - index);                                                                   // 463
        insertAfter(newNode, node);                                                                                    // 464
        return newNode;                                                                                                // 465
    }                                                                                                                  // 466
                                                                                                                       // 467
    function getDocument(node) {                                                                                       // 468
        if (node.nodeType == 9) {                                                                                      // 469
            return node;                                                                                               // 470
        } else if (typeof node.ownerDocument != UNDEF) {                                                               // 471
            return node.ownerDocument;                                                                                 // 472
        } else if (typeof node.document != UNDEF) {                                                                    // 473
            return node.document;                                                                                      // 474
        } else if (node.parentNode) {                                                                                  // 475
            return getDocument(node.parentNode);                                                                       // 476
        } else {                                                                                                       // 477
            throw new Error("getDocument: no document found for node");                                                // 478
        }                                                                                                              // 479
    }                                                                                                                  // 480
                                                                                                                       // 481
    function getWindow(node) {                                                                                         // 482
        var doc = getDocument(node);                                                                                   // 483
        if (typeof doc.defaultView != UNDEF) {                                                                         // 484
            return doc.defaultView;                                                                                    // 485
        } else if (typeof doc.parentWindow != UNDEF) {                                                                 // 486
            return doc.parentWindow;                                                                                   // 487
        } else {                                                                                                       // 488
            throw new Error("Cannot get a window object for node");                                                    // 489
        }                                                                                                              // 490
    }                                                                                                                  // 491
                                                                                                                       // 492
    function getIframeDocument(iframeEl) {                                                                             // 493
        if (typeof iframeEl.contentDocument != UNDEF) {                                                                // 494
            return iframeEl.contentDocument;                                                                           // 495
        } else if (typeof iframeEl.contentWindow != UNDEF) {                                                           // 496
            return iframeEl.contentWindow.document;                                                                    // 497
        } else {                                                                                                       // 498
            throw new Error("getIframeWindow: No Document object found for iframe element");                           // 499
        }                                                                                                              // 500
    }                                                                                                                  // 501
                                                                                                                       // 502
    function getIframeWindow(iframeEl) {                                                                               // 503
        if (typeof iframeEl.contentWindow != UNDEF) {                                                                  // 504
            return iframeEl.contentWindow;                                                                             // 505
        } else if (typeof iframeEl.contentDocument != UNDEF) {                                                         // 506
            return iframeEl.contentDocument.defaultView;                                                               // 507
        } else {                                                                                                       // 508
            throw new Error("getIframeWindow: No Window object found for iframe element");                             // 509
        }                                                                                                              // 510
    }                                                                                                                  // 511
                                                                                                                       // 512
    function getBody(doc) {                                                                                            // 513
        return util.isHostObject(doc, "body") ? doc.body : doc.getElementsByTagName("body")[0];                        // 514
    }                                                                                                                  // 515
                                                                                                                       // 516
    function getRootContainer(node) {                                                                                  // 517
        var parent;                                                                                                    // 518
        while ( (parent = node.parentNode) ) {                                                                         // 519
            node = parent;                                                                                             // 520
        }                                                                                                              // 521
        return node;                                                                                                   // 522
    }                                                                                                                  // 523
                                                                                                                       // 524
    function comparePoints(nodeA, offsetA, nodeB, offsetB) {                                                           // 525
        // See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing                    // 526
        var nodeC, root, childA, childB, n;                                                                            // 527
        if (nodeA == nodeB) {                                                                                          // 528
                                                                                                                       // 529
            // Case 1: nodes are the same                                                                              // 530
            return offsetA === offsetB ? 0 : (offsetA < offsetB) ? -1 : 1;                                             // 531
        } else if ( (nodeC = getClosestAncestorIn(nodeB, nodeA, true)) ) {                                             // 532
                                                                                                                       // 533
            // Case 2: node C (container B or an ancestor) is a child node of A                                        // 534
            return offsetA <= getNodeIndex(nodeC) ? -1 : 1;                                                            // 535
        } else if ( (nodeC = getClosestAncestorIn(nodeA, nodeB, true)) ) {                                             // 536
                                                                                                                       // 537
            // Case 3: node C (container A or an ancestor) is a child node of B                                        // 538
            return getNodeIndex(nodeC) < offsetB  ? -1 : 1;                                                            // 539
        } else {                                                                                                       // 540
                                                                                                                       // 541
            // Case 4: containers are siblings or descendants of siblings                                              // 542
            root = getCommonAncestor(nodeA, nodeB);                                                                    // 543
            childA = (nodeA === root) ? root : getClosestAncestorIn(nodeA, root, true);                                // 544
            childB = (nodeB === root) ? root : getClosestAncestorIn(nodeB, root, true);                                // 545
                                                                                                                       // 546
            if (childA === childB) {                                                                                   // 547
                // This shouldn't be possible                                                                          // 548
                                                                                                                       // 549
                throw new Error("comparePoints got to case 4 and childA and childB are the same!");                    // 550
            } else {                                                                                                   // 551
                n = root.firstChild;                                                                                   // 552
                while (n) {                                                                                            // 553
                    if (n === childA) {                                                                                // 554
                        return -1;                                                                                     // 555
                    } else if (n === childB) {                                                                         // 556
                        return 1;                                                                                      // 557
                    }                                                                                                  // 558
                    n = n.nextSibling;                                                                                 // 559
                }                                                                                                      // 560
                throw new Error("Should not be here!");                                                                // 561
            }                                                                                                          // 562
        }                                                                                                              // 563
    }                                                                                                                  // 564
                                                                                                                       // 565
    function fragmentFromNodeChildren(node) {                                                                          // 566
        var fragment = getDocument(node).createDocumentFragment(), child;                                              // 567
        while ( (child = node.firstChild) ) {                                                                          // 568
            fragment.appendChild(child);                                                                               // 569
        }                                                                                                              // 570
        return fragment;                                                                                               // 571
    }                                                                                                                  // 572
                                                                                                                       // 573
    function inspectNode(node) {                                                                                       // 574
        if (!node) {                                                                                                   // 575
            return "[No node]";                                                                                        // 576
        }                                                                                                              // 577
        if (isCharacterDataNode(node)) {                                                                               // 578
            return '"' + node.data + '"';                                                                              // 579
        } else if (node.nodeType == 1) {                                                                               // 580
            var idAttr = node.id ? ' id="' + node.id + '"' : "";                                                       // 581
            return "<" + node.nodeName + idAttr + ">[" + node.childNodes.length + "]";                                 // 582
        } else {                                                                                                       // 583
            return node.nodeName;                                                                                      // 584
        }                                                                                                              // 585
    }                                                                                                                  // 586
                                                                                                                       // 587
    /**                                                                                                                // 588
     * @constructor                                                                                                    // 589
     */                                                                                                                // 590
    function NodeIterator(root) {                                                                                      // 591
        this.root = root;                                                                                              // 592
        this._next = root;                                                                                             // 593
    }                                                                                                                  // 594
                                                                                                                       // 595
    NodeIterator.prototype = {                                                                                         // 596
        _current: null,                                                                                                // 597
                                                                                                                       // 598
        hasNext: function() {                                                                                          // 599
            return !!this._next;                                                                                       // 600
        },                                                                                                             // 601
                                                                                                                       // 602
        next: function() {                                                                                             // 603
            var n = this._current = this._next;                                                                        // 604
            var child, next;                                                                                           // 605
            if (this._current) {                                                                                       // 606
                child = n.firstChild;                                                                                  // 607
                if (child) {                                                                                           // 608
                    this._next = child;                                                                                // 609
                } else {                                                                                               // 610
                    next = null;                                                                                       // 611
                    while ((n !== this.root) && !(next = n.nextSibling)) {                                             // 612
                        n = n.parentNode;                                                                              // 613
                    }                                                                                                  // 614
                    this._next = next;                                                                                 // 615
                }                                                                                                      // 616
            }                                                                                                          // 617
            return this._current;                                                                                      // 618
        },                                                                                                             // 619
                                                                                                                       // 620
        detach: function() {                                                                                           // 621
            this._current = this._next = this.root = null;                                                             // 622
        }                                                                                                              // 623
    };                                                                                                                 // 624
                                                                                                                       // 625
    function createIterator(root) {                                                                                    // 626
        return new NodeIterator(root);                                                                                 // 627
    }                                                                                                                  // 628
                                                                                                                       // 629
    /**                                                                                                                // 630
     * @constructor                                                                                                    // 631
     */                                                                                                                // 632
    function DomPosition(node, offset) {                                                                               // 633
        this.node = node;                                                                                              // 634
        this.offset = offset;                                                                                          // 635
    }                                                                                                                  // 636
                                                                                                                       // 637
    DomPosition.prototype = {                                                                                          // 638
        equals: function(pos) {                                                                                        // 639
            return this.node === pos.node & this.offset == pos.offset;                                                 // 640
        },                                                                                                             // 641
                                                                                                                       // 642
        inspect: function() {                                                                                          // 643
            return "[DomPosition(" + inspectNode(this.node) + ":" + this.offset + ")]";                                // 644
        }                                                                                                              // 645
    };                                                                                                                 // 646
                                                                                                                       // 647
    /**                                                                                                                // 648
     * @constructor                                                                                                    // 649
     */                                                                                                                // 650
    function DOMException(codeName) {                                                                                  // 651
        this.code = this[codeName];                                                                                    // 652
        this.codeName = codeName;                                                                                      // 653
        this.message = "DOMException: " + this.codeName;                                                               // 654
    }                                                                                                                  // 655
                                                                                                                       // 656
    DOMException.prototype = {                                                                                         // 657
        INDEX_SIZE_ERR: 1,                                                                                             // 658
        HIERARCHY_REQUEST_ERR: 3,                                                                                      // 659
        WRONG_DOCUMENT_ERR: 4,                                                                                         // 660
        NO_MODIFICATION_ALLOWED_ERR: 7,                                                                                // 661
        NOT_FOUND_ERR: 8,                                                                                              // 662
        NOT_SUPPORTED_ERR: 9,                                                                                          // 663
        INVALID_STATE_ERR: 11                                                                                          // 664
    };                                                                                                                 // 665
                                                                                                                       // 666
    DOMException.prototype.toString = function() {                                                                     // 667
        return this.message;                                                                                           // 668
    };                                                                                                                 // 669
                                                                                                                       // 670
    api.dom = {                                                                                                        // 671
        arrayContains: arrayContains,                                                                                  // 672
        isHtmlNamespace: isHtmlNamespace,                                                                              // 673
        parentElement: parentElement,                                                                                  // 674
        getNodeIndex: getNodeIndex,                                                                                    // 675
        getNodeLength: getNodeLength,                                                                                  // 676
        getCommonAncestor: getCommonAncestor,                                                                          // 677
        isAncestorOf: isAncestorOf,                                                                                    // 678
        getClosestAncestorIn: getClosestAncestorIn,                                                                    // 679
        isCharacterDataNode: isCharacterDataNode,                                                                      // 680
        insertAfter: insertAfter,                                                                                      // 681
        splitDataNode: splitDataNode,                                                                                  // 682
        getDocument: getDocument,                                                                                      // 683
        getWindow: getWindow,                                                                                          // 684
        getIframeWindow: getIframeWindow,                                                                              // 685
        getIframeDocument: getIframeDocument,                                                                          // 686
        getBody: getBody,                                                                                              // 687
        getRootContainer: getRootContainer,                                                                            // 688
        comparePoints: comparePoints,                                                                                  // 689
        inspectNode: inspectNode,                                                                                      // 690
        fragmentFromNodeChildren: fragmentFromNodeChildren,                                                            // 691
        createIterator: createIterator,                                                                                // 692
        DomPosition: DomPosition                                                                                       // 693
    };                                                                                                                 // 694
                                                                                                                       // 695
    api.DOMException = DOMException;                                                                                   // 696
});rangy.createModule("DomRange", function(api, module) {                                                              // 697
    api.requireModules( ["DomUtil"] );                                                                                 // 698
                                                                                                                       // 699
                                                                                                                       // 700
    var dom = api.dom;                                                                                                 // 701
    var DomPosition = dom.DomPosition;                                                                                 // 702
    var DOMException = api.DOMException;                                                                               // 703
                                                                                                                       // 704
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 706
    // Utility functions                                                                                               // 707
                                                                                                                       // 708
    function isNonTextPartiallySelected(node, range) {                                                                 // 709
        return (node.nodeType != 3) &&                                                                                 // 710
               (dom.isAncestorOf(node, range.startContainer, true) || dom.isAncestorOf(node, range.endContainer, true));
    }                                                                                                                  // 712
                                                                                                                       // 713
    function getRangeDocument(range) {                                                                                 // 714
        return dom.getDocument(range.startContainer);                                                                  // 715
    }                                                                                                                  // 716
                                                                                                                       // 717
    function dispatchEvent(range, type, args) {                                                                        // 718
        var listeners = range._listeners[type];                                                                        // 719
        if (listeners) {                                                                                               // 720
            for (var i = 0, len = listeners.length; i < len; ++i) {                                                    // 721
                listeners[i].call(range, {target: range, args: args});                                                 // 722
            }                                                                                                          // 723
        }                                                                                                              // 724
    }                                                                                                                  // 725
                                                                                                                       // 726
    function getBoundaryBeforeNode(node) {                                                                             // 727
        return new DomPosition(node.parentNode, dom.getNodeIndex(node));                                               // 728
    }                                                                                                                  // 729
                                                                                                                       // 730
    function getBoundaryAfterNode(node) {                                                                              // 731
        return new DomPosition(node.parentNode, dom.getNodeIndex(node) + 1);                                           // 732
    }                                                                                                                  // 733
                                                                                                                       // 734
    function insertNodeAtPosition(node, n, o) {                                                                        // 735
        var firstNodeInserted = node.nodeType == 11 ? node.firstChild : node;                                          // 736
        if (dom.isCharacterDataNode(n)) {                                                                              // 737
            if (o == n.length) {                                                                                       // 738
                dom.insertAfter(node, n);                                                                              // 739
            } else {                                                                                                   // 740
                n.parentNode.insertBefore(node, o == 0 ? n : dom.splitDataNode(n, o));                                 // 741
            }                                                                                                          // 742
        } else if (o >= n.childNodes.length) {                                                                         // 743
            n.appendChild(node);                                                                                       // 744
        } else {                                                                                                       // 745
            n.insertBefore(node, n.childNodes[o]);                                                                     // 746
        }                                                                                                              // 747
        return firstNodeInserted;                                                                                      // 748
    }                                                                                                                  // 749
                                                                                                                       // 750
    function cloneSubtree(iterator) {                                                                                  // 751
        var partiallySelected;                                                                                         // 752
        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {
            partiallySelected = iterator.isPartiallySelectedSubtree();                                                 // 754
                                                                                                                       // 755
            node = node.cloneNode(!partiallySelected);                                                                 // 756
            if (partiallySelected) {                                                                                   // 757
                subIterator = iterator.getSubtreeIterator();                                                           // 758
                node.appendChild(cloneSubtree(subIterator));                                                           // 759
                subIterator.detach(true);                                                                              // 760
            }                                                                                                          // 761
                                                                                                                       // 762
            if (node.nodeType == 10) { // DocumentType                                                                 // 763
                throw new DOMException("HIERARCHY_REQUEST_ERR");                                                       // 764
            }                                                                                                          // 765
            frag.appendChild(node);                                                                                    // 766
        }                                                                                                              // 767
        return frag;                                                                                                   // 768
    }                                                                                                                  // 769
                                                                                                                       // 770
    function iterateSubtree(rangeIterator, func, iteratorState) {                                                      // 771
        var it, n;                                                                                                     // 772
        iteratorState = iteratorState || { stop: false };                                                              // 773
        for (var node, subRangeIterator; node = rangeIterator.next(); ) {                                              // 774
            //log.debug("iterateSubtree, partially selected: " + rangeIterator.isPartiallySelectedSubtree(), nodeToString(node));
            if (rangeIterator.isPartiallySelectedSubtree()) {                                                          // 776
                // The node is partially selected by the Range, so we can use a new RangeIterator on the portion of the
                // node selected by the Range.                                                                         // 778
                if (func(node) === false) {                                                                            // 779
                    iteratorState.stop = true;                                                                         // 780
                    return;                                                                                            // 781
                } else {                                                                                               // 782
                    subRangeIterator = rangeIterator.getSubtreeIterator();                                             // 783
                    iterateSubtree(subRangeIterator, func, iteratorState);                                             // 784
                    subRangeIterator.detach(true);                                                                     // 785
                    if (iteratorState.stop) {                                                                          // 786
                        return;                                                                                        // 787
                    }                                                                                                  // 788
                }                                                                                                      // 789
            } else {                                                                                                   // 790
                // The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its  // 791
                // descendant                                                                                          // 792
                it = dom.createIterator(node);                                                                         // 793
                while ( (n = it.next()) ) {                                                                            // 794
                    if (func(n) === false) {                                                                           // 795
                        iteratorState.stop = true;                                                                     // 796
                        return;                                                                                        // 797
                    }                                                                                                  // 798
                }                                                                                                      // 799
            }                                                                                                          // 800
        }                                                                                                              // 801
    }                                                                                                                  // 802
                                                                                                                       // 803
    function deleteSubtree(iterator) {                                                                                 // 804
        var subIterator;                                                                                               // 805
        while (iterator.next()) {                                                                                      // 806
            if (iterator.isPartiallySelectedSubtree()) {                                                               // 807
                subIterator = iterator.getSubtreeIterator();                                                           // 808
                deleteSubtree(subIterator);                                                                            // 809
                subIterator.detach(true);                                                                              // 810
            } else {                                                                                                   // 811
                iterator.remove();                                                                                     // 812
            }                                                                                                          // 813
        }                                                                                                              // 814
    }                                                                                                                  // 815
                                                                                                                       // 816
    function extractSubtree(iterator) {                                                                                // 817
                                                                                                                       // 818
        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {
                                                                                                                       // 820
                                                                                                                       // 821
            if (iterator.isPartiallySelectedSubtree()) {                                                               // 822
                node = node.cloneNode(false);                                                                          // 823
                subIterator = iterator.getSubtreeIterator();                                                           // 824
                node.appendChild(extractSubtree(subIterator));                                                         // 825
                subIterator.detach(true);                                                                              // 826
            } else {                                                                                                   // 827
                iterator.remove();                                                                                     // 828
            }                                                                                                          // 829
            if (node.nodeType == 10) { // DocumentType                                                                 // 830
                throw new DOMException("HIERARCHY_REQUEST_ERR");                                                       // 831
            }                                                                                                          // 832
            frag.appendChild(node);                                                                                    // 833
        }                                                                                                              // 834
        return frag;                                                                                                   // 835
    }                                                                                                                  // 836
                                                                                                                       // 837
    function getNodesInRange(range, nodeTypes, filter) {                                                               // 838
        //log.info("getNodesInRange, " + nodeTypes.join(","));                                                         // 839
        var filterNodeTypes = !!(nodeTypes && nodeTypes.length), regex;                                                // 840
        var filterExists = !!filter;                                                                                   // 841
        if (filterNodeTypes) {                                                                                         // 842
            regex = new RegExp("^(" + nodeTypes.join("|") + ")$");                                                     // 843
        }                                                                                                              // 844
                                                                                                                       // 845
        var nodes = [];                                                                                                // 846
        iterateSubtree(new RangeIterator(range, false), function(node) {                                               // 847
            if ((!filterNodeTypes || regex.test(node.nodeType)) && (!filterExists || filter(node))) {                  // 848
                nodes.push(node);                                                                                      // 849
            }                                                                                                          // 850
        });                                                                                                            // 851
        return nodes;                                                                                                  // 852
    }                                                                                                                  // 853
                                                                                                                       // 854
    function inspect(range) {                                                                                          // 855
        var name = (typeof range.getName == "undefined") ? "Range" : range.getName();                                  // 856
        return "[" + name + "(" + dom.inspectNode(range.startContainer) + ":" + range.startOffset + ", " +             // 857
                dom.inspectNode(range.endContainer) + ":" + range.endOffset + ")]";                                    // 858
    }                                                                                                                  // 859
                                                                                                                       // 860
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 862
    // RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)        // 863
                                                                                                                       // 864
    /**                                                                                                                // 865
     * @constructor                                                                                                    // 866
     */                                                                                                                // 867
    function RangeIterator(range, clonePartiallySelectedTextNodes) {                                                   // 868
        this.range = range;                                                                                            // 869
        this.clonePartiallySelectedTextNodes = clonePartiallySelectedTextNodes;                                        // 870
                                                                                                                       // 871
                                                                                                                       // 872
                                                                                                                       // 873
        if (!range.collapsed) {                                                                                        // 874
            this.sc = range.startContainer;                                                                            // 875
            this.so = range.startOffset;                                                                               // 876
            this.ec = range.endContainer;                                                                              // 877
            this.eo = range.endOffset;                                                                                 // 878
            var root = range.commonAncestorContainer;                                                                  // 879
                                                                                                                       // 880
            if (this.sc === this.ec && dom.isCharacterDataNode(this.sc)) {                                             // 881
                this.isSingleCharacterDataNode = true;                                                                 // 882
                this._first = this._last = this._next = this.sc;                                                       // 883
            } else {                                                                                                   // 884
                this._first = this._next = (this.sc === root && !dom.isCharacterDataNode(this.sc)) ?                   // 885
                    this.sc.childNodes[this.so] : dom.getClosestAncestorIn(this.sc, root, true);                       // 886
                this._last = (this.ec === root && !dom.isCharacterDataNode(this.ec)) ?                                 // 887
                    this.ec.childNodes[this.eo - 1] : dom.getClosestAncestorIn(this.ec, root, true);                   // 888
            }                                                                                                          // 889
                                                                                                                       // 890
        }                                                                                                              // 891
    }                                                                                                                  // 892
                                                                                                                       // 893
    RangeIterator.prototype = {                                                                                        // 894
        _current: null,                                                                                                // 895
        _next: null,                                                                                                   // 896
        _first: null,                                                                                                  // 897
        _last: null,                                                                                                   // 898
        isSingleCharacterDataNode: false,                                                                              // 899
                                                                                                                       // 900
        reset: function() {                                                                                            // 901
            this._current = null;                                                                                      // 902
            this._next = this._first;                                                                                  // 903
        },                                                                                                             // 904
                                                                                                                       // 905
        hasNext: function() {                                                                                          // 906
            return !!this._next;                                                                                       // 907
        },                                                                                                             // 908
                                                                                                                       // 909
        next: function() {                                                                                             // 910
            // Move to next node                                                                                       // 911
            var current = this._current = this._next;                                                                  // 912
            if (current) {                                                                                             // 913
                this._next = (current !== this._last) ? current.nextSibling : null;                                    // 914
                                                                                                                       // 915
                // Check for partially selected text nodes                                                             // 916
                if (dom.isCharacterDataNode(current) && this.clonePartiallySelectedTextNodes) {                        // 917
                    if (current === this.ec) {                                                                         // 918
                                                                                                                       // 919
                        (current = current.cloneNode(true)).deleteData(this.eo, current.length - this.eo);             // 920
                    }                                                                                                  // 921
                    if (this._current === this.sc) {                                                                   // 922
                                                                                                                       // 923
                        (current = current.cloneNode(true)).deleteData(0, this.so);                                    // 924
                    }                                                                                                  // 925
                }                                                                                                      // 926
            }                                                                                                          // 927
                                                                                                                       // 928
            return current;                                                                                            // 929
        },                                                                                                             // 930
                                                                                                                       // 931
        remove: function() {                                                                                           // 932
            var current = this._current, start, end;                                                                   // 933
                                                                                                                       // 934
            if (dom.isCharacterDataNode(current) && (current === this.sc || current === this.ec)) {                    // 935
                start = (current === this.sc) ? this.so : 0;                                                           // 936
                end = (current === this.ec) ? this.eo : current.length;                                                // 937
                if (start != end) {                                                                                    // 938
                    current.deleteData(start, end - start);                                                            // 939
                }                                                                                                      // 940
            } else {                                                                                                   // 941
                if (current.parentNode) {                                                                              // 942
                    current.parentNode.removeChild(current);                                                           // 943
                } else {                                                                                               // 944
                                                                                                                       // 945
                }                                                                                                      // 946
            }                                                                                                          // 947
        },                                                                                                             // 948
                                                                                                                       // 949
        // Checks if the current node is partially selected                                                            // 950
        isPartiallySelectedSubtree: function() {                                                                       // 951
            var current = this._current;                                                                               // 952
            return isNonTextPartiallySelected(current, this.range);                                                    // 953
        },                                                                                                             // 954
                                                                                                                       // 955
        getSubtreeIterator: function() {                                                                               // 956
            var subRange;                                                                                              // 957
            if (this.isSingleCharacterDataNode) {                                                                      // 958
                subRange = this.range.cloneRange();                                                                    // 959
                subRange.collapse();                                                                                   // 960
            } else {                                                                                                   // 961
                subRange = new Range(getRangeDocument(this.range));                                                    // 962
                var current = this._current;                                                                           // 963
                var startContainer = current, startOffset = 0, endContainer = current, endOffset = dom.getNodeLength(current);
                                                                                                                       // 965
                if (dom.isAncestorOf(current, this.sc, true)) {                                                        // 966
                    startContainer = this.sc;                                                                          // 967
                    startOffset = this.so;                                                                             // 968
                }                                                                                                      // 969
                if (dom.isAncestorOf(current, this.ec, true)) {                                                        // 970
                    endContainer = this.ec;                                                                            // 971
                    endOffset = this.eo;                                                                               // 972
                }                                                                                                      // 973
                                                                                                                       // 974
                updateBoundaries(subRange, startContainer, startOffset, endContainer, endOffset);                      // 975
            }                                                                                                          // 976
            return new RangeIterator(subRange, this.clonePartiallySelectedTextNodes);                                  // 977
        },                                                                                                             // 978
                                                                                                                       // 979
        detach: function(detachRange) {                                                                                // 980
            if (detachRange) {                                                                                         // 981
                this.range.detach();                                                                                   // 982
            }                                                                                                          // 983
            this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null;
        }                                                                                                              // 985
    };                                                                                                                 // 986
                                                                                                                       // 987
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 989
    // Exceptions                                                                                                      // 990
                                                                                                                       // 991
    /**                                                                                                                // 992
     * @constructor                                                                                                    // 993
     */                                                                                                                // 994
    function RangeException(codeName) {                                                                                // 995
        this.code = this[codeName];                                                                                    // 996
        this.codeName = codeName;                                                                                      // 997
        this.message = "RangeException: " + this.codeName;                                                             // 998
    }                                                                                                                  // 999
                                                                                                                       // 1000
    RangeException.prototype = {                                                                                       // 1001
        BAD_BOUNDARYPOINTS_ERR: 1,                                                                                     // 1002
        INVALID_NODE_TYPE_ERR: 2                                                                                       // 1003
    };                                                                                                                 // 1004
                                                                                                                       // 1005
    RangeException.prototype.toString = function() {                                                                   // 1006
        return this.message;                                                                                           // 1007
    };                                                                                                                 // 1008
                                                                                                                       // 1009
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1011
    /**                                                                                                                // 1012
     * Currently iterates through all nodes in the range on creation until I think of a decent way to do it            // 1013
     * TODO: Look into making this a proper iterator, not requiring preloading everything first                        // 1014
     * @constructor                                                                                                    // 1015
     */                                                                                                                // 1016
    function RangeNodeIterator(range, nodeTypes, filter) {                                                             // 1017
        this.nodes = getNodesInRange(range, nodeTypes, filter);                                                        // 1018
        this._next = this.nodes[0];                                                                                    // 1019
        this._position = 0;                                                                                            // 1020
    }                                                                                                                  // 1021
                                                                                                                       // 1022
    RangeNodeIterator.prototype = {                                                                                    // 1023
        _current: null,                                                                                                // 1024
                                                                                                                       // 1025
        hasNext: function() {                                                                                          // 1026
            return !!this._next;                                                                                       // 1027
        },                                                                                                             // 1028
                                                                                                                       // 1029
        next: function() {                                                                                             // 1030
            this._current = this._next;                                                                                // 1031
            this._next = this.nodes[ ++this._position ];                                                               // 1032
            return this._current;                                                                                      // 1033
        },                                                                                                             // 1034
                                                                                                                       // 1035
        detach: function() {                                                                                           // 1036
            this._current = this._next = this.nodes = null;                                                            // 1037
        }                                                                                                              // 1038
    };                                                                                                                 // 1039
                                                                                                                       // 1040
    var beforeAfterNodeTypes = [1, 3, 4, 5, 7, 8, 10];                                                                 // 1041
    var rootContainerNodeTypes = [2, 9, 11];                                                                           // 1042
    var readonlyNodeTypes = [5, 6, 10, 12];                                                                            // 1043
    var insertableNodeTypes = [1, 3, 4, 5, 7, 8, 10, 11];                                                              // 1044
    var surroundNodeTypes = [1, 3, 4, 5, 7, 8];                                                                        // 1045
                                                                                                                       // 1046
    function createAncestorFinder(nodeTypes) {                                                                         // 1047
        return function(node, selfIsAncestor) {                                                                        // 1048
            var t, n = selfIsAncestor ? node : node.parentNode;                                                        // 1049
            while (n) {                                                                                                // 1050
                t = n.nodeType;                                                                                        // 1051
                if (dom.arrayContains(nodeTypes, t)) {                                                                 // 1052
                    return n;                                                                                          // 1053
                }                                                                                                      // 1054
                n = n.parentNode;                                                                                      // 1055
            }                                                                                                          // 1056
            return null;                                                                                               // 1057
        };                                                                                                             // 1058
    }                                                                                                                  // 1059
                                                                                                                       // 1060
    var getRootContainer = dom.getRootContainer;                                                                       // 1061
    var getDocumentOrFragmentContainer = createAncestorFinder( [9, 11] );                                              // 1062
    var getReadonlyAncestor = createAncestorFinder(readonlyNodeTypes);                                                 // 1063
    var getDocTypeNotationEntityAncestor = createAncestorFinder( [6, 10, 12] );                                        // 1064
                                                                                                                       // 1065
    function assertNoDocTypeNotationEntityAncestor(node, allowSelf) {                                                  // 1066
        if (getDocTypeNotationEntityAncestor(node, allowSelf)) {                                                       // 1067
            throw new RangeException("INVALID_NODE_TYPE_ERR");                                                         // 1068
        }                                                                                                              // 1069
    }                                                                                                                  // 1070
                                                                                                                       // 1071
    function assertNotDetached(range) {                                                                                // 1072
        if (!range.startContainer) {                                                                                   // 1073
            throw new DOMException("INVALID_STATE_ERR");                                                               // 1074
        }                                                                                                              // 1075
    }                                                                                                                  // 1076
                                                                                                                       // 1077
    function assertValidNodeType(node, invalidTypes) {                                                                 // 1078
        if (!dom.arrayContains(invalidTypes, node.nodeType)) {                                                         // 1079
            throw new RangeException("INVALID_NODE_TYPE_ERR");                                                         // 1080
        }                                                                                                              // 1081
    }                                                                                                                  // 1082
                                                                                                                       // 1083
    function assertValidOffset(node, offset) {                                                                         // 1084
        if (offset < 0 || offset > (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length)) {           // 1085
            throw new DOMException("INDEX_SIZE_ERR");                                                                  // 1086
        }                                                                                                              // 1087
    }                                                                                                                  // 1088
                                                                                                                       // 1089
    function assertSameDocumentOrFragment(node1, node2) {                                                              // 1090
        if (getDocumentOrFragmentContainer(node1, true) !== getDocumentOrFragmentContainer(node2, true)) {             // 1091
            throw new DOMException("WRONG_DOCUMENT_ERR");                                                              // 1092
        }                                                                                                              // 1093
    }                                                                                                                  // 1094
                                                                                                                       // 1095
    function assertNodeNotReadOnly(node) {                                                                             // 1096
        if (getReadonlyAncestor(node, true)) {                                                                         // 1097
            throw new DOMException("NO_MODIFICATION_ALLOWED_ERR");                                                     // 1098
        }                                                                                                              // 1099
    }                                                                                                                  // 1100
                                                                                                                       // 1101
    function assertNode(node, codeName) {                                                                              // 1102
        if (!node) {                                                                                                   // 1103
            throw new DOMException(codeName);                                                                          // 1104
        }                                                                                                              // 1105
    }                                                                                                                  // 1106
                                                                                                                       // 1107
    function isOrphan(node) {                                                                                          // 1108
        return !dom.arrayContains(rootContainerNodeTypes, node.nodeType) && !getDocumentOrFragmentContainer(node, true);
    }                                                                                                                  // 1110
                                                                                                                       // 1111
    function isValidOffset(node, offset) {                                                                             // 1112
        return offset <= (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length);                       // 1113
    }                                                                                                                  // 1114
                                                                                                                       // 1115
    function assertRangeValid(range) {                                                                                 // 1116
        assertNotDetached(range);                                                                                      // 1117
        if (isOrphan(range.startContainer) || isOrphan(range.endContainer) ||                                          // 1118
                !isValidOffset(range.startContainer, range.startOffset) ||                                             // 1119
                !isValidOffset(range.endContainer, range.endOffset)) {                                                 // 1120
            throw new Error("Range error: Range is no longer valid after DOM mutation (" + range.inspect() + ")");     // 1121
        }                                                                                                              // 1122
    }                                                                                                                  // 1123
                                                                                                                       // 1124
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1126
    // Test the browser's innerHTML support to decide how to implement createContextualFragment                        // 1127
    var styleEl = document.createElement("style");                                                                     // 1128
    var htmlParsingConforms = false;                                                                                   // 1129
    try {                                                                                                              // 1130
        styleEl.innerHTML = "<b>x</b>";                                                                                // 1131
        htmlParsingConforms = (styleEl.firstChild.nodeType == 3); // Opera incorrectly creates an element node         // 1132
    } catch (e) {                                                                                                      // 1133
        // IE 6 and 7 throw                                                                                            // 1134
    }                                                                                                                  // 1135
                                                                                                                       // 1136
    api.features.htmlParsingConforms = htmlParsingConforms;                                                            // 1137
                                                                                                                       // 1138
    var createContextualFragment = htmlParsingConforms ?                                                               // 1139
                                                                                                                       // 1140
        // Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See         // 1141
        // discussion and base code for this implementation at issue 67.                                               // 1142
        // Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface                             // 1143
        // Thanks to Aleks Williams.                                                                                   // 1144
        function(fragmentStr) {                                                                                        // 1145
            // "Let node the context object's start's node."                                                           // 1146
            var node = this.startContainer;                                                                            // 1147
            var doc = dom.getDocument(node);                                                                           // 1148
                                                                                                                       // 1149
            // "If the context object's start's node is null, raise an INVALID_STATE_ERR                               // 1150
            // exception and abort these steps."                                                                       // 1151
            if (!node) {                                                                                               // 1152
                throw new DOMException("INVALID_STATE_ERR");                                                           // 1153
            }                                                                                                          // 1154
                                                                                                                       // 1155
            // "Let element be as follows, depending on node's interface:"                                             // 1156
            // Document, Document Fragment: null                                                                       // 1157
            var el = null;                                                                                             // 1158
                                                                                                                       // 1159
            // "Element: node"                                                                                         // 1160
            if (node.nodeType == 1) {                                                                                  // 1161
                el = node;                                                                                             // 1162
                                                                                                                       // 1163
            // "Text, Comment: node's parentElement"                                                                   // 1164
            } else if (dom.isCharacterDataNode(node)) {                                                                // 1165
                el = dom.parentElement(node);                                                                          // 1166
            }                                                                                                          // 1167
                                                                                                                       // 1168
            // "If either element is null or element's ownerDocument is an HTML document                               // 1169
            // and element's local name is "html" and element's namespace is the HTML                                  // 1170
            // namespace"                                                                                              // 1171
            if (el === null || (                                                                                       // 1172
                el.nodeName == "HTML"                                                                                  // 1173
                && dom.isHtmlNamespace(dom.getDocument(el).documentElement)                                            // 1174
                && dom.isHtmlNamespace(el)                                                                             // 1175
            )) {                                                                                                       // 1176
                                                                                                                       // 1177
            // "let element be a new Element with "body" as its local name and the HTML                                // 1178
            // namespace as its namespace.""                                                                           // 1179
                el = doc.createElement("body");                                                                        // 1180
            } else {                                                                                                   // 1181
                el = el.cloneNode(false);                                                                              // 1182
            }                                                                                                          // 1183
                                                                                                                       // 1184
            // "If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm."               // 1185
            // "If the node's document is an XML document: Invoke the XML fragment parsing algorithm."                 // 1186
            // "In either case, the algorithm must be invoked with fragment as the input                               // 1187
            // and element as the context element."                                                                    // 1188
            el.innerHTML = fragmentStr;                                                                                // 1189
                                                                                                                       // 1190
            // "If this raises an exception, then abort these steps. Otherwise, let new                                // 1191
            // children be the nodes returned."                                                                        // 1192
                                                                                                                       // 1193
            // "Let fragment be a new DocumentFragment."                                                               // 1194
            // "Append all new children to fragment."                                                                  // 1195
            // "Return fragment."                                                                                      // 1196
            return dom.fragmentFromNodeChildren(el);                                                                   // 1197
        } :                                                                                                            // 1198
                                                                                                                       // 1199
        // In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that    // 1200
        // previous versions of Rangy used (with the exception of using a body element rather than a div)              // 1201
        function(fragmentStr) {                                                                                        // 1202
            assertNotDetached(this);                                                                                   // 1203
            var doc = getRangeDocument(this);                                                                          // 1204
            var el = doc.createElement("body");                                                                        // 1205
            el.innerHTML = fragmentStr;                                                                                // 1206
                                                                                                                       // 1207
            return dom.fragmentFromNodeChildren(el);                                                                   // 1208
        };                                                                                                             // 1209
                                                                                                                       // 1210
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1212
    var rangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",                  // 1213
        "commonAncestorContainer"];                                                                                    // 1214
                                                                                                                       // 1215
    var s2s = 0, s2e = 1, e2e = 2, e2s = 3;                                                                            // 1216
    var n_b = 0, n_a = 1, n_b_a = 2, n_i = 3;                                                                          // 1217
                                                                                                                       // 1218
    function RangePrototype() {}                                                                                       // 1219
                                                                                                                       // 1220
    RangePrototype.prototype = {                                                                                       // 1221
        attachListener: function(type, listener) {                                                                     // 1222
            this._listeners[type].push(listener);                                                                      // 1223
        },                                                                                                             // 1224
                                                                                                                       // 1225
        compareBoundaryPoints: function(how, range) {                                                                  // 1226
            assertRangeValid(this);                                                                                    // 1227
            assertSameDocumentOrFragment(this.startContainer, range.startContainer);                                   // 1228
                                                                                                                       // 1229
            var nodeA, offsetA, nodeB, offsetB;                                                                        // 1230
            var prefixA = (how == e2s || how == s2s) ? "start" : "end";                                                // 1231
            var prefixB = (how == s2e || how == s2s) ? "start" : "end";                                                // 1232
            nodeA = this[prefixA + "Container"];                                                                       // 1233
            offsetA = this[prefixA + "Offset"];                                                                        // 1234
            nodeB = range[prefixB + "Container"];                                                                      // 1235
            offsetB = range[prefixB + "Offset"];                                                                       // 1236
            return dom.comparePoints(nodeA, offsetA, nodeB, offsetB);                                                  // 1237
        },                                                                                                             // 1238
                                                                                                                       // 1239
        insertNode: function(node) {                                                                                   // 1240
            assertRangeValid(this);                                                                                    // 1241
            assertValidNodeType(node, insertableNodeTypes);                                                            // 1242
            assertNodeNotReadOnly(this.startContainer);                                                                // 1243
                                                                                                                       // 1244
            if (dom.isAncestorOf(node, this.startContainer, true)) {                                                   // 1245
                throw new DOMException("HIERARCHY_REQUEST_ERR");                                                       // 1246
            }                                                                                                          // 1247
                                                                                                                       // 1248
            // No check for whether the container of the start of the Range is of a type that does not allow           // 1249
            // children of the type of node: the browser's DOM implementation should do this for us when we attempt    // 1250
            // to add the node                                                                                         // 1251
                                                                                                                       // 1252
            var firstNodeInserted = insertNodeAtPosition(node, this.startContainer, this.startOffset);                 // 1253
            this.setStartBefore(firstNodeInserted);                                                                    // 1254
        },                                                                                                             // 1255
                                                                                                                       // 1256
        cloneContents: function() {                                                                                    // 1257
            assertRangeValid(this);                                                                                    // 1258
                                                                                                                       // 1259
            var clone, frag;                                                                                           // 1260
            if (this.collapsed) {                                                                                      // 1261
                return getRangeDocument(this).createDocumentFragment();                                                // 1262
            } else {                                                                                                   // 1263
                if (this.startContainer === this.endContainer && dom.isCharacterDataNode(this.startContainer)) {       // 1264
                    clone = this.startContainer.cloneNode(true);                                                       // 1265
                    clone.data = clone.data.slice(this.startOffset, this.endOffset);                                   // 1266
                    frag = getRangeDocument(this).createDocumentFragment();                                            // 1267
                    frag.appendChild(clone);                                                                           // 1268
                    return frag;                                                                                       // 1269
                } else {                                                                                               // 1270
                    var iterator = new RangeIterator(this, true);                                                      // 1271
                    clone = cloneSubtree(iterator);                                                                    // 1272
                    iterator.detach();                                                                                 // 1273
                }                                                                                                      // 1274
                return clone;                                                                                          // 1275
            }                                                                                                          // 1276
        },                                                                                                             // 1277
                                                                                                                       // 1278
        canSurroundContents: function() {                                                                              // 1279
            assertRangeValid(this);                                                                                    // 1280
            assertNodeNotReadOnly(this.startContainer);                                                                // 1281
            assertNodeNotReadOnly(this.endContainer);                                                                  // 1282
                                                                                                                       // 1283
            // Check if the contents can be surrounded. Specifically, this means whether the range partially selects   // 1284
            // no non-text nodes.                                                                                      // 1285
            var iterator = new RangeIterator(this, true);                                                              // 1286
            var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||         // 1287
                    (iterator._last && isNonTextPartiallySelected(iterator._last, this)));                             // 1288
            iterator.detach();                                                                                         // 1289
            return !boundariesInvalid;                                                                                 // 1290
        },                                                                                                             // 1291
                                                                                                                       // 1292
        surroundContents: function(node) {                                                                             // 1293
            assertValidNodeType(node, surroundNodeTypes);                                                              // 1294
                                                                                                                       // 1295
            if (!this.canSurroundContents()) {                                                                         // 1296
                throw new RangeException("BAD_BOUNDARYPOINTS_ERR");                                                    // 1297
            }                                                                                                          // 1298
                                                                                                                       // 1299
            // Extract the contents                                                                                    // 1300
            var content = this.extractContents();                                                                      // 1301
                                                                                                                       // 1302
            // Clear the children of the node                                                                          // 1303
            if (node.hasChildNodes()) {                                                                                // 1304
                while (node.lastChild) {                                                                               // 1305
                    node.removeChild(node.lastChild);                                                                  // 1306
                }                                                                                                      // 1307
            }                                                                                                          // 1308
                                                                                                                       // 1309
            // Insert the new node and add the extracted contents                                                      // 1310
            insertNodeAtPosition(node, this.startContainer, this.startOffset);                                         // 1311
            node.appendChild(content);                                                                                 // 1312
                                                                                                                       // 1313
            this.selectNode(node);                                                                                     // 1314
        },                                                                                                             // 1315
                                                                                                                       // 1316
        cloneRange: function() {                                                                                       // 1317
            assertRangeValid(this);                                                                                    // 1318
            var range = new Range(getRangeDocument(this));                                                             // 1319
            var i = rangeProperties.length, prop;                                                                      // 1320
            while (i--) {                                                                                              // 1321
                prop = rangeProperties[i];                                                                             // 1322
                range[prop] = this[prop];                                                                              // 1323
            }                                                                                                          // 1324
            return range;                                                                                              // 1325
        },                                                                                                             // 1326
                                                                                                                       // 1327
        toString: function() {                                                                                         // 1328
            assertRangeValid(this);                                                                                    // 1329
            var sc = this.startContainer;                                                                              // 1330
            if (sc === this.endContainer && dom.isCharacterDataNode(sc)) {                                             // 1331
                return (sc.nodeType == 3 || sc.nodeType == 4) ? sc.data.slice(this.startOffset, this.endOffset) : "";  // 1332
            } else {                                                                                                   // 1333
                var textBits = [], iterator = new RangeIterator(this, true);                                           // 1334
                                                                                                                       // 1335
                iterateSubtree(iterator, function(node) {                                                              // 1336
                    // Accept only text or CDATA nodes, not comments                                                   // 1337
                                                                                                                       // 1338
                    if (node.nodeType == 3 || node.nodeType == 4) {                                                    // 1339
                        textBits.push(node.data);                                                                      // 1340
                    }                                                                                                  // 1341
                });                                                                                                    // 1342
                iterator.detach();                                                                                     // 1343
                return textBits.join("");                                                                              // 1344
            }                                                                                                          // 1345
        },                                                                                                             // 1346
                                                                                                                       // 1347
        // The methods below are all non-standard. The following batch were introduced by Mozilla but have since       // 1348
        // been removed from Mozilla.                                                                                  // 1349
                                                                                                                       // 1350
        compareNode: function(node) {                                                                                  // 1351
            assertRangeValid(this);                                                                                    // 1352
                                                                                                                       // 1353
            var parent = node.parentNode;                                                                              // 1354
            var nodeIndex = dom.getNodeIndex(node);                                                                    // 1355
                                                                                                                       // 1356
            if (!parent) {                                                                                             // 1357
                throw new DOMException("NOT_FOUND_ERR");                                                               // 1358
            }                                                                                                          // 1359
                                                                                                                       // 1360
            var startComparison = this.comparePoint(parent, nodeIndex),                                                // 1361
                endComparison = this.comparePoint(parent, nodeIndex + 1);                                              // 1362
                                                                                                                       // 1363
            if (startComparison < 0) { // Node starts before                                                           // 1364
                return (endComparison > 0) ? n_b_a : n_b;                                                              // 1365
            } else {                                                                                                   // 1366
                return (endComparison > 0) ? n_a : n_i;                                                                // 1367
            }                                                                                                          // 1368
        },                                                                                                             // 1369
                                                                                                                       // 1370
        comparePoint: function(node, offset) {                                                                         // 1371
            assertRangeValid(this);                                                                                    // 1372
            assertNode(node, "HIERARCHY_REQUEST_ERR");                                                                 // 1373
            assertSameDocumentOrFragment(node, this.startContainer);                                                   // 1374
                                                                                                                       // 1375
            if (dom.comparePoints(node, offset, this.startContainer, this.startOffset) < 0) {                          // 1376
                return -1;                                                                                             // 1377
            } else if (dom.comparePoints(node, offset, this.endContainer, this.endOffset) > 0) {                       // 1378
                return 1;                                                                                              // 1379
            }                                                                                                          // 1380
            return 0;                                                                                                  // 1381
        },                                                                                                             // 1382
                                                                                                                       // 1383
        createContextualFragment: createContextualFragment,                                                            // 1384
                                                                                                                       // 1385
        toHtml: function() {                                                                                           // 1386
            assertRangeValid(this);                                                                                    // 1387
            var container = getRangeDocument(this).createElement("div");                                               // 1388
            container.appendChild(this.cloneContents());                                                               // 1389
            return container.innerHTML;                                                                                // 1390
        },                                                                                                             // 1391
                                                                                                                       // 1392
        // touchingIsIntersecting determines whether this method considers a node that borders a range intersects      // 1393
        // with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)                                        // 1394
        intersectsNode: function(node, touchingIsIntersecting) {                                                       // 1395
            assertRangeValid(this);                                                                                    // 1396
            assertNode(node, "NOT_FOUND_ERR");                                                                         // 1397
            if (dom.getDocument(node) !== getRangeDocument(this)) {                                                    // 1398
                return false;                                                                                          // 1399
            }                                                                                                          // 1400
                                                                                                                       // 1401
            var parent = node.parentNode, offset = dom.getNodeIndex(node);                                             // 1402
            assertNode(parent, "NOT_FOUND_ERR");                                                                       // 1403
                                                                                                                       // 1404
            var startComparison = dom.comparePoints(parent, offset, this.endContainer, this.endOffset),                // 1405
                endComparison = dom.comparePoints(parent, offset + 1, this.startContainer, this.startOffset);          // 1406
                                                                                                                       // 1407
            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
        },                                                                                                             // 1409
                                                                                                                       // 1410
                                                                                                                       // 1411
        isPointInRange: function(node, offset) {                                                                       // 1412
            assertRangeValid(this);                                                                                    // 1413
            assertNode(node, "HIERARCHY_REQUEST_ERR");                                                                 // 1414
            assertSameDocumentOrFragment(node, this.startContainer);                                                   // 1415
                                                                                                                       // 1416
            return (dom.comparePoints(node, offset, this.startContainer, this.startOffset) >= 0) &&                    // 1417
                   (dom.comparePoints(node, offset, this.endContainer, this.endOffset) <= 0);                          // 1418
        },                                                                                                             // 1419
                                                                                                                       // 1420
        // The methods below are non-standard and invented by me.                                                      // 1421
                                                                                                                       // 1422
        // Sharing a boundary start-to-end or end-to-start does not count as intersection.                             // 1423
        intersectsRange: function(range, touchingIsIntersecting) {                                                     // 1424
            assertRangeValid(this);                                                                                    // 1425
                                                                                                                       // 1426
            if (getRangeDocument(range) != getRangeDocument(this)) {                                                   // 1427
                throw new DOMException("WRONG_DOCUMENT_ERR");                                                          // 1428
            }                                                                                                          // 1429
                                                                                                                       // 1430
            var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.endContainer, range.endOffset),
                endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.startContainer, range.startOffset);
                                                                                                                       // 1433
            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
        },                                                                                                             // 1435
                                                                                                                       // 1436
        intersection: function(range) {                                                                                // 1437
            if (this.intersectsRange(range)) {                                                                         // 1438
                var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.startContainer, range.startOffset),
                    endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.endContainer, range.endOffset);
                                                                                                                       // 1441
                var intersectionRange = this.cloneRange();                                                             // 1442
                                                                                                                       // 1443
                if (startComparison == -1) {                                                                           // 1444
                    intersectionRange.setStart(range.startContainer, range.startOffset);                               // 1445
                }                                                                                                      // 1446
                if (endComparison == 1) {                                                                              // 1447
                    intersectionRange.setEnd(range.endContainer, range.endOffset);                                     // 1448
                }                                                                                                      // 1449
                return intersectionRange;                                                                              // 1450
            }                                                                                                          // 1451
            return null;                                                                                               // 1452
        },                                                                                                             // 1453
                                                                                                                       // 1454
        union: function(range) {                                                                                       // 1455
            if (this.intersectsRange(range, true)) {                                                                   // 1456
                var unionRange = this.cloneRange();                                                                    // 1457
                if (dom.comparePoints(range.startContainer, range.startOffset, this.startContainer, this.startOffset) == -1) {
                    unionRange.setStart(range.startContainer, range.startOffset);                                      // 1459
                }                                                                                                      // 1460
                if (dom.comparePoints(range.endContainer, range.endOffset, this.endContainer, this.endOffset) == 1) {  // 1461
                    unionRange.setEnd(range.endContainer, range.endOffset);                                            // 1462
                }                                                                                                      // 1463
                return unionRange;                                                                                     // 1464
            } else {                                                                                                   // 1465
                throw new RangeException("Ranges do not intersect");                                                   // 1466
            }                                                                                                          // 1467
        },                                                                                                             // 1468
                                                                                                                       // 1469
        containsNode: function(node, allowPartial) {                                                                   // 1470
            if (allowPartial) {                                                                                        // 1471
                return this.intersectsNode(node, false);                                                               // 1472
            } else {                                                                                                   // 1473
                return this.compareNode(node) == n_i;                                                                  // 1474
            }                                                                                                          // 1475
        },                                                                                                             // 1476
                                                                                                                       // 1477
        containsNodeContents: function(node) {                                                                         // 1478
            return this.comparePoint(node, 0) >= 0 && this.comparePoint(node, dom.getNodeLength(node)) <= 0;           // 1479
        },                                                                                                             // 1480
                                                                                                                       // 1481
        containsRange: function(range) {                                                                               // 1482
            return this.intersection(range).equals(range);                                                             // 1483
        },                                                                                                             // 1484
                                                                                                                       // 1485
        containsNodeText: function(node) {                                                                             // 1486
            var nodeRange = this.cloneRange();                                                                         // 1487
            nodeRange.selectNode(node);                                                                                // 1488
            var textNodes = nodeRange.getNodes([3]);                                                                   // 1489
            if (textNodes.length > 0) {                                                                                // 1490
                nodeRange.setStart(textNodes[0], 0);                                                                   // 1491
                var lastTextNode = textNodes.pop();                                                                    // 1492
                nodeRange.setEnd(lastTextNode, lastTextNode.length);                                                   // 1493
                var contains = this.containsRange(nodeRange);                                                          // 1494
                nodeRange.detach();                                                                                    // 1495
                return contains;                                                                                       // 1496
            } else {                                                                                                   // 1497
                return this.containsNodeContents(node);                                                                // 1498
            }                                                                                                          // 1499
        },                                                                                                             // 1500
                                                                                                                       // 1501
        createNodeIterator: function(nodeTypes, filter) {                                                              // 1502
            assertRangeValid(this);                                                                                    // 1503
            return new RangeNodeIterator(this, nodeTypes, filter);                                                     // 1504
        },                                                                                                             // 1505
                                                                                                                       // 1506
        getNodes: function(nodeTypes, filter) {                                                                        // 1507
            assertRangeValid(this);                                                                                    // 1508
            return getNodesInRange(this, nodeTypes, filter);                                                           // 1509
        },                                                                                                             // 1510
                                                                                                                       // 1511
        getDocument: function() {                                                                                      // 1512
            return getRangeDocument(this);                                                                             // 1513
        },                                                                                                             // 1514
                                                                                                                       // 1515
        collapseBefore: function(node) {                                                                               // 1516
            assertNotDetached(this);                                                                                   // 1517
                                                                                                                       // 1518
            this.setEndBefore(node);                                                                                   // 1519
            this.collapse(false);                                                                                      // 1520
        },                                                                                                             // 1521
                                                                                                                       // 1522
        collapseAfter: function(node) {                                                                                // 1523
            assertNotDetached(this);                                                                                   // 1524
                                                                                                                       // 1525
            this.setStartAfter(node);                                                                                  // 1526
            this.collapse(true);                                                                                       // 1527
        },                                                                                                             // 1528
                                                                                                                       // 1529
        getName: function() {                                                                                          // 1530
            return "DomRange";                                                                                         // 1531
        },                                                                                                             // 1532
                                                                                                                       // 1533
        equals: function(range) {                                                                                      // 1534
            return Range.rangesEqual(this, range);                                                                     // 1535
        },                                                                                                             // 1536
                                                                                                                       // 1537
        inspect: function() {                                                                                          // 1538
            return inspect(this);                                                                                      // 1539
        }                                                                                                              // 1540
    };                                                                                                                 // 1541
                                                                                                                       // 1542
    function copyComparisonConstantsToObject(obj) {                                                                    // 1543
        obj.START_TO_START = s2s;                                                                                      // 1544
        obj.START_TO_END = s2e;                                                                                        // 1545
        obj.END_TO_END = e2e;                                                                                          // 1546
        obj.END_TO_START = e2s;                                                                                        // 1547
                                                                                                                       // 1548
        obj.NODE_BEFORE = n_b;                                                                                         // 1549
        obj.NODE_AFTER = n_a;                                                                                          // 1550
        obj.NODE_BEFORE_AND_AFTER = n_b_a;                                                                             // 1551
        obj.NODE_INSIDE = n_i;                                                                                         // 1552
    }                                                                                                                  // 1553
                                                                                                                       // 1554
    function copyComparisonConstants(constructor) {                                                                    // 1555
        copyComparisonConstantsToObject(constructor);                                                                  // 1556
        copyComparisonConstantsToObject(constructor.prototype);                                                        // 1557
    }                                                                                                                  // 1558
                                                                                                                       // 1559
    function createRangeContentRemover(remover, boundaryUpdater) {                                                     // 1560
        return function() {                                                                                            // 1561
            assertRangeValid(this);                                                                                    // 1562
                                                                                                                       // 1563
            var sc = this.startContainer, so = this.startOffset, root = this.commonAncestorContainer;                  // 1564
                                                                                                                       // 1565
            var iterator = new RangeIterator(this, true);                                                              // 1566
                                                                                                                       // 1567
            // Work out where to position the range after content removal                                              // 1568
            var node, boundary;                                                                                        // 1569
            if (sc !== root) {                                                                                         // 1570
                node = dom.getClosestAncestorIn(sc, root, true);                                                       // 1571
                boundary = getBoundaryAfterNode(node);                                                                 // 1572
                sc = boundary.node;                                                                                    // 1573
                so = boundary.offset;                                                                                  // 1574
            }                                                                                                          // 1575
                                                                                                                       // 1576
            // Check none of the range is read-only                                                                    // 1577
            iterateSubtree(iterator, assertNodeNotReadOnly);                                                           // 1578
                                                                                                                       // 1579
            iterator.reset();                                                                                          // 1580
                                                                                                                       // 1581
            // Remove the content                                                                                      // 1582
            var returnValue = remover(iterator);                                                                       // 1583
            iterator.detach();                                                                                         // 1584
                                                                                                                       // 1585
            // Move to the new position                                                                                // 1586
            boundaryUpdater(this, sc, so, sc, so);                                                                     // 1587
                                                                                                                       // 1588
            return returnValue;                                                                                        // 1589
        };                                                                                                             // 1590
    }                                                                                                                  // 1591
                                                                                                                       // 1592
    function createPrototypeRange(constructor, boundaryUpdater, detacher) {                                            // 1593
        function createBeforeAfterNodeSetter(isBefore, isStart) {                                                      // 1594
            return function(node) {                                                                                    // 1595
                assertNotDetached(this);                                                                               // 1596
                assertValidNodeType(node, beforeAfterNodeTypes);                                                       // 1597
                assertValidNodeType(getRootContainer(node), rootContainerNodeTypes);                                   // 1598
                                                                                                                       // 1599
                var boundary = (isBefore ? getBoundaryBeforeNode : getBoundaryAfterNode)(node);                        // 1600
                (isStart ? setRangeStart : setRangeEnd)(this, boundary.node, boundary.offset);                         // 1601
            };                                                                                                         // 1602
        }                                                                                                              // 1603
                                                                                                                       // 1604
        function setRangeStart(range, node, offset) {                                                                  // 1605
            var ec = range.endContainer, eo = range.endOffset;                                                         // 1606
            if (node !== range.startContainer || offset !== range.startOffset) {                                       // 1607
                // Check the root containers of the range and the new boundary, and also check whether the new boundary
                // is after the current end. In either case, collapse the range to the new position                    // 1609
                if (getRootContainer(node) != getRootContainer(ec) || dom.comparePoints(node, offset, ec, eo) == 1) {  // 1610
                    ec = node;                                                                                         // 1611
                    eo = offset;                                                                                       // 1612
                }                                                                                                      // 1613
                boundaryUpdater(range, node, offset, ec, eo);                                                          // 1614
            }                                                                                                          // 1615
        }                                                                                                              // 1616
                                                                                                                       // 1617
        function setRangeEnd(range, node, offset) {                                                                    // 1618
            var sc = range.startContainer, so = range.startOffset;                                                     // 1619
            if (node !== range.endContainer || offset !== range.endOffset) {                                           // 1620
                // Check the root containers of the range and the new boundary, and also check whether the new boundary
                // is after the current end. In either case, collapse the range to the new position                    // 1622
                if (getRootContainer(node) != getRootContainer(sc) || dom.comparePoints(node, offset, sc, so) == -1) { // 1623
                    sc = node;                                                                                         // 1624
                    so = offset;                                                                                       // 1625
                }                                                                                                      // 1626
                boundaryUpdater(range, sc, so, node, offset);                                                          // 1627
            }                                                                                                          // 1628
        }                                                                                                              // 1629
                                                                                                                       // 1630
        function setRangeStartAndEnd(range, node, offset) {                                                            // 1631
            if (node !== range.startContainer || offset !== range.startOffset || node !== range.endContainer || offset !== range.endOffset) {
                boundaryUpdater(range, node, offset, node, offset);                                                    // 1633
            }                                                                                                          // 1634
        }                                                                                                              // 1635
                                                                                                                       // 1636
        constructor.prototype = new RangePrototype();                                                                  // 1637
                                                                                                                       // 1638
        api.util.extend(constructor.prototype, {                                                                       // 1639
            setStart: function(node, offset) {                                                                         // 1640
                assertNotDetached(this);                                                                               // 1641
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1642
                assertValidOffset(node, offset);                                                                       // 1643
                                                                                                                       // 1644
                setRangeStart(this, node, offset);                                                                     // 1645
            },                                                                                                         // 1646
                                                                                                                       // 1647
            setEnd: function(node, offset) {                                                                           // 1648
                assertNotDetached(this);                                                                               // 1649
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1650
                assertValidOffset(node, offset);                                                                       // 1651
                                                                                                                       // 1652
                setRangeEnd(this, node, offset);                                                                       // 1653
            },                                                                                                         // 1654
                                                                                                                       // 1655
            setStartBefore: createBeforeAfterNodeSetter(true, true),                                                   // 1656
            setStartAfter: createBeforeAfterNodeSetter(false, true),                                                   // 1657
            setEndBefore: createBeforeAfterNodeSetter(true, false),                                                    // 1658
            setEndAfter: createBeforeAfterNodeSetter(false, false),                                                    // 1659
                                                                                                                       // 1660
            collapse: function(isStart) {                                                                              // 1661
                assertRangeValid(this);                                                                                // 1662
                if (isStart) {                                                                                         // 1663
                    boundaryUpdater(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset);
                } else {                                                                                               // 1665
                    boundaryUpdater(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset);       // 1666
                }                                                                                                      // 1667
            },                                                                                                         // 1668
                                                                                                                       // 1669
            selectNodeContents: function(node) {                                                                       // 1670
                // This doesn't seem well specified: the spec talks only about selecting the node's contents, which    // 1671
                // could be taken to mean only its children. However, browsers implement this the same as selectNode for
                // text nodes, so I shall do likewise                                                                  // 1673
                assertNotDetached(this);                                                                               // 1674
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1675
                                                                                                                       // 1676
                boundaryUpdater(this, node, 0, node, dom.getNodeLength(node));                                         // 1677
            },                                                                                                         // 1678
                                                                                                                       // 1679
            selectNode: function(node) {                                                                               // 1680
                assertNotDetached(this);                                                                               // 1681
                assertNoDocTypeNotationEntityAncestor(node, false);                                                    // 1682
                assertValidNodeType(node, beforeAfterNodeTypes);                                                       // 1683
                                                                                                                       // 1684
                var start = getBoundaryBeforeNode(node), end = getBoundaryAfterNode(node);                             // 1685
                boundaryUpdater(this, start.node, start.offset, end.node, end.offset);                                 // 1686
            },                                                                                                         // 1687
                                                                                                                       // 1688
            extractContents: createRangeContentRemover(extractSubtree, boundaryUpdater),                               // 1689
                                                                                                                       // 1690
            deleteContents: createRangeContentRemover(deleteSubtree, boundaryUpdater),                                 // 1691
                                                                                                                       // 1692
            canSurroundContents: function() {                                                                          // 1693
                assertRangeValid(this);                                                                                // 1694
                assertNodeNotReadOnly(this.startContainer);                                                            // 1695
                assertNodeNotReadOnly(this.endContainer);                                                              // 1696
                                                                                                                       // 1697
                // Check if the contents can be surrounded. Specifically, this means whether the range partially selects
                // no non-text nodes.                                                                                  // 1699
                var iterator = new RangeIterator(this, true);                                                          // 1700
                var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||     // 1701
                        (iterator._last && isNonTextPartiallySelected(iterator._last, this)));                         // 1702
                iterator.detach();                                                                                     // 1703
                return !boundariesInvalid;                                                                             // 1704
            },                                                                                                         // 1705
                                                                                                                       // 1706
            detach: function() {                                                                                       // 1707
                detacher(this);                                                                                        // 1708
            },                                                                                                         // 1709
                                                                                                                       // 1710
            splitBoundaries: function() {                                                                              // 1711
                assertRangeValid(this);                                                                                // 1712
                                                                                                                       // 1713
                                                                                                                       // 1714
                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;      // 1715
                var startEndSame = (sc === ec);                                                                        // 1716
                                                                                                                       // 1717
                if (dom.isCharacterDataNode(ec) && eo > 0 && eo < ec.length) {                                         // 1718
                    dom.splitDataNode(ec, eo);                                                                         // 1719
                                                                                                                       // 1720
                }                                                                                                      // 1721
                                                                                                                       // 1722
                if (dom.isCharacterDataNode(sc) && so > 0 && so < sc.length) {                                         // 1723
                                                                                                                       // 1724
                    sc = dom.splitDataNode(sc, so);                                                                    // 1725
                    if (startEndSame) {                                                                                // 1726
                        eo -= so;                                                                                      // 1727
                        ec = sc;                                                                                       // 1728
                    } else if (ec == sc.parentNode && eo >= dom.getNodeIndex(sc)) {                                    // 1729
                        eo++;                                                                                          // 1730
                    }                                                                                                  // 1731
                    so = 0;                                                                                            // 1732
                                                                                                                       // 1733
                }                                                                                                      // 1734
                boundaryUpdater(this, sc, so, ec, eo);                                                                 // 1735
            },                                                                                                         // 1736
                                                                                                                       // 1737
            normalizeBoundaries: function() {                                                                          // 1738
                assertRangeValid(this);                                                                                // 1739
                                                                                                                       // 1740
                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;      // 1741
                                                                                                                       // 1742
                var mergeForward = function(node) {                                                                    // 1743
                    var sibling = node.nextSibling;                                                                    // 1744
                    if (sibling && sibling.nodeType == node.nodeType) {                                                // 1745
                        ec = node;                                                                                     // 1746
                        eo = node.length;                                                                              // 1747
                        node.appendData(sibling.data);                                                                 // 1748
                        sibling.parentNode.removeChild(sibling);                                                       // 1749
                    }                                                                                                  // 1750
                };                                                                                                     // 1751
                                                                                                                       // 1752
                var mergeBackward = function(node) {                                                                   // 1753
                    var sibling = node.previousSibling;                                                                // 1754
                    if (sibling && sibling.nodeType == node.nodeType) {                                                // 1755
                        sc = node;                                                                                     // 1756
                        var nodeLength = node.length;                                                                  // 1757
                        so = sibling.length;                                                                           // 1758
                        node.insertData(0, sibling.data);                                                              // 1759
                        sibling.parentNode.removeChild(sibling);                                                       // 1760
                        if (sc == ec) {                                                                                // 1761
                            eo += so;                                                                                  // 1762
                            ec = sc;                                                                                   // 1763
                        } else if (ec == node.parentNode) {                                                            // 1764
                            var nodeIndex = dom.getNodeIndex(node);                                                    // 1765
                            if (eo == nodeIndex) {                                                                     // 1766
                                ec = node;                                                                             // 1767
                                eo = nodeLength;                                                                       // 1768
                            } else if (eo > nodeIndex) {                                                               // 1769
                                eo--;                                                                                  // 1770
                            }                                                                                          // 1771
                        }                                                                                              // 1772
                    }                                                                                                  // 1773
                };                                                                                                     // 1774
                                                                                                                       // 1775
                var normalizeStart = true;                                                                             // 1776
                                                                                                                       // 1777
                if (dom.isCharacterDataNode(ec)) {                                                                     // 1778
                    if (ec.length == eo) {                                                                             // 1779
                        mergeForward(ec);                                                                              // 1780
                    }                                                                                                  // 1781
                } else {                                                                                               // 1782
                    if (eo > 0) {                                                                                      // 1783
                        var endNode = ec.childNodes[eo - 1];                                                           // 1784
                        if (endNode && dom.isCharacterDataNode(endNode)) {                                             // 1785
                            mergeForward(endNode);                                                                     // 1786
                        }                                                                                              // 1787
                    }                                                                                                  // 1788
                    normalizeStart = !this.collapsed;                                                                  // 1789
                }                                                                                                      // 1790
                                                                                                                       // 1791
                if (normalizeStart) {                                                                                  // 1792
                    if (dom.isCharacterDataNode(sc)) {                                                                 // 1793
                        if (so == 0) {                                                                                 // 1794
                            mergeBackward(sc);                                                                         // 1795
                        }                                                                                              // 1796
                    } else {                                                                                           // 1797
                        if (so < sc.childNodes.length) {                                                               // 1798
                            var startNode = sc.childNodes[so];                                                         // 1799
                            if (startNode && dom.isCharacterDataNode(startNode)) {                                     // 1800
                                mergeBackward(startNode);                                                              // 1801
                            }                                                                                          // 1802
                        }                                                                                              // 1803
                    }                                                                                                  // 1804
                } else {                                                                                               // 1805
                    sc = ec;                                                                                           // 1806
                    so = eo;                                                                                           // 1807
                }                                                                                                      // 1808
                                                                                                                       // 1809
                boundaryUpdater(this, sc, so, ec, eo);                                                                 // 1810
            },                                                                                                         // 1811
                                                                                                                       // 1812
            collapseToPoint: function(node, offset) {                                                                  // 1813
                assertNotDetached(this);                                                                               // 1814
                                                                                                                       // 1815
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1816
                assertValidOffset(node, offset);                                                                       // 1817
                                                                                                                       // 1818
                setRangeStartAndEnd(this, node, offset);                                                               // 1819
            }                                                                                                          // 1820
        });                                                                                                            // 1821
                                                                                                                       // 1822
        copyComparisonConstants(constructor);                                                                          // 1823
    }                                                                                                                  // 1824
                                                                                                                       // 1825
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1827
    // Updates commonAncestorContainer and collapsed after boundary change                                             // 1828
    function updateCollapsedAndCommonAncestor(range) {                                                                 // 1829
        range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);      // 1830
        range.commonAncestorContainer = range.collapsed ?                                                              // 1831
            range.startContainer : dom.getCommonAncestor(range.startContainer, range.endContainer);                    // 1832
    }                                                                                                                  // 1833
                                                                                                                       // 1834
    function updateBoundaries(range, startContainer, startOffset, endContainer, endOffset) {                           // 1835
        var startMoved = (range.startContainer !== startContainer || range.startOffset !== startOffset);               // 1836
        var endMoved = (range.endContainer !== endContainer || range.endOffset !== endOffset);                         // 1837
                                                                                                                       // 1838
        range.startContainer = startContainer;                                                                         // 1839
        range.startOffset = startOffset;                                                                               // 1840
        range.endContainer = endContainer;                                                                             // 1841
        range.endOffset = endOffset;                                                                                   // 1842
                                                                                                                       // 1843
        updateCollapsedAndCommonAncestor(range);                                                                       // 1844
        dispatchEvent(range, "boundarychange", {startMoved: startMoved, endMoved: endMoved});                          // 1845
    }                                                                                                                  // 1846
                                                                                                                       // 1847
    function detach(range) {                                                                                           // 1848
        assertNotDetached(range);                                                                                      // 1849
        range.startContainer = range.startOffset = range.endContainer = range.endOffset = null;                        // 1850
        range.collapsed = range.commonAncestorContainer = null;                                                        // 1851
        dispatchEvent(range, "detach", null);                                                                          // 1852
        range._listeners = null;                                                                                       // 1853
    }                                                                                                                  // 1854
                                                                                                                       // 1855
    /**                                                                                                                // 1856
     * @constructor                                                                                                    // 1857
     */                                                                                                                // 1858
    function Range(doc) {                                                                                              // 1859
        this.startContainer = doc;                                                                                     // 1860
        this.startOffset = 0;                                                                                          // 1861
        this.endContainer = doc;                                                                                       // 1862
        this.endOffset = 0;                                                                                            // 1863
        this._listeners = {                                                                                            // 1864
            boundarychange: [],                                                                                        // 1865
            detach: []                                                                                                 // 1866
        };                                                                                                             // 1867
        updateCollapsedAndCommonAncestor(this);                                                                        // 1868
    }                                                                                                                  // 1869
                                                                                                                       // 1870
    createPrototypeRange(Range, updateBoundaries, detach);                                                             // 1871
                                                                                                                       // 1872
    api.rangePrototype = RangePrototype.prototype;                                                                     // 1873
                                                                                                                       // 1874
    Range.rangeProperties = rangeProperties;                                                                           // 1875
    Range.RangeIterator = RangeIterator;                                                                               // 1876
    Range.copyComparisonConstants = copyComparisonConstants;                                                           // 1877
    Range.createPrototypeRange = createPrototypeRange;                                                                 // 1878
    Range.inspect = inspect;                                                                                           // 1879
    Range.getRangeDocument = getRangeDocument;                                                                         // 1880
    Range.rangesEqual = function(r1, r2) {                                                                             // 1881
        return r1.startContainer === r2.startContainer &&                                                              // 1882
               r1.startOffset === r2.startOffset &&                                                                    // 1883
               r1.endContainer === r2.endContainer &&                                                                  // 1884
               r1.endOffset === r2.endOffset;                                                                          // 1885
    };                                                                                                                 // 1886
                                                                                                                       // 1887
    api.DomRange = Range;                                                                                              // 1888
    api.RangeException = RangeException;                                                                               // 1889
});rangy.createModule("WrappedRange", function(api, module) {                                                          // 1890
    api.requireModules( ["DomUtil", "DomRange"] );                                                                     // 1891
                                                                                                                       // 1892
    /**                                                                                                                // 1893
     * @constructor                                                                                                    // 1894
     */                                                                                                                // 1895
    var WrappedRange;                                                                                                  // 1896
    var dom = api.dom;                                                                                                 // 1897
    var DomPosition = dom.DomPosition;                                                                                 // 1898
    var DomRange = api.DomRange;                                                                                       // 1899
                                                                                                                       // 1900
                                                                                                                       // 1901
                                                                                                                       // 1902
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1904
    /*                                                                                                                 // 1905
    This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()   // 1906
    method. For example, in the following (where pipes denote the selection boundaries):                               // 1907
                                                                                                                       // 1908
    <ul id="ul"><li id="a">| a </li><li id="b"> b |</li></ul>                                                          // 1909
                                                                                                                       // 1910
    var range = document.selection.createRange();                                                                      // 1911
    alert(range.parentElement().id); // Should alert "ul" but alerts "b"                                               // 1912
                                                                                                                       // 1913
    This method returns the common ancestor node of the following:                                                     // 1914
    - the parentElement() of the textRange                                                                             // 1915
    - the parentElement() of the textRange after calling collapse(true)                                                // 1916
    - the parentElement() of the textRange after calling collapse(false)                                               // 1917
     */                                                                                                                // 1918
    function getTextRangeContainerElement(textRange) {                                                                 // 1919
        var parentEl = textRange.parentElement();                                                                      // 1920
                                                                                                                       // 1921
        var range = textRange.duplicate();                                                                             // 1922
        range.collapse(true);                                                                                          // 1923
        var startEl = range.parentElement();                                                                           // 1924
        range = textRange.duplicate();                                                                                 // 1925
        range.collapse(false);                                                                                         // 1926
        var endEl = range.parentElement();                                                                             // 1927
        var startEndContainer = (startEl == endEl) ? startEl : dom.getCommonAncestor(startEl, endEl);                  // 1928
                                                                                                                       // 1929
        return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer); // 1930
    }                                                                                                                  // 1931
                                                                                                                       // 1932
    function textRangeIsCollapsed(textRange) {                                                                         // 1933
        return textRange.compareEndPoints("StartToEnd", textRange) == 0;                                               // 1934
    }                                                                                                                  // 1935
                                                                                                                       // 1936
    // Gets the boundary of a TextRange expressed as a node and an offset within that node. This function started out as
    // an improved version of code found in Tim Cameron Ryan's IERange (http://code.google.com/p/ierange/) but has     // 1938
    // grown, fixing problems with line breaks in preformatted text, adding workaround for IE TextRange bugs, handling // 1939
    // for inputs and images, plus optimizations.                                                                      // 1940
    function getTextRangeBoundaryPosition(textRange, wholeRangeContainerElement, isStart, isCollapsed) {               // 1941
        var workingRange = textRange.duplicate();                                                                      // 1942
                                                                                                                       // 1943
        workingRange.collapse(isStart);                                                                                // 1944
        var containerElement = workingRange.parentElement();                                                           // 1945
                                                                                                                       // 1946
        // Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so  // 1947
        // check for that                                                                                              // 1948
        // TODO: Find out when. Workaround for wholeRangeContainerElement may break this                               // 1949
        if (!dom.isAncestorOf(wholeRangeContainerElement, containerElement, true)) {                                   // 1950
            containerElement = wholeRangeContainerElement;                                                             // 1951
                                                                                                                       // 1952
        }                                                                                                              // 1953
                                                                                                                       // 1954
                                                                                                                       // 1955
                                                                                                                       // 1956
        // Deal with nodes that cannot "contain rich HTML markup". In practice, this means form inputs, images and     // 1957
        // similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx                               // 1958
        if (!containerElement.canHaveHTML) {                                                                           // 1959
            return new DomPosition(containerElement.parentNode, dom.getNodeIndex(containerElement));                   // 1960
        }                                                                                                              // 1961
                                                                                                                       // 1962
        var workingNode = dom.getDocument(containerElement).createElement("span");                                     // 1963
        var comparison, workingComparisonType = isStart ? "StartToStart" : "StartToEnd";                               // 1964
        var previousNode, nextNode, boundaryPosition, boundaryNode;                                                    // 1965
                                                                                                                       // 1966
        // Move the working range through the container's children, starting at the end and working backwards, until the
        // working range reaches or goes past the boundary we're interested in                                         // 1968
        do {                                                                                                           // 1969
            containerElement.insertBefore(workingNode, workingNode.previousSibling);                                   // 1970
            workingRange.moveToElementText(workingNode);                                                               // 1971
        } while ( (comparison = workingRange.compareEndPoints(workingComparisonType, textRange)) > 0 &&                // 1972
                workingNode.previousSibling);                                                                          // 1973
                                                                                                                       // 1974
        // We've now reached or gone past the boundary of the text range we're interested in                           // 1975
        // so have identified the node we want                                                                         // 1976
        boundaryNode = workingNode.nextSibling;                                                                        // 1977
                                                                                                                       // 1978
        if (comparison == -1 && boundaryNode && dom.isCharacterDataNode(boundaryNode)) {                               // 1979
            // This is a character data node (text, comment, cdata). The working range is collapsed at the start of the
            // node containing the text range's boundary, so we move the end of the working range to the boundary point
            // and measure the length of its text to get the boundary's offset within the node.                        // 1982
            workingRange.setEndPoint(isStart ? "EndToStart" : "EndToEnd", textRange);                                  // 1983
                                                                                                                       // 1984
                                                                                                                       // 1985
            var offset;                                                                                                // 1986
                                                                                                                       // 1987
            if (/[\r\n]/.test(boundaryNode.data)) {                                                                    // 1988
                /*                                                                                                     // 1989
                For the particular case of a boundary within a text node containing line breaks (within a <pre> element,
                for example), we need a slightly complicated approach to get the boundary's offset in IE. The facts:   // 1991
                                                                                                                       // 1992
                - Each line break is represented as \r in the text node's data/nodeValue properties                    // 1993
                - Each line break is represented as \r\n in the TextRange's 'text' property                            // 1994
                - The 'text' property of the TextRange does not contain trailing line breaks                           // 1995
                                                                                                                       // 1996
                To get round the problem presented by the final fact above, we can use the fact that TextRange's       // 1997
                moveStart() and moveEnd() methods return the actual number of characters moved, which is not necessarily
                the same as the number of characters it was instructed to move. The simplest approach is to use this to
                store the characters moved when moving both the start and end of the range to the start of the document
                body and subtracting the start offset from the end offset (the "move-negative-gazillion" method).      // 2001
                However, this is extremely slow when the document is large and the range is near the end of it. Clearly
                doing the mirror image (i.e. moving the range boundaries to the end of the document) has the same      // 2003
                problem.                                                                                               // 2004
                                                                                                                       // 2005
                Another approach that works is to use moveStart() to move the start boundary of the range up to the end
                boundary one character at a time and incrementing a counter with the value returned by the moveStart() // 2007
                call. However, the check for whether the start boundary has reached the end boundary is expensive, so  // 2008
                this method is slow (although unlike "move-negative-gazillion" is largely unaffected by the location of
                the range within the document).                                                                        // 2010
                                                                                                                       // 2011
                The method below is a hybrid of the two methods above. It uses the fact that a string containing the   // 2012
                TextRange's 'text' property with each \r\n converted to a single \r character cannot be longer than the
                text of the TextRange, so the start of the range is moved that length initially and then a character at
                a time to make up for any trailing line breaks not contained in the 'text' property. This has good     // 2015
                performance in most situations compared to the previous two methods.                                   // 2016
                */                                                                                                     // 2017
                var tempRange = workingRange.duplicate();                                                              // 2018
                var rangeLength = tempRange.text.replace(/\r\n/g, "\r").length;                                        // 2019
                                                                                                                       // 2020
                offset = tempRange.moveStart("character", rangeLength);                                                // 2021
                while ( (comparison = tempRange.compareEndPoints("StartToEnd", tempRange)) == -1) {                    // 2022
                    offset++;                                                                                          // 2023
                    tempRange.moveStart("character", 1);                                                               // 2024
                }                                                                                                      // 2025
            } else {                                                                                                   // 2026
                offset = workingRange.text.length;                                                                     // 2027
            }                                                                                                          // 2028
            boundaryPosition = new DomPosition(boundaryNode, offset);                                                  // 2029
        } else {                                                                                                       // 2030
                                                                                                                       // 2031
                                                                                                                       // 2032
            // If the boundary immediately follows a character data node and this is the end boundary, we should favour
            // a position within that, and likewise for a start boundary preceding a character data node               // 2034
            previousNode = (isCollapsed || !isStart) && workingNode.previousSibling;                                   // 2035
            nextNode = (isCollapsed || isStart) && workingNode.nextSibling;                                            // 2036
                                                                                                                       // 2037
                                                                                                                       // 2038
                                                                                                                       // 2039
            if (nextNode && dom.isCharacterDataNode(nextNode)) {                                                       // 2040
                boundaryPosition = new DomPosition(nextNode, 0);                                                       // 2041
            } else if (previousNode && dom.isCharacterDataNode(previousNode)) {                                        // 2042
                boundaryPosition = new DomPosition(previousNode, previousNode.length);                                 // 2043
            } else {                                                                                                   // 2044
                boundaryPosition = new DomPosition(containerElement, dom.getNodeIndex(workingNode));                   // 2045
            }                                                                                                          // 2046
        }                                                                                                              // 2047
                                                                                                                       // 2048
        // Clean up                                                                                                    // 2049
        workingNode.parentNode.removeChild(workingNode);                                                               // 2050
                                                                                                                       // 2051
        return boundaryPosition;                                                                                       // 2052
    }                                                                                                                  // 2053
                                                                                                                       // 2054
    // Returns a TextRange representing the boundary of a TextRange expressed as a node and an offset within that node.
    // This function started out as an optimized version of code found in Tim Cameron Ryan's IERange                   // 2056
    // (http://code.google.com/p/ierange/)                                                                             // 2057
    function createBoundaryTextRange(boundaryPosition, isStart) {                                                      // 2058
        var boundaryNode, boundaryParent, boundaryOffset = boundaryPosition.offset;                                    // 2059
        var doc = dom.getDocument(boundaryPosition.node);                                                              // 2060
        var workingNode, childNodes, workingRange = doc.body.createTextRange();                                        // 2061
        var nodeIsDataNode = dom.isCharacterDataNode(boundaryPosition.node);                                           // 2062
                                                                                                                       // 2063
        if (nodeIsDataNode) {                                                                                          // 2064
            boundaryNode = boundaryPosition.node;                                                                      // 2065
            boundaryParent = boundaryNode.parentNode;                                                                  // 2066
        } else {                                                                                                       // 2067
            childNodes = boundaryPosition.node.childNodes;                                                             // 2068
            boundaryNode = (boundaryOffset < childNodes.length) ? childNodes[boundaryOffset] : null;                   // 2069
            boundaryParent = boundaryPosition.node;                                                                    // 2070
        }                                                                                                              // 2071
                                                                                                                       // 2072
        // Position the range immediately before the node containing the boundary                                      // 2073
        workingNode = doc.createElement("span");                                                                       // 2074
                                                                                                                       // 2075
        // Making the working element non-empty element persuades IE to consider the TextRange boundary to be within the
        // element rather than immediately before or after it, which is what we want                                   // 2077
        workingNode.innerHTML = "&#feff;";                                                                             // 2078
                                                                                                                       // 2079
        // insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report    // 2080
        // for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12    // 2081
        if (boundaryNode) {                                                                                            // 2082
            boundaryParent.insertBefore(workingNode, boundaryNode);                                                    // 2083
        } else {                                                                                                       // 2084
            boundaryParent.appendChild(workingNode);                                                                   // 2085
        }                                                                                                              // 2086
                                                                                                                       // 2087
        workingRange.moveToElementText(workingNode);                                                                   // 2088
        workingRange.collapse(!isStart);                                                                               // 2089
                                                                                                                       // 2090
        // Clean up                                                                                                    // 2091
        boundaryParent.removeChild(workingNode);                                                                       // 2092
                                                                                                                       // 2093
        // Move the working range to the text offset, if required                                                      // 2094
        if (nodeIsDataNode) {                                                                                          // 2095
            workingRange[isStart ? "moveStart" : "moveEnd"]("character", boundaryOffset);                              // 2096
        }                                                                                                              // 2097
                                                                                                                       // 2098
        return workingRange;                                                                                           // 2099
    }                                                                                                                  // 2100
                                                                                                                       // 2101
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2103
    if (api.features.implementsDomRange && (!api.features.implementsTextRange || !api.config.preferTextRange)) {       // 2104
        // This is a wrapper around the browser's native DOM Range. It has two aims:                                   // 2105
        // - Provide workarounds for specific browser bugs                                                             // 2106
        // - provide convenient extensions, which are inherited from Rangy's DomRange                                  // 2107
                                                                                                                       // 2108
        (function() {                                                                                                  // 2109
            var rangeProto;                                                                                            // 2110
            var rangeProperties = DomRange.rangeProperties;                                                            // 2111
            var canSetRangeStartAfterEnd;                                                                              // 2112
                                                                                                                       // 2113
            function updateRangeProperties(range) {                                                                    // 2114
                var i = rangeProperties.length, prop;                                                                  // 2115
                while (i--) {                                                                                          // 2116
                    prop = rangeProperties[i];                                                                         // 2117
                    range[prop] = range.nativeRange[prop];                                                             // 2118
                }                                                                                                      // 2119
            }                                                                                                          // 2120
                                                                                                                       // 2121
            function updateNativeRange(range, startContainer, startOffset, endContainer,endOffset) {                   // 2122
                var startMoved = (range.startContainer !== startContainer || range.startOffset != startOffset);        // 2123
                var endMoved = (range.endContainer !== endContainer || range.endOffset != endOffset);                  // 2124
                                                                                                                       // 2125
                // Always set both boundaries for the benefit of IE9 (see issue 35)                                    // 2126
                if (startMoved || endMoved) {                                                                          // 2127
                    range.setEnd(endContainer, endOffset);                                                             // 2128
                    range.setStart(startContainer, startOffset);                                                       // 2129
                }                                                                                                      // 2130
            }                                                                                                          // 2131
                                                                                                                       // 2132
            function detach(range) {                                                                                   // 2133
                range.nativeRange.detach();                                                                            // 2134
                range.detached = true;                                                                                 // 2135
                var i = rangeProperties.length, prop;                                                                  // 2136
                while (i--) {                                                                                          // 2137
                    prop = rangeProperties[i];                                                                         // 2138
                    range[prop] = null;                                                                                // 2139
                }                                                                                                      // 2140
            }                                                                                                          // 2141
                                                                                                                       // 2142
            var createBeforeAfterNodeSetter;                                                                           // 2143
                                                                                                                       // 2144
            WrappedRange = function(range) {                                                                           // 2145
                if (!range) {                                                                                          // 2146
                    throw new Error("Range must be specified");                                                        // 2147
                }                                                                                                      // 2148
                this.nativeRange = range;                                                                              // 2149
                updateRangeProperties(this);                                                                           // 2150
            };                                                                                                         // 2151
                                                                                                                       // 2152
            DomRange.createPrototypeRange(WrappedRange, updateNativeRange, detach);                                    // 2153
                                                                                                                       // 2154
            rangeProto = WrappedRange.prototype;                                                                       // 2155
                                                                                                                       // 2156
            rangeProto.selectNode = function(node) {                                                                   // 2157
                this.nativeRange.selectNode(node);                                                                     // 2158
                updateRangeProperties(this);                                                                           // 2159
            };                                                                                                         // 2160
                                                                                                                       // 2161
            rangeProto.deleteContents = function() {                                                                   // 2162
                this.nativeRange.deleteContents();                                                                     // 2163
                updateRangeProperties(this);                                                                           // 2164
            };                                                                                                         // 2165
                                                                                                                       // 2166
            rangeProto.extractContents = function() {                                                                  // 2167
                var frag = this.nativeRange.extractContents();                                                         // 2168
                updateRangeProperties(this);                                                                           // 2169
                return frag;                                                                                           // 2170
            };                                                                                                         // 2171
                                                                                                                       // 2172
            rangeProto.cloneContents = function() {                                                                    // 2173
                return this.nativeRange.cloneContents();                                                               // 2174
            };                                                                                                         // 2175
                                                                                                                       // 2176
            // TODO: Until I can find a way to programmatically trigger the Firefox bug (apparently long-standing, still
            // present in 3.6.8) that throws "Index or size is negative or greater than the allowed amount" for        // 2178
            // insertNode in some circumstances, all browsers will have to use the Rangy's own implementation of       // 2179
            // insertNode, which works but is almost certainly slower than the native implementation.                  // 2180
/*                                                                                                                     // 2181
            rangeProto.insertNode = function(node) {                                                                   // 2182
                this.nativeRange.insertNode(node);                                                                     // 2183
                updateRangeProperties(this);                                                                           // 2184
            };                                                                                                         // 2185
*/                                                                                                                     // 2186
                                                                                                                       // 2187
            rangeProto.surroundContents = function(node) {                                                             // 2188
                this.nativeRange.surroundContents(node);                                                               // 2189
                updateRangeProperties(this);                                                                           // 2190
            };                                                                                                         // 2191
                                                                                                                       // 2192
            rangeProto.collapse = function(isStart) {                                                                  // 2193
                this.nativeRange.collapse(isStart);                                                                    // 2194
                updateRangeProperties(this);                                                                           // 2195
            };                                                                                                         // 2196
                                                                                                                       // 2197
            rangeProto.cloneRange = function() {                                                                       // 2198
                return new WrappedRange(this.nativeRange.cloneRange());                                                // 2199
            };                                                                                                         // 2200
                                                                                                                       // 2201
            rangeProto.refresh = function() {                                                                          // 2202
                updateRangeProperties(this);                                                                           // 2203
            };                                                                                                         // 2204
                                                                                                                       // 2205
            rangeProto.toString = function() {                                                                         // 2206
                return this.nativeRange.toString();                                                                    // 2207
            };                                                                                                         // 2208
                                                                                                                       // 2209
            // Create test range and node for feature detection                                                        // 2210
                                                                                                                       // 2211
            var testTextNode = document.createTextNode("test");                                                        // 2212
            dom.getBody(document).appendChild(testTextNode);                                                           // 2213
            var range = document.createRange();                                                                        // 2214
                                                                                                                       // 2215
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2217
            // Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and   // 2218
            // correct for it                                                                                          // 2219
                                                                                                                       // 2220
            range.setStart(testTextNode, 0);                                                                           // 2221
            range.setEnd(testTextNode, 0);                                                                             // 2222
                                                                                                                       // 2223
            try {                                                                                                      // 2224
                range.setStart(testTextNode, 1);                                                                       // 2225
                canSetRangeStartAfterEnd = true;                                                                       // 2226
                                                                                                                       // 2227
                rangeProto.setStart = function(node, offset) {                                                         // 2228
                    this.nativeRange.setStart(node, offset);                                                           // 2229
                    updateRangeProperties(this);                                                                       // 2230
                };                                                                                                     // 2231
                                                                                                                       // 2232
                rangeProto.setEnd = function(node, offset) {                                                           // 2233
                    this.nativeRange.setEnd(node, offset);                                                             // 2234
                    updateRangeProperties(this);                                                                       // 2235
                };                                                                                                     // 2236
                                                                                                                       // 2237
                createBeforeAfterNodeSetter = function(name) {                                                         // 2238
                    return function(node) {                                                                            // 2239
                        this.nativeRange[name](node);                                                                  // 2240
                        updateRangeProperties(this);                                                                   // 2241
                    };                                                                                                 // 2242
                };                                                                                                     // 2243
                                                                                                                       // 2244
            } catch(ex) {                                                                                              // 2245
                                                                                                                       // 2246
                                                                                                                       // 2247
                canSetRangeStartAfterEnd = false;                                                                      // 2248
                                                                                                                       // 2249
                rangeProto.setStart = function(node, offset) {                                                         // 2250
                    try {                                                                                              // 2251
                        this.nativeRange.setStart(node, offset);                                                       // 2252
                    } catch (ex) {                                                                                     // 2253
                        this.nativeRange.setEnd(node, offset);                                                         // 2254
                        this.nativeRange.setStart(node, offset);                                                       // 2255
                    }                                                                                                  // 2256
                    updateRangeProperties(this);                                                                       // 2257
                };                                                                                                     // 2258
                                                                                                                       // 2259
                rangeProto.setEnd = function(node, offset) {                                                           // 2260
                    try {                                                                                              // 2261
                        this.nativeRange.setEnd(node, offset);                                                         // 2262
                    } catch (ex) {                                                                                     // 2263
                        this.nativeRange.setStart(node, offset);                                                       // 2264
                        this.nativeRange.setEnd(node, offset);                                                         // 2265
                    }                                                                                                  // 2266
                    updateRangeProperties(this);                                                                       // 2267
                };                                                                                                     // 2268
                                                                                                                       // 2269
                createBeforeAfterNodeSetter = function(name, oppositeName) {                                           // 2270
                    return function(node) {                                                                            // 2271
                        try {                                                                                          // 2272
                            this.nativeRange[name](node);                                                              // 2273
                        } catch (ex) {                                                                                 // 2274
                            this.nativeRange[oppositeName](node);                                                      // 2275
                            this.nativeRange[name](node);                                                              // 2276
                        }                                                                                              // 2277
                        updateRangeProperties(this);                                                                   // 2278
                    };                                                                                                 // 2279
                };                                                                                                     // 2280
            }                                                                                                          // 2281
                                                                                                                       // 2282
            rangeProto.setStartBefore = createBeforeAfterNodeSetter("setStartBefore", "setEndBefore");                 // 2283
            rangeProto.setStartAfter = createBeforeAfterNodeSetter("setStartAfter", "setEndAfter");                    // 2284
            rangeProto.setEndBefore = createBeforeAfterNodeSetter("setEndBefore", "setStartBefore");                   // 2285
            rangeProto.setEndAfter = createBeforeAfterNodeSetter("setEndAfter", "setStartAfter");                      // 2286
                                                                                                                       // 2287
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2289
            // Test for and correct Firefox 2 behaviour with selectNodeContents on text nodes: it collapses the range to
            // the 0th character of the text node                                                                      // 2291
            range.selectNodeContents(testTextNode);                                                                    // 2292
            if (range.startContainer == testTextNode && range.endContainer == testTextNode &&                          // 2293
                    range.startOffset == 0 && range.endOffset == testTextNode.length) {                                // 2294
                rangeProto.selectNodeContents = function(node) {                                                       // 2295
                    this.nativeRange.selectNodeContents(node);                                                         // 2296
                    updateRangeProperties(this);                                                                       // 2297
                };                                                                                                     // 2298
            } else {                                                                                                   // 2299
                rangeProto.selectNodeContents = function(node) {                                                       // 2300
                    this.setStart(node, 0);                                                                            // 2301
                    this.setEnd(node, DomRange.getEndOffset(node));                                                    // 2302
                };                                                                                                     // 2303
            }                                                                                                          // 2304
                                                                                                                       // 2305
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2307
            // Test for WebKit bug that has the beahviour of compareBoundaryPoints round the wrong way for constants   // 2308
            // START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738                            // 2309
                                                                                                                       // 2310
            range.selectNodeContents(testTextNode);                                                                    // 2311
            range.setEnd(testTextNode, 3);                                                                             // 2312
                                                                                                                       // 2313
            var range2 = document.createRange();                                                                       // 2314
            range2.selectNodeContents(testTextNode);                                                                   // 2315
            range2.setEnd(testTextNode, 4);                                                                            // 2316
            range2.setStart(testTextNode, 2);                                                                          // 2317
                                                                                                                       // 2318
            if (range.compareBoundaryPoints(range.START_TO_END, range2) == -1 &                                        // 2319
                    range.compareBoundaryPoints(range.END_TO_START, range2) == 1) {                                    // 2320
                // This is the wrong way round, so correct for it                                                      // 2321
                                                                                                                       // 2322
                                                                                                                       // 2323
                rangeProto.compareBoundaryPoints = function(type, range) {                                             // 2324
                    range = range.nativeRange || range;                                                                // 2325
                    if (type == range.START_TO_END) {                                                                  // 2326
                        type = range.END_TO_START;                                                                     // 2327
                    } else if (type == range.END_TO_START) {                                                           // 2328
                        type = range.START_TO_END;                                                                     // 2329
                    }                                                                                                  // 2330
                    return this.nativeRange.compareBoundaryPoints(type, range);                                        // 2331
                };                                                                                                     // 2332
            } else {                                                                                                   // 2333
                rangeProto.compareBoundaryPoints = function(type, range) {                                             // 2334
                    return this.nativeRange.compareBoundaryPoints(type, range.nativeRange || range);                   // 2335
                };                                                                                                     // 2336
            }                                                                                                          // 2337
                                                                                                                       // 2338
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2340
            // Test for existence of createContextualFragment and delegate to it if it exists                          // 2341
            if (api.util.isHostMethod(range, "createContextualFragment")) {                                            // 2342
                rangeProto.createContextualFragment = function(fragmentStr) {                                          // 2343
                    return this.nativeRange.createContextualFragment(fragmentStr);                                     // 2344
                };                                                                                                     // 2345
            }                                                                                                          // 2346
                                                                                                                       // 2347
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2349
            // Clean up                                                                                                // 2350
            dom.getBody(document).removeChild(testTextNode);                                                           // 2351
            range.detach();                                                                                            // 2352
            range2.detach();                                                                                           // 2353
        })();                                                                                                          // 2354
                                                                                                                       // 2355
        api.createNativeRange = function(doc) {                                                                        // 2356
            doc = doc || document;                                                                                     // 2357
            return doc.createRange();                                                                                  // 2358
        };                                                                                                             // 2359
    } else if (api.features.implementsTextRange) {                                                                     // 2360
        // This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a    // 2361
        // prototype                                                                                                   // 2362
                                                                                                                       // 2363
        WrappedRange = function(textRange) {                                                                           // 2364
            this.textRange = textRange;                                                                                // 2365
            this.refresh();                                                                                            // 2366
        };                                                                                                             // 2367
                                                                                                                       // 2368
        WrappedRange.prototype = new DomRange(document);                                                               // 2369
                                                                                                                       // 2370
        WrappedRange.prototype.refresh = function() {                                                                  // 2371
            var start, end;                                                                                            // 2372
                                                                                                                       // 2373
            // TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that. // 2374
            var rangeContainerElement = getTextRangeContainerElement(this.textRange);                                  // 2375
                                                                                                                       // 2376
            if (textRangeIsCollapsed(this.textRange)) {                                                                // 2377
                end = start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, true);         // 2378
            } else {                                                                                                   // 2379
                                                                                                                       // 2380
                start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, false);              // 2381
                end = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, false, false);               // 2382
            }                                                                                                          // 2383
                                                                                                                       // 2384
            this.setStart(start.node, start.offset);                                                                   // 2385
            this.setEnd(end.node, end.offset);                                                                         // 2386
        };                                                                                                             // 2387
                                                                                                                       // 2388
        DomRange.copyComparisonConstants(WrappedRange);                                                                // 2389
                                                                                                                       // 2390
        // Add WrappedRange as the Range property of the global object to allow expression like Range.END_TO_END to work
        var globalObj = (function() { return this; })();                                                               // 2392
        if (typeof globalObj.Range == "undefined") {                                                                   // 2393
            globalObj.Range = WrappedRange;                                                                            // 2394
        }                                                                                                              // 2395
                                                                                                                       // 2396
        api.createNativeRange = function(doc) {                                                                        // 2397
            doc = doc || document;                                                                                     // 2398
            return doc.body.createTextRange();                                                                         // 2399
        };                                                                                                             // 2400
    }                                                                                                                  // 2401
                                                                                                                       // 2402
    if (api.features.implementsTextRange) {                                                                            // 2403
        WrappedRange.rangeToTextRange = function(range) {                                                              // 2404
            if (range.collapsed) {                                                                                     // 2405
                var tr = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);      // 2406
                                                                                                                       // 2407
                                                                                                                       // 2408
                                                                                                                       // 2409
                return tr;                                                                                             // 2410
                                                                                                                       // 2411
                //return createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);      // 2412
            } else {                                                                                                   // 2413
                var startRange = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);
                var endRange = createBoundaryTextRange(new DomPosition(range.endContainer, range.endOffset), false);   // 2415
                var textRange = dom.getDocument(range.startContainer).body.createTextRange();                          // 2416
                textRange.setEndPoint("StartToStart", startRange);                                                     // 2417
                textRange.setEndPoint("EndToEnd", endRange);                                                           // 2418
                return textRange;                                                                                      // 2419
            }                                                                                                          // 2420
        };                                                                                                             // 2421
    }                                                                                                                  // 2422
                                                                                                                       // 2423
    WrappedRange.prototype.getName = function() {                                                                      // 2424
        return "WrappedRange";                                                                                         // 2425
    };                                                                                                                 // 2426
                                                                                                                       // 2427
    api.WrappedRange = WrappedRange;                                                                                   // 2428
                                                                                                                       // 2429
    api.createRange = function(doc) {                                                                                  // 2430
        doc = doc || document;                                                                                         // 2431
        return new WrappedRange(api.createNativeRange(doc));                                                           // 2432
    };                                                                                                                 // 2433
                                                                                                                       // 2434
    api.createRangyRange = function(doc) {                                                                             // 2435
        doc = doc || document;                                                                                         // 2436
        return new DomRange(doc);                                                                                      // 2437
    };                                                                                                                 // 2438
                                                                                                                       // 2439
    api.createIframeRange = function(iframeEl) {                                                                       // 2440
        return api.createRange(dom.getIframeDocument(iframeEl));                                                       // 2441
    };                                                                                                                 // 2442
                                                                                                                       // 2443
    api.createIframeRangyRange = function(iframeEl) {                                                                  // 2444
        return api.createRangyRange(dom.getIframeDocument(iframeEl));                                                  // 2445
    };                                                                                                                 // 2446
                                                                                                                       // 2447
    api.addCreateMissingNativeApiListener(function(win) {                                                              // 2448
        var doc = win.document;                                                                                        // 2449
        if (typeof doc.createRange == "undefined") {                                                                   // 2450
            doc.createRange = function() {                                                                             // 2451
                return api.createRange(this);                                                                          // 2452
            };                                                                                                         // 2453
        }                                                                                                              // 2454
        doc = win = null;                                                                                              // 2455
    });                                                                                                                // 2456
});rangy.createModule("WrappedSelection", function(api, module) {                                                      // 2457
    // This will create a selection object wrapper that follows the Selection object found in the WHATWG draft DOM Range
    // spec (http://html5.org/specs/dom-range.html)                                                                    // 2459
                                                                                                                       // 2460
    api.requireModules( ["DomUtil", "DomRange", "WrappedRange"] );                                                     // 2461
                                                                                                                       // 2462
    api.config.checkSelectionRanges = true;                                                                            // 2463
                                                                                                                       // 2464
    var BOOLEAN = "boolean",                                                                                           // 2465
        windowPropertyName = "_rangySelection",                                                                        // 2466
        dom = api.dom,                                                                                                 // 2467
        util = api.util,                                                                                               // 2468
        DomRange = api.DomRange,                                                                                       // 2469
        WrappedRange = api.WrappedRange,                                                                               // 2470
        DOMException = api.DOMException,                                                                               // 2471
        DomPosition = dom.DomPosition,                                                                                 // 2472
        getSelection,                                                                                                  // 2473
        selectionIsCollapsed,                                                                                          // 2474
        CONTROL = "Control";                                                                                           // 2475
                                                                                                                       // 2476
                                                                                                                       // 2477
                                                                                                                       // 2478
    function getWinSelection(winParam) {                                                                               // 2479
        return (winParam || window).getSelection();                                                                    // 2480
    }                                                                                                                  // 2481
                                                                                                                       // 2482
    function getDocSelection(winParam) {                                                                               // 2483
        return (winParam || window).document.selection;                                                                // 2484
    }                                                                                                                  // 2485
                                                                                                                       // 2486
    // Test for the Range/TextRange and Selection features required                                                    // 2487
    // Test for ability to retrieve selection                                                                          // 2488
    var implementsWinGetSelection = api.util.isHostMethod(window, "getSelection"),                                     // 2489
        implementsDocSelection = api.util.isHostObject(document, "selection");                                         // 2490
                                                                                                                       // 2491
    var useDocumentSelection = implementsDocSelection && (!implementsWinGetSelection || api.config.preferTextRange);   // 2492
                                                                                                                       // 2493
    if (useDocumentSelection) {                                                                                        // 2494
        getSelection = getDocSelection;                                                                                // 2495
        api.isSelectionValid = function(winParam) {                                                                    // 2496
            var doc = (winParam || window).document, nativeSel = doc.selection;                                        // 2497
                                                                                                                       // 2498
            // Check whether the selection TextRange is actually contained within the correct document                 // 2499
            return (nativeSel.type != "None" || dom.getDocument(nativeSel.createRange().parentElement()) == doc);      // 2500
        };                                                                                                             // 2501
    } else if (implementsWinGetSelection) {                                                                            // 2502
        getSelection = getWinSelection;                                                                                // 2503
        api.isSelectionValid = function() {                                                                            // 2504
            return true;                                                                                               // 2505
        };                                                                                                             // 2506
    } else {                                                                                                           // 2507
        module.fail("Neither document.selection or window.getSelection() detected.");                                  // 2508
    }                                                                                                                  // 2509
                                                                                                                       // 2510
    api.getNativeSelection = getSelection;                                                                             // 2511
                                                                                                                       // 2512
    var testSelection = getSelection();                                                                                // 2513
    var testRange = api.createNativeRange(document);                                                                   // 2514
    var body = dom.getBody(document);                                                                                  // 2515
                                                                                                                       // 2516
    // Obtaining a range from a selection                                                                              // 2517
    var selectionHasAnchorAndFocus = util.areHostObjects(testSelection, ["anchorNode", "focusNode"] &&                 // 2518
                                     util.areHostProperties(testSelection, ["anchorOffset", "focusOffset"]));          // 2519
    api.features.selectionHasAnchorAndFocus = selectionHasAnchorAndFocus;                                              // 2520
                                                                                                                       // 2521
    // Test for existence of native selection extend() method                                                          // 2522
    var selectionHasExtend = util.isHostMethod(testSelection, "extend");                                               // 2523
    api.features.selectionHasExtend = selectionHasExtend;                                                              // 2524
                                                                                                                       // 2525
    // Test if rangeCount exists                                                                                       // 2526
    var selectionHasRangeCount = (typeof testSelection.rangeCount == "number");                                        // 2527
    api.features.selectionHasRangeCount = selectionHasRangeCount;                                                      // 2528
                                                                                                                       // 2529
    var selectionSupportsMultipleRanges = false;                                                                       // 2530
    var collapsedNonEditableSelectionsSupported = true;                                                                // 2531
                                                                                                                       // 2532
    if (util.areHostMethods(testSelection, ["addRange", "getRangeAt", "removeAllRanges"]) &&                           // 2533
            typeof testSelection.rangeCount == "number" && api.features.implementsDomRange) {                          // 2534
                                                                                                                       // 2535
        (function() {                                                                                                  // 2536
            var iframe = document.createElement("iframe");                                                             // 2537
            body.appendChild(iframe);                                                                                  // 2538
                                                                                                                       // 2539
            var iframeDoc = dom.getIframeDocument(iframe);                                                             // 2540
            iframeDoc.open();                                                                                          // 2541
            iframeDoc.write("<html><head></head><body>12</body></html>");                                              // 2542
            iframeDoc.close();                                                                                         // 2543
                                                                                                                       // 2544
            var sel = dom.getIframeWindow(iframe).getSelection();                                                      // 2545
            var docEl = iframeDoc.documentElement;                                                                     // 2546
            var iframeBody = docEl.lastChild, textNode = iframeBody.firstChild;                                        // 2547
                                                                                                                       // 2548
            // Test whether the native selection will allow a collapsed selection within a non-editable element        // 2549
            var r1 = iframeDoc.createRange();                                                                          // 2550
            r1.setStart(textNode, 1);                                                                                  // 2551
            r1.collapse(true);                                                                                         // 2552
            sel.addRange(r1);                                                                                          // 2553
            collapsedNonEditableSelectionsSupported = (sel.rangeCount == 1);                                           // 2554
            sel.removeAllRanges();                                                                                     // 2555
                                                                                                                       // 2556
            // Test whether the native selection is capable of supporting multiple ranges                              // 2557
            var r2 = r1.cloneRange();                                                                                  // 2558
            r1.setStart(textNode, 0);                                                                                  // 2559
            r2.setEnd(textNode, 2);                                                                                    // 2560
            sel.addRange(r1);                                                                                          // 2561
            sel.addRange(r2);                                                                                          // 2562
                                                                                                                       // 2563
            selectionSupportsMultipleRanges = (sel.rangeCount == 2);                                                   // 2564
                                                                                                                       // 2565
            // Clean up                                                                                                // 2566
            r1.detach();                                                                                               // 2567
            r2.detach();                                                                                               // 2568
                                                                                                                       // 2569
            body.removeChild(iframe);                                                                                  // 2570
        })();                                                                                                          // 2571
    }                                                                                                                  // 2572
                                                                                                                       // 2573
    api.features.selectionSupportsMultipleRanges = selectionSupportsMultipleRanges;                                    // 2574
    api.features.collapsedNonEditableSelectionsSupported = collapsedNonEditableSelectionsSupported;                    // 2575
                                                                                                                       // 2576
    // ControlRanges                                                                                                   // 2577
    var implementsControlRange = false, testControlRange;                                                              // 2578
                                                                                                                       // 2579
    if (body && util.isHostMethod(body, "createControlRange")) {                                                       // 2580
        testControlRange = body.createControlRange();                                                                  // 2581
        if (util.areHostProperties(testControlRange, ["item", "add"])) {                                               // 2582
            implementsControlRange = true;                                                                             // 2583
        }                                                                                                              // 2584
    }                                                                                                                  // 2585
    api.features.implementsControlRange = implementsControlRange;                                                      // 2586
                                                                                                                       // 2587
    // Selection collapsedness                                                                                         // 2588
    if (selectionHasAnchorAndFocus) {                                                                                  // 2589
        selectionIsCollapsed = function(sel) {                                                                         // 2590
            return sel.anchorNode === sel.focusNode && sel.anchorOffset === sel.focusOffset;                           // 2591
        };                                                                                                             // 2592
    } else {                                                                                                           // 2593
        selectionIsCollapsed = function(sel) {                                                                         // 2594
            return sel.rangeCount ? sel.getRangeAt(sel.rangeCount - 1).collapsed : false;                              // 2595
        };                                                                                                             // 2596
    }                                                                                                                  // 2597
                                                                                                                       // 2598
    function updateAnchorAndFocusFromRange(sel, range, backwards) {                                                    // 2599
        var anchorPrefix = backwards ? "end" : "start", focusPrefix = backwards ? "start" : "end";                     // 2600
        sel.anchorNode = range[anchorPrefix + "Container"];                                                            // 2601
        sel.anchorOffset = range[anchorPrefix + "Offset"];                                                             // 2602
        sel.focusNode = range[focusPrefix + "Container"];                                                              // 2603
        sel.focusOffset = range[focusPrefix + "Offset"];                                                               // 2604
    }                                                                                                                  // 2605
                                                                                                                       // 2606
    function updateAnchorAndFocusFromNativeSelection(sel) {                                                            // 2607
        var nativeSel = sel.nativeSelection;                                                                           // 2608
        sel.anchorNode = nativeSel.anchorNode;                                                                         // 2609
        sel.anchorOffset = nativeSel.anchorOffset;                                                                     // 2610
        sel.focusNode = nativeSel.focusNode;                                                                           // 2611
        sel.focusOffset = nativeSel.focusOffset;                                                                       // 2612
    }                                                                                                                  // 2613
                                                                                                                       // 2614
    function updateEmptySelection(sel) {                                                                               // 2615
        sel.anchorNode = sel.focusNode = null;                                                                         // 2616
        sel.anchorOffset = sel.focusOffset = 0;                                                                        // 2617
        sel.rangeCount = 0;                                                                                            // 2618
        sel.isCollapsed = true;                                                                                        // 2619
        sel._ranges.length = 0;                                                                                        // 2620
    }                                                                                                                  // 2621
                                                                                                                       // 2622
    function getNativeRange(range) {                                                                                   // 2623
        var nativeRange;                                                                                               // 2624
        if (range instanceof DomRange) {                                                                               // 2625
            nativeRange = range._selectionNativeRange;                                                                 // 2626
            if (!nativeRange) {                                                                                        // 2627
                nativeRange = api.createNativeRange(dom.getDocument(range.startContainer));                            // 2628
                nativeRange.setEnd(range.endContainer, range.endOffset);                                               // 2629
                nativeRange.setStart(range.startContainer, range.startOffset);                                         // 2630
                range._selectionNativeRange = nativeRange;                                                             // 2631
                range.attachListener("detach", function() {                                                            // 2632
                                                                                                                       // 2633
                    this._selectionNativeRange = null;                                                                 // 2634
                });                                                                                                    // 2635
            }                                                                                                          // 2636
        } else if (range instanceof WrappedRange) {                                                                    // 2637
            nativeRange = range.nativeRange;                                                                           // 2638
        } else if (api.features.implementsDomRange && (range instanceof dom.getWindow(range.startContainer).Range)) {  // 2639
            nativeRange = range;                                                                                       // 2640
        }                                                                                                              // 2641
        return nativeRange;                                                                                            // 2642
    }                                                                                                                  // 2643
                                                                                                                       // 2644
    function rangeContainsSingleElement(rangeNodes) {                                                                  // 2645
        if (!rangeNodes.length || rangeNodes[0].nodeType != 1) {                                                       // 2646
            return false;                                                                                              // 2647
        }                                                                                                              // 2648
        for (var i = 1, len = rangeNodes.length; i < len; ++i) {                                                       // 2649
            if (!dom.isAncestorOf(rangeNodes[0], rangeNodes[i])) {                                                     // 2650
                return false;                                                                                          // 2651
            }                                                                                                          // 2652
        }                                                                                                              // 2653
        return true;                                                                                                   // 2654
    }                                                                                                                  // 2655
                                                                                                                       // 2656
    function getSingleElementFromRange(range) {                                                                        // 2657
        var nodes = range.getNodes();                                                                                  // 2658
        if (!rangeContainsSingleElement(nodes)) {                                                                      // 2659
            throw new Error("getSingleElementFromRange: range " + range.inspect() + " did not consist of a single element");
        }                                                                                                              // 2661
        return nodes[0];                                                                                               // 2662
    }                                                                                                                  // 2663
                                                                                                                       // 2664
    function isTextRange(range) {                                                                                      // 2665
        return !!range && typeof range.text != "undefined";                                                            // 2666
    }                                                                                                                  // 2667
                                                                                                                       // 2668
    function updateFromTextRange(sel, range) {                                                                         // 2669
        // Create a Range from the selected TextRange                                                                  // 2670
        var wrappedRange = new WrappedRange(range);                                                                    // 2671
        sel._ranges = [wrappedRange];                                                                                  // 2672
                                                                                                                       // 2673
        updateAnchorAndFocusFromRange(sel, wrappedRange, false);                                                       // 2674
        sel.rangeCount = 1;                                                                                            // 2675
        sel.isCollapsed = wrappedRange.collapsed;                                                                      // 2676
    }                                                                                                                  // 2677
                                                                                                                       // 2678
    function updateControlSelection(sel) {                                                                             // 2679
        // Update the wrapped selection based on what's now in the native selection                                    // 2680
        sel._ranges.length = 0;                                                                                        // 2681
        if (sel.docSelection.type == "None") {                                                                         // 2682
            updateEmptySelection(sel);                                                                                 // 2683
        } else {                                                                                                       // 2684
            var controlRange = sel.docSelection.createRange();                                                         // 2685
            if (isTextRange(controlRange)) {                                                                           // 2686
                // This case (where the selection type is "Control" and calling createRange() on the selection returns // 2687
                // a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected         // 2688
                // ControlRange have been removed from the ControlRange and removed from the document.                 // 2689
                updateFromTextRange(sel, controlRange);                                                                // 2690
            } else {                                                                                                   // 2691
                sel.rangeCount = controlRange.length;                                                                  // 2692
                var range, doc = dom.getDocument(controlRange.item(0));                                                // 2693
                for (var i = 0; i < sel.rangeCount; ++i) {                                                             // 2694
                    range = api.createRange(doc);                                                                      // 2695
                    range.selectNode(controlRange.item(i));                                                            // 2696
                    sel._ranges.push(range);                                                                           // 2697
                }                                                                                                      // 2698
                sel.isCollapsed = sel.rangeCount == 1 && sel._ranges[0].collapsed;                                     // 2699
                updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], false);                            // 2700
            }                                                                                                          // 2701
        }                                                                                                              // 2702
    }                                                                                                                  // 2703
                                                                                                                       // 2704
    function addRangeToControlSelection(sel, range) {                                                                  // 2705
        var controlRange = sel.docSelection.createRange();                                                             // 2706
        var rangeElement = getSingleElementFromRange(range);                                                           // 2707
                                                                                                                       // 2708
        // Create a new ControlRange containing all the elements in the selected ControlRange plus the element         // 2709
        // contained by the supplied range                                                                             // 2710
        var doc = dom.getDocument(controlRange.item(0));                                                               // 2711
        var newControlRange = dom.getBody(doc).createControlRange();                                                   // 2712
        for (var i = 0, len = controlRange.length; i < len; ++i) {                                                     // 2713
            newControlRange.add(controlRange.item(i));                                                                 // 2714
        }                                                                                                              // 2715
        try {                                                                                                          // 2716
            newControlRange.add(rangeElement);                                                                         // 2717
        } catch (ex) {                                                                                                 // 2718
            throw new Error("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)");
        }                                                                                                              // 2720
        newControlRange.select();                                                                                      // 2721
                                                                                                                       // 2722
        // Update the wrapped selection based on what's now in the native selection                                    // 2723
        updateControlSelection(sel);                                                                                   // 2724
    }                                                                                                                  // 2725
                                                                                                                       // 2726
    var getSelectionRangeAt;                                                                                           // 2727
                                                                                                                       // 2728
    if (util.isHostMethod(testSelection,  "getRangeAt")) {                                                             // 2729
        getSelectionRangeAt = function(sel, index) {                                                                   // 2730
            try {                                                                                                      // 2731
                return sel.getRangeAt(index);                                                                          // 2732
            } catch(ex) {                                                                                              // 2733
                return null;                                                                                           // 2734
            }                                                                                                          // 2735
        };                                                                                                             // 2736
    } else if (selectionHasAnchorAndFocus) {                                                                           // 2737
        getSelectionRangeAt = function(sel) {                                                                          // 2738
            var doc = dom.getDocument(sel.anchorNode);                                                                 // 2739
            var range = api.createRange(doc);                                                                          // 2740
            range.setStart(sel.anchorNode, sel.anchorOffset);                                                          // 2741
            range.setEnd(sel.focusNode, sel.focusOffset);                                                              // 2742
                                                                                                                       // 2743
            // Handle the case when the selection was selected backwards (from the end to the start in the             // 2744
            // document)                                                                                               // 2745
            if (range.collapsed !== this.isCollapsed) {                                                                // 2746
                range.setStart(sel.focusNode, sel.focusOffset);                                                        // 2747
                range.setEnd(sel.anchorNode, sel.anchorOffset);                                                        // 2748
            }                                                                                                          // 2749
                                                                                                                       // 2750
            return range;                                                                                              // 2751
        };                                                                                                             // 2752
    }                                                                                                                  // 2753
                                                                                                                       // 2754
    /**                                                                                                                // 2755
     * @constructor                                                                                                    // 2756
     */                                                                                                                // 2757
    function WrappedSelection(selection, docSelection, win) {                                                          // 2758
        this.nativeSelection = selection;                                                                              // 2759
        this.docSelection = docSelection;                                                                              // 2760
        this._ranges = [];                                                                                             // 2761
        this.win = win;                                                                                                // 2762
        this.refresh();                                                                                                // 2763
    }                                                                                                                  // 2764
                                                                                                                       // 2765
    api.getSelection = function(win) {                                                                                 // 2766
        win = win || window;                                                                                           // 2767
        var sel = win[windowPropertyName];                                                                             // 2768
        var nativeSel = getSelection(win), docSel = implementsDocSelection ? getDocSelection(win) : null;              // 2769
        if (sel) {                                                                                                     // 2770
            sel.nativeSelection = nativeSel;                                                                           // 2771
            sel.docSelection = docSel;                                                                                 // 2772
            sel.refresh(win);                                                                                          // 2773
        } else {                                                                                                       // 2774
            sel = new WrappedSelection(nativeSel, docSel, win);                                                        // 2775
            win[windowPropertyName] = sel;                                                                             // 2776
        }                                                                                                              // 2777
        return sel;                                                                                                    // 2778
    };                                                                                                                 // 2779
                                                                                                                       // 2780
    api.getIframeSelection = function(iframeEl) {                                                                      // 2781
        return api.getSelection(dom.getIframeWindow(iframeEl));                                                        // 2782
    };                                                                                                                 // 2783
                                                                                                                       // 2784
    var selProto = WrappedSelection.prototype;                                                                         // 2785
                                                                                                                       // 2786
    function createControlSelection(sel, ranges) {                                                                     // 2787
        // Ensure that the selection becomes of type "Control"                                                         // 2788
        var doc = dom.getDocument(ranges[0].startContainer);                                                           // 2789
        var controlRange = dom.getBody(doc).createControlRange();                                                      // 2790
        for (var i = 0, el; i < rangeCount; ++i) {                                                                     // 2791
            el = getSingleElementFromRange(ranges[i]);                                                                 // 2792
            try {                                                                                                      // 2793
                controlRange.add(el);                                                                                  // 2794
            } catch (ex) {                                                                                             // 2795
                throw new Error("setRanges(): Element within the one of the specified Ranges could not be added to control selection (does it have layout?)");
            }                                                                                                          // 2797
        }                                                                                                              // 2798
        controlRange.select();                                                                                         // 2799
                                                                                                                       // 2800
        // Update the wrapped selection based on what's now in the native selection                                    // 2801
        updateControlSelection(sel);                                                                                   // 2802
    }                                                                                                                  // 2803
                                                                                                                       // 2804
    // Selecting a range                                                                                               // 2805
    if (!useDocumentSelection && selectionHasAnchorAndFocus && util.areHostMethods(testSelection, ["removeAllRanges", "addRange"])) {
        selProto.removeAllRanges = function() {                                                                        // 2807
            this.nativeSelection.removeAllRanges();                                                                    // 2808
            updateEmptySelection(this);                                                                                // 2809
        };                                                                                                             // 2810
                                                                                                                       // 2811
        var addRangeBackwards = function(sel, range) {                                                                 // 2812
            var doc = DomRange.getRangeDocument(range);                                                                // 2813
            var endRange = api.createRange(doc);                                                                       // 2814
            endRange.collapseToPoint(range.endContainer, range.endOffset);                                             // 2815
            sel.nativeSelection.addRange(getNativeRange(endRange));                                                    // 2816
            sel.nativeSelection.extend(range.startContainer, range.startOffset);                                       // 2817
            sel.refresh();                                                                                             // 2818
        };                                                                                                             // 2819
                                                                                                                       // 2820
        if (selectionHasRangeCount) {                                                                                  // 2821
            selProto.addRange = function(range, backwards) {                                                           // 2822
                if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {           // 2823
                    addRangeToControlSelection(this, range);                                                           // 2824
                } else {                                                                                               // 2825
                    if (backwards && selectionHasExtend) {                                                             // 2826
                        addRangeBackwards(this, range);                                                                // 2827
                    } else {                                                                                           // 2828
                        var previousRangeCount;                                                                        // 2829
                        if (selectionSupportsMultipleRanges) {                                                         // 2830
                            previousRangeCount = this.rangeCount;                                                      // 2831
                        } else {                                                                                       // 2832
                            this.removeAllRanges();                                                                    // 2833
                            previousRangeCount = 0;                                                                    // 2834
                        }                                                                                              // 2835
                        this.nativeSelection.addRange(getNativeRange(range));                                          // 2836
                                                                                                                       // 2837
                        // Check whether adding the range was successful                                               // 2838
                        this.rangeCount = this.nativeSelection.rangeCount;                                             // 2839
                                                                                                                       // 2840
                        if (this.rangeCount == previousRangeCount + 1) {                                               // 2841
                            // The range was added successfully                                                        // 2842
                                                                                                                       // 2843
                            // Check whether the range that we added to the selection is reflected in the last range extracted from
                            // the selection                                                                           // 2845
                            if (api.config.checkSelectionRanges) {                                                     // 2846
                                var nativeRange = getSelectionRangeAt(this.nativeSelection, this.rangeCount - 1);      // 2847
                                if (nativeRange && !DomRange.rangesEqual(nativeRange, range)) {                        // 2848
                                    // Happens in WebKit with, for example, a selection placed at the start of a text node
                                    range = new WrappedRange(nativeRange);                                             // 2850
                                }                                                                                      // 2851
                            }                                                                                          // 2852
                            this._ranges[this.rangeCount - 1] = range;                                                 // 2853
                            updateAnchorAndFocusFromRange(this, range, selectionIsBackwards(this.nativeSelection));    // 2854
                            this.isCollapsed = selectionIsCollapsed(this);                                             // 2855
                        } else {                                                                                       // 2856
                            // The range was not added successfully. The simplest thing is to refresh                  // 2857
                            this.refresh();                                                                            // 2858
                        }                                                                                              // 2859
                    }                                                                                                  // 2860
                }                                                                                                      // 2861
            };                                                                                                         // 2862
        } else {                                                                                                       // 2863
            selProto.addRange = function(range, backwards) {                                                           // 2864
                if (backwards && selectionHasExtend) {                                                                 // 2865
                    addRangeBackwards(this, range);                                                                    // 2866
                } else {                                                                                               // 2867
                    this.nativeSelection.addRange(getNativeRange(range));                                              // 2868
                    this.refresh();                                                                                    // 2869
                }                                                                                                      // 2870
            };                                                                                                         // 2871
        }                                                                                                              // 2872
                                                                                                                       // 2873
        selProto.setRanges = function(ranges) {                                                                        // 2874
            if (implementsControlRange && ranges.length > 1) {                                                         // 2875
                createControlSelection(this, ranges);                                                                  // 2876
            } else {                                                                                                   // 2877
                this.removeAllRanges();                                                                                // 2878
                for (var i = 0, len = ranges.length; i < len; ++i) {                                                   // 2879
                    this.addRange(ranges[i]);                                                                          // 2880
                }                                                                                                      // 2881
            }                                                                                                          // 2882
        };                                                                                                             // 2883
    } else if (util.isHostMethod(testSelection, "empty") && util.isHostMethod(testRange, "select") &&                  // 2884
               implementsControlRange && useDocumentSelection) {                                                       // 2885
                                                                                                                       // 2886
        selProto.removeAllRanges = function() {                                                                        // 2887
            // Added try/catch as fix for issue #21                                                                    // 2888
            try {                                                                                                      // 2889
                this.docSelection.empty();                                                                             // 2890
                                                                                                                       // 2891
                // Check for empty() not working (issue #24)                                                           // 2892
                if (this.docSelection.type != "None") {                                                                // 2893
                    // Work around failure to empty a control selection by instead selecting a TextRange and then      // 2894
                    // calling empty()                                                                                 // 2895
                    var doc;                                                                                           // 2896
                    if (this.anchorNode) {                                                                             // 2897
                        doc = dom.getDocument(this.anchorNode);                                                        // 2898
                    } else if (this.docSelection.type == CONTROL) {                                                    // 2899
                        var controlRange = this.docSelection.createRange();                                            // 2900
                        if (controlRange.length) {                                                                     // 2901
                            doc = dom.getDocument(controlRange.item(0)).body.createTextRange();                        // 2902
                        }                                                                                              // 2903
                    }                                                                                                  // 2904
                    if (doc) {                                                                                         // 2905
                        var textRange = doc.body.createTextRange();                                                    // 2906
                        textRange.select();                                                                            // 2907
                        this.docSelection.empty();                                                                     // 2908
                    }                                                                                                  // 2909
                }                                                                                                      // 2910
            } catch(ex) {}                                                                                             // 2911
            updateEmptySelection(this);                                                                                // 2912
        };                                                                                                             // 2913
                                                                                                                       // 2914
        selProto.addRange = function(range) {                                                                          // 2915
            if (this.docSelection.type == CONTROL) {                                                                   // 2916
                addRangeToControlSelection(this, range);                                                               // 2917
            } else {                                                                                                   // 2918
                WrappedRange.rangeToTextRange(range).select();                                                         // 2919
                this._ranges[0] = range;                                                                               // 2920
                this.rangeCount = 1;                                                                                   // 2921
                this.isCollapsed = this._ranges[0].collapsed;                                                          // 2922
                updateAnchorAndFocusFromRange(this, range, false);                                                     // 2923
            }                                                                                                          // 2924
        };                                                                                                             // 2925
                                                                                                                       // 2926
        selProto.setRanges = function(ranges) {                                                                        // 2927
            this.removeAllRanges();                                                                                    // 2928
            var rangeCount = ranges.length;                                                                            // 2929
            if (rangeCount > 1) {                                                                                      // 2930
                createControlSelection(this, ranges);                                                                  // 2931
            } else if (rangeCount) {                                                                                   // 2932
                this.addRange(ranges[0]);                                                                              // 2933
            }                                                                                                          // 2934
        };                                                                                                             // 2935
    } else {                                                                                                           // 2936
        module.fail("No means of selecting a Range or TextRange was found");                                           // 2937
        return false;                                                                                                  // 2938
    }                                                                                                                  // 2939
                                                                                                                       // 2940
    selProto.getRangeAt = function(index) {                                                                            // 2941
        if (index < 0 || index >= this.rangeCount) {                                                                   // 2942
            throw new DOMException("INDEX_SIZE_ERR");                                                                  // 2943
        } else {                                                                                                       // 2944
            return this._ranges[index];                                                                                // 2945
        }                                                                                                              // 2946
    };                                                                                                                 // 2947
                                                                                                                       // 2948
    var refreshSelection;                                                                                              // 2949
                                                                                                                       // 2950
    if (useDocumentSelection) {                                                                                        // 2951
        refreshSelection = function(sel) {                                                                             // 2952
            var range;                                                                                                 // 2953
            if (api.isSelectionValid(sel.win)) {                                                                       // 2954
                range = sel.docSelection.createRange();                                                                // 2955
            } else {                                                                                                   // 2956
                range = dom.getBody(sel.win.document).createTextRange();                                               // 2957
                range.collapse(true);                                                                                  // 2958
            }                                                                                                          // 2959
                                                                                                                       // 2960
                                                                                                                       // 2961
            if (sel.docSelection.type == CONTROL) {                                                                    // 2962
                updateControlSelection(sel);                                                                           // 2963
            } else if (isTextRange(range)) {                                                                           // 2964
                updateFromTextRange(sel, range);                                                                       // 2965
            } else {                                                                                                   // 2966
                updateEmptySelection(sel);                                                                             // 2967
            }                                                                                                          // 2968
        };                                                                                                             // 2969
    } else if (util.isHostMethod(testSelection, "getRangeAt") && typeof testSelection.rangeCount == "number") {        // 2970
        refreshSelection = function(sel) {                                                                             // 2971
            if (implementsControlRange && implementsDocSelection && sel.docSelection.type == CONTROL) {                // 2972
                updateControlSelection(sel);                                                                           // 2973
            } else {                                                                                                   // 2974
                sel._ranges.length = sel.rangeCount = sel.nativeSelection.rangeCount;                                  // 2975
                if (sel.rangeCount) {                                                                                  // 2976
                    for (var i = 0, len = sel.rangeCount; i < len; ++i) {                                              // 2977
                        sel._ranges[i] = new api.WrappedRange(sel.nativeSelection.getRangeAt(i));                      // 2978
                    }                                                                                                  // 2979
                    updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], selectionIsBackwards(sel.nativeSelection));
                    sel.isCollapsed = selectionIsCollapsed(sel);                                                       // 2981
                } else {                                                                                               // 2982
                    updateEmptySelection(sel);                                                                         // 2983
                }                                                                                                      // 2984
            }                                                                                                          // 2985
        };                                                                                                             // 2986
    } else if (selectionHasAnchorAndFocus && typeof testSelection.isCollapsed == BOOLEAN && typeof testRange.collapsed == BOOLEAN && api.features.implementsDomRange) {
        refreshSelection = function(sel) {                                                                             // 2988
            var range, nativeSel = sel.nativeSelection;                                                                // 2989
            if (nativeSel.anchorNode) {                                                                                // 2990
                range = getSelectionRangeAt(nativeSel, 0);                                                             // 2991
                sel._ranges = [range];                                                                                 // 2992
                sel.rangeCount = 1;                                                                                    // 2993
                updateAnchorAndFocusFromNativeSelection(sel);                                                          // 2994
                sel.isCollapsed = selectionIsCollapsed(sel);                                                           // 2995
            } else {                                                                                                   // 2996
                updateEmptySelection(sel);                                                                             // 2997
            }                                                                                                          // 2998
        };                                                                                                             // 2999
    } else {                                                                                                           // 3000
        module.fail("No means of obtaining a Range or TextRange from the user's selection was found");                 // 3001
        return false;                                                                                                  // 3002
    }                                                                                                                  // 3003
                                                                                                                       // 3004
    selProto.refresh = function(checkForChanges) {                                                                     // 3005
        var oldRanges = checkForChanges ? this._ranges.slice(0) : null;                                                // 3006
        refreshSelection(this);                                                                                        // 3007
        if (checkForChanges) {                                                                                         // 3008
            var i = oldRanges.length;                                                                                  // 3009
            if (i != this._ranges.length) {                                                                            // 3010
                return false;                                                                                          // 3011
            }                                                                                                          // 3012
            while (i--) {                                                                                              // 3013
                if (!DomRange.rangesEqual(oldRanges[i], this._ranges[i])) {                                            // 3014
                    return false;                                                                                      // 3015
                }                                                                                                      // 3016
            }                                                                                                          // 3017
            return true;                                                                                               // 3018
        }                                                                                                              // 3019
    };                                                                                                                 // 3020
                                                                                                                       // 3021
    // Removal of a single range                                                                                       // 3022
    var removeRangeManually = function(sel, range) {                                                                   // 3023
        var ranges = sel.getAllRanges(), removed = false;                                                              // 3024
        sel.removeAllRanges();                                                                                         // 3025
        for (var i = 0, len = ranges.length; i < len; ++i) {                                                           // 3026
            if (removed || range !== ranges[i]) {                                                                      // 3027
                sel.addRange(ranges[i]);                                                                               // 3028
            } else {                                                                                                   // 3029
                // According to the draft WHATWG Range spec, the same range may be added to the selection multiple     // 3030
                // times. removeRange should only remove the first instance, so the following ensures only the first   // 3031
                // instance is removed                                                                                 // 3032
                removed = true;                                                                                        // 3033
            }                                                                                                          // 3034
        }                                                                                                              // 3035
        if (!sel.rangeCount) {                                                                                         // 3036
            updateEmptySelection(sel);                                                                                 // 3037
        }                                                                                                              // 3038
    };                                                                                                                 // 3039
                                                                                                                       // 3040
    if (implementsControlRange) {                                                                                      // 3041
        selProto.removeRange = function(range) {                                                                       // 3042
            if (this.docSelection.type == CONTROL) {                                                                   // 3043
                var controlRange = this.docSelection.createRange();                                                    // 3044
                var rangeElement = getSingleElementFromRange(range);                                                   // 3045
                                                                                                                       // 3046
                // Create a new ControlRange containing all the elements in the selected ControlRange minus the        // 3047
                // element contained by the supplied range                                                             // 3048
                var doc = dom.getDocument(controlRange.item(0));                                                       // 3049
                var newControlRange = dom.getBody(doc).createControlRange();                                           // 3050
                var el, removed = false;                                                                               // 3051
                for (var i = 0, len = controlRange.length; i < len; ++i) {                                             // 3052
                    el = controlRange.item(i);                                                                         // 3053
                    if (el !== rangeElement || removed) {                                                              // 3054
                        newControlRange.add(controlRange.item(i));                                                     // 3055
                    } else {                                                                                           // 3056
                        removed = true;                                                                                // 3057
                    }                                                                                                  // 3058
                }                                                                                                      // 3059
                newControlRange.select();                                                                              // 3060
                                                                                                                       // 3061
                // Update the wrapped selection based on what's now in the native selection                            // 3062
                updateControlSelection(this);                                                                          // 3063
            } else {                                                                                                   // 3064
                removeRangeManually(this, range);                                                                      // 3065
            }                                                                                                          // 3066
        };                                                                                                             // 3067
    } else {                                                                                                           // 3068
        selProto.removeRange = function(range) {                                                                       // 3069
            removeRangeManually(this, range);                                                                          // 3070
        };                                                                                                             // 3071
    }                                                                                                                  // 3072
                                                                                                                       // 3073
    // Detecting if a selection is backwards                                                                           // 3074
    var selectionIsBackwards;                                                                                          // 3075
    if (!useDocumentSelection && selectionHasAnchorAndFocus && api.features.implementsDomRange) {                      // 3076
        selectionIsBackwards = function(sel) {                                                                         // 3077
            var backwards = false;                                                                                     // 3078
            if (sel.anchorNode) {                                                                                      // 3079
                backwards = (dom.comparePoints(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset) == 1);
            }                                                                                                          // 3081
            return backwards;                                                                                          // 3082
        };                                                                                                             // 3083
                                                                                                                       // 3084
        selProto.isBackwards = function() {                                                                            // 3085
            return selectionIsBackwards(this);                                                                         // 3086
        };                                                                                                             // 3087
    } else {                                                                                                           // 3088
        selectionIsBackwards = selProto.isBackwards = function() {                                                     // 3089
            return false;                                                                                              // 3090
        };                                                                                                             // 3091
    }                                                                                                                  // 3092
                                                                                                                       // 3093
    // Selection text                                                                                                  // 3094
    // This is conformant to the new WHATWG DOM Range draft spec but differs from WebKit and Mozilla's implementation  // 3095
    selProto.toString = function() {                                                                                   // 3096
                                                                                                                       // 3097
        var rangeTexts = [];                                                                                           // 3098
        for (var i = 0, len = this.rangeCount; i < len; ++i) {                                                         // 3099
            rangeTexts[i] = "" + this._ranges[i];                                                                      // 3100
        }                                                                                                              // 3101
        return rangeTexts.join("");                                                                                    // 3102
    };                                                                                                                 // 3103
                                                                                                                       // 3104
    function assertNodeInSameDocument(sel, node) {                                                                     // 3105
        if (sel.anchorNode && (dom.getDocument(sel.anchorNode) !== dom.getDocument(node))) {                           // 3106
            throw new DOMException("WRONG_DOCUMENT_ERR");                                                              // 3107
        }                                                                                                              // 3108
    }                                                                                                                  // 3109
                                                                                                                       // 3110
    // No current browsers conform fully to the HTML 5 draft spec for this method, so Rangy's own method is always used
    selProto.collapse = function(node, offset) {                                                                       // 3112
        assertNodeInSameDocument(this, node);                                                                          // 3113
        var range = api.createRange(dom.getDocument(node));                                                            // 3114
        range.collapseToPoint(node, offset);                                                                           // 3115
        this.removeAllRanges();                                                                                        // 3116
        this.addRange(range);                                                                                          // 3117
        this.isCollapsed = true;                                                                                       // 3118
    };                                                                                                                 // 3119
                                                                                                                       // 3120
    selProto.collapseToStart = function() {                                                                            // 3121
        if (this.rangeCount) {                                                                                         // 3122
            var range = this._ranges[0];                                                                               // 3123
            this.collapse(range.startContainer, range.startOffset);                                                    // 3124
        } else {                                                                                                       // 3125
            throw new DOMException("INVALID_STATE_ERR");                                                               // 3126
        }                                                                                                              // 3127
    };                                                                                                                 // 3128
                                                                                                                       // 3129
    selProto.collapseToEnd = function() {                                                                              // 3130
        if (this.rangeCount) {                                                                                         // 3131
            var range = this._ranges[this.rangeCount - 1];                                                             // 3132
            this.collapse(range.endContainer, range.endOffset);                                                        // 3133
        } else {                                                                                                       // 3134
            throw new DOMException("INVALID_STATE_ERR");                                                               // 3135
        }                                                                                                              // 3136
    };                                                                                                                 // 3137
                                                                                                                       // 3138
    // The HTML 5 spec is very specific on how selectAllChildren should be implemented so the native implementation is // 3139
    // never used by Rangy.                                                                                            // 3140
    selProto.selectAllChildren = function(node) {                                                                      // 3141
        assertNodeInSameDocument(this, node);                                                                          // 3142
        var range = api.createRange(dom.getDocument(node));                                                            // 3143
        range.selectNodeContents(node);                                                                                // 3144
        this.removeAllRanges();                                                                                        // 3145
        this.addRange(range);                                                                                          // 3146
    };                                                                                                                 // 3147
                                                                                                                       // 3148
    selProto.deleteFromDocument = function() {                                                                         // 3149
        // Sepcial behaviour required for Control selections                                                           // 3150
        if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {                   // 3151
            var controlRange = this.docSelection.createRange();                                                        // 3152
            var element;                                                                                               // 3153
            while (controlRange.length) {                                                                              // 3154
                element = controlRange.item(0);                                                                        // 3155
                controlRange.remove(element);                                                                          // 3156
                element.parentNode.removeChild(element);                                                               // 3157
            }                                                                                                          // 3158
            this.refresh();                                                                                            // 3159
        } else if (this.rangeCount) {                                                                                  // 3160
            var ranges = this.getAllRanges();                                                                          // 3161
            this.removeAllRanges();                                                                                    // 3162
            for (var i = 0, len = ranges.length; i < len; ++i) {                                                       // 3163
                ranges[i].deleteContents();                                                                            // 3164
            }                                                                                                          // 3165
            // The HTML5 spec says nothing about what the selection should contain after calling deleteContents on each
            // range. Firefox moves the selection to where the final selected range was, so we emulate that            // 3167
            this.addRange(ranges[len - 1]);                                                                            // 3168
        }                                                                                                              // 3169
    };                                                                                                                 // 3170
                                                                                                                       // 3171
    // The following are non-standard extensions                                                                       // 3172
    selProto.getAllRanges = function() {                                                                               // 3173
        return this._ranges.slice(0);                                                                                  // 3174
    };                                                                                                                 // 3175
                                                                                                                       // 3176
    selProto.setSingleRange = function(range) {                                                                        // 3177
        this.setRanges( [range] );                                                                                     // 3178
    };                                                                                                                 // 3179
                                                                                                                       // 3180
    selProto.containsNode = function(node, allowPartial) {                                                             // 3181
        for (var i = 0, len = this._ranges.length; i < len; ++i) {                                                     // 3182
            if (this._ranges[i].containsNode(node, allowPartial)) {                                                    // 3183
                return true;                                                                                           // 3184
            }                                                                                                          // 3185
        }                                                                                                              // 3186
        return false;                                                                                                  // 3187
    };                                                                                                                 // 3188
                                                                                                                       // 3189
    selProto.toHtml = function() {                                                                                     // 3190
        var html = "";                                                                                                 // 3191
        if (this.rangeCount) {                                                                                         // 3192
            var container = DomRange.getRangeDocument(this._ranges[0]).createElement("div");                           // 3193
            for (var i = 0, len = this._ranges.length; i < len; ++i) {                                                 // 3194
                container.appendChild(this._ranges[i].cloneContents());                                                // 3195
            }                                                                                                          // 3196
            html = container.innerHTML;                                                                                // 3197
        }                                                                                                              // 3198
        return html;                                                                                                   // 3199
    };                                                                                                                 // 3200
                                                                                                                       // 3201
    function inspect(sel) {                                                                                            // 3202
        var rangeInspects = [];                                                                                        // 3203
        var anchor = new DomPosition(sel.anchorNode, sel.anchorOffset);                                                // 3204
        var focus = new DomPosition(sel.focusNode, sel.focusOffset);                                                   // 3205
        var name = (typeof sel.getName == "function") ? sel.getName() : "Selection";                                   // 3206
                                                                                                                       // 3207
        if (typeof sel.rangeCount != "undefined") {                                                                    // 3208
            for (var i = 0, len = sel.rangeCount; i < len; ++i) {                                                      // 3209
                rangeInspects[i] = DomRange.inspect(sel.getRangeAt(i));                                                // 3210
            }                                                                                                          // 3211
        }                                                                                                              // 3212
        return "[" + name + "(Ranges: " + rangeInspects.join(", ") +                                                   // 3213
                ")(anchor: " + anchor.inspect() + ", focus: " + focus.inspect() + "]";                                 // 3214
                                                                                                                       // 3215
    }                                                                                                                  // 3216
                                                                                                                       // 3217
    selProto.getName = function() {                                                                                    // 3218
        return "WrappedSelection";                                                                                     // 3219
    };                                                                                                                 // 3220
                                                                                                                       // 3221
    selProto.inspect = function() {                                                                                    // 3222
        return inspect(this);                                                                                          // 3223
    };                                                                                                                 // 3224
                                                                                                                       // 3225
    selProto.detach = function() {                                                                                     // 3226
        this.win[windowPropertyName] = null;                                                                           // 3227
        this.win = this.anchorNode = this.focusNode = null;                                                            // 3228
    };                                                                                                                 // 3229
                                                                                                                       // 3230
    WrappedSelection.inspect = inspect;                                                                                // 3231
                                                                                                                       // 3232
    api.Selection = WrappedSelection;                                                                                  // 3233
                                                                                                                       // 3234
    api.selectionPrototype = selProto;                                                                                 // 3235
                                                                                                                       // 3236
    api.addCreateMissingNativeApiListener(function(win) {                                                              // 3237
        if (typeof win.getSelection == "undefined") {                                                                  // 3238
            win.getSelection = function() {                                                                            // 3239
                return api.getSelection(this);                                                                         // 3240
            };                                                                                                         // 3241
        }                                                                                                              // 3242
        win = null;                                                                                                    // 3243
    });                                                                                                                // 3244
});                                                                                                                    // 3245
/*                                                                                                                     // 3246
	Base.js, version 1.1a                                                                                                 // 3247
	Copyright 2006-2010, Dean Edwards                                                                                     // 3248
	License: http://www.opensource.org/licenses/mit-license.php                                                           // 3249
*/                                                                                                                     // 3250
                                                                                                                       // 3251
var Base = function() {                                                                                                // 3252
	// dummy                                                                                                              // 3253
};                                                                                                                     // 3254
                                                                                                                       // 3255
Base.extend = function(_instance, _static) { // subclass                                                               // 3256
	var extend = Base.prototype.extend;                                                                                   // 3257
	                                                                                                                      // 3258
	// build the prototype                                                                                                // 3259
	Base._prototyping = true;                                                                                             // 3260
	var proto = new this;                                                                                                 // 3261
	extend.call(proto, _instance);                                                                                        // 3262
  proto.base = function() {                                                                                            // 3263
    // call this method from any other method to invoke that method's ancestor                                         // 3264
  };                                                                                                                   // 3265
	delete Base._prototyping;                                                                                             // 3266
	                                                                                                                      // 3267
	// create the wrapper for the constructor function                                                                    // 3268
	//var constructor = proto.constructor.valueOf(); //-dean                                                              // 3269
	var constructor = proto.constructor;                                                                                  // 3270
	var klass = proto.constructor = function() {                                                                          // 3271
		if (!Base._prototyping) {                                                                                            // 3272
			if (this._constructing || this.constructor == klass) { // instantiation                                             // 3273
				this._constructing = true;                                                                                         // 3274
				constructor.apply(this, arguments);                                                                                // 3275
				delete this._constructing;                                                                                         // 3276
			} else if (arguments[0] != null) { // casting                                                                       // 3277
				return (arguments[0].extend || extend).call(arguments[0], proto);                                                  // 3278
			}                                                                                                                   // 3279
		}                                                                                                                    // 3280
	};                                                                                                                    // 3281
	                                                                                                                      // 3282
	// build the class interface                                                                                          // 3283
	klass.ancestor = this;                                                                                                // 3284
	klass.extend = this.extend;                                                                                           // 3285
	klass.forEach = this.forEach;                                                                                         // 3286
	klass.implement = this.implement;                                                                                     // 3287
	klass.prototype = proto;                                                                                              // 3288
	klass.toString = this.toString;                                                                                       // 3289
	klass.valueOf = function(type) {                                                                                      // 3290
		//return (type == "object") ? klass : constructor; //-dean                                                           // 3291
		return (type == "object") ? klass : constructor.valueOf();                                                           // 3292
	};                                                                                                                    // 3293
	extend.call(klass, _static);                                                                                          // 3294
	// class initialisation                                                                                               // 3295
	if (typeof klass.init == "function") klass.init();                                                                    // 3296
	return klass;                                                                                                         // 3297
};                                                                                                                     // 3298
                                                                                                                       // 3299
Base.prototype = {	                                                                                                    // 3300
	extend: function(source, value) {                                                                                     // 3301
		if (arguments.length > 1) { // extending with a name/value pair                                                      // 3302
			var ancestor = this[source];                                                                                        // 3303
			if (ancestor && (typeof value == "function") && // overriding a method?                                             // 3304
				// the valueOf() comparison is to avoid circular references                                                        // 3305
				(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&                                                    // 3306
				/\bbase\b/.test(value)) {                                                                                          // 3307
				// get the underlying method                                                                                       // 3308
				var method = value.valueOf();                                                                                      // 3309
				// override                                                                                                        // 3310
				value = function() {                                                                                               // 3311
					var previous = this.base || Base.prototype.base;                                                                  // 3312
					this.base = ancestor;                                                                                             // 3313
					var returnValue = method.apply(this, arguments);                                                                  // 3314
					this.base = previous;                                                                                             // 3315
					return returnValue;                                                                                               // 3316
				};                                                                                                                 // 3317
				// point to the underlying method                                                                                  // 3318
				value.valueOf = function(type) {                                                                                   // 3319
					return (type == "object") ? value : method;                                                                       // 3320
				};                                                                                                                 // 3321
				value.toString = Base.toString;                                                                                    // 3322
			}                                                                                                                   // 3323
			this[source] = value;                                                                                               // 3324
		} else if (source) { // extending with an object literal                                                             // 3325
			var extend = Base.prototype.extend;                                                                                 // 3326
			// if this object has a customised extend method then use it                                                        // 3327
			if (!Base._prototyping && typeof this != "function") {                                                              // 3328
				extend = this.extend || extend;                                                                                    // 3329
			}                                                                                                                   // 3330
			var proto = {toSource: null};                                                                                       // 3331
			// do the "toString" and other methods manually                                                                     // 3332
			var hidden = ["constructor", "toString", "valueOf"];                                                                // 3333
			// if we are prototyping then include the constructor                                                               // 3334
			var i = Base._prototyping ? 0 : 1;                                                                                  // 3335
			while (key = hidden[i++]) {                                                                                         // 3336
				if (source[key] != proto[key]) {                                                                                   // 3337
					extend.call(this, key, source[key]);                                                                              // 3338
                                                                                                                       // 3339
				}                                                                                                                  // 3340
			}                                                                                                                   // 3341
			// copy each of the source object's properties to this object                                                       // 3342
			for (var key in source) {                                                                                           // 3343
				if (!proto[key]) extend.call(this, key, source[key]);                                                              // 3344
			}                                                                                                                   // 3345
		}                                                                                                                    // 3346
		return this;                                                                                                         // 3347
	}                                                                                                                     // 3348
};                                                                                                                     // 3349
                                                                                                                       // 3350
// initialise                                                                                                          // 3351
Base = Base.extend({                                                                                                   // 3352
	constructor: function() {                                                                                             // 3353
		this.extend(arguments[0]);                                                                                           // 3354
	}                                                                                                                     // 3355
}, {                                                                                                                   // 3356
	ancestor: Object,                                                                                                     // 3357
	version: "1.1",                                                                                                       // 3358
	                                                                                                                      // 3359
	forEach: function(object, block, context) {                                                                           // 3360
		for (var key in object) {                                                                                            // 3361
			if (this.prototype[key] === undefined) {                                                                            // 3362
				block.call(context, object[key], key, object);                                                                     // 3363
			}                                                                                                                   // 3364
		}                                                                                                                    // 3365
	},                                                                                                                    // 3366
		                                                                                                                     // 3367
	implement: function() {                                                                                               // 3368
		for (var i = 0; i < arguments.length; i++) {                                                                         // 3369
			if (typeof arguments[i] == "function") {                                                                            // 3370
				// if it's a function, call it                                                                                     // 3371
				arguments[i](this.prototype);                                                                                      // 3372
			} else {                                                                                                            // 3373
				// add the interface using the extend method                                                                       // 3374
				this.prototype.extend(arguments[i]);                                                                               // 3375
			}                                                                                                                   // 3376
		}                                                                                                                    // 3377
		return this;                                                                                                         // 3378
	},                                                                                                                    // 3379
	                                                                                                                      // 3380
	toString: function() {                                                                                                // 3381
		return String(this.valueOf());                                                                                       // 3382
	}                                                                                                                     // 3383
});/**                                                                                                                 // 3384
 * Detect browser support for specific features                                                                        // 3385
 */                                                                                                                    // 3386
wysihtml5.browser = (function() {                                                                                      // 3387
  var userAgent   = navigator.userAgent,                                                                               // 3388
      testElement = document.createElement("div"),                                                                     // 3389
      // Browser sniffing is unfortunately needed since some behaviors are impossible to feature detect                // 3390
      isIE        = userAgent.indexOf("MSIE")         !== -1 && userAgent.indexOf("Opera") === -1,                     // 3391
      isGecko     = userAgent.indexOf("Gecko")        !== -1 && userAgent.indexOf("KHTML") === -1,                     // 3392
      isWebKit    = userAgent.indexOf("AppleWebKit/") !== -1,                                                          // 3393
      isChrome    = userAgent.indexOf("Chrome/")      !== -1,                                                          // 3394
      isOpera     = userAgent.indexOf("Opera/")       !== -1;                                                          // 3395
                                                                                                                       // 3396
  function iosVersion(userAgent) {                                                                                     // 3397
    return ((/ipad|iphone|ipod/.test(userAgent) && userAgent.match(/ os (\d+).+? like mac os x/)) || [, 0])[1];        // 3398
  }                                                                                                                    // 3399
                                                                                                                       // 3400
  return {                                                                                                             // 3401
    // Static variable needed, publicly accessible, to be able override it in unit tests                               // 3402
    USER_AGENT: userAgent,                                                                                             // 3403
                                                                                                                       // 3404
    /**                                                                                                                // 3405
     * Exclude browsers that are not capable of displaying and handling                                                // 3406
     * contentEditable as desired:                                                                                     // 3407
     *    - iPhone, iPad (tested iOS 4.2.2) and Android (tested 2.2) refuse to make contentEditables focusable         // 3408
     *    - IE < 8 create invalid markup and crash randomly from time to time                                          // 3409
     *                                                                                                                 // 3410
     * @return {Boolean}                                                                                               // 3411
     */                                                                                                                // 3412
    supported: function() {                                                                                            // 3413
      var userAgent                   = this.USER_AGENT.toLowerCase(),                                                 // 3414
          // Essential for making html elements editable                                                               // 3415
          hasContentEditableSupport   = "contentEditable" in testElement,                                              // 3416
          // Following methods are needed in order to interact with the contentEditable area                           // 3417
          hasEditingApiSupport        = document.execCommand && document.queryCommandSupported && document.queryCommandState,
          // document selector apis are only supported by IE 8+, Safari 4+, Chrome and Firefox 3.5+                    // 3419
          hasQuerySelectorSupport     = document.querySelector && document.querySelectorAll,                           // 3420
          // contentEditable is unusable in mobile browsers (tested iOS 4.2.2, Android 2.2, Opera Mobile, WebOS 3.05)  // 3421
          isIncompatibleMobileBrowser = (this.isIos() && iosVersion(userAgent) < 5) || userAgent.indexOf("opera mobi") !== -1 || userAgent.indexOf("hpwos/") !== -1;
                                                                                                                       // 3423
      return hasContentEditableSupport                                                                                 // 3424
        && hasEditingApiSupport                                                                                        // 3425
        && hasQuerySelectorSupport                                                                                     // 3426
        && !isIncompatibleMobileBrowser;                                                                               // 3427
    },                                                                                                                 // 3428
                                                                                                                       // 3429
    isTouchDevice: function() {                                                                                        // 3430
      return this.supportsEvent("touchmove");                                                                          // 3431
    },                                                                                                                 // 3432
                                                                                                                       // 3433
    isIos: function() {                                                                                                // 3434
      var userAgent = this.USER_AGENT.toLowerCase();                                                                   // 3435
      return userAgent.indexOf("webkit") !== -1 && userAgent.indexOf("mobile") !== -1;                                 // 3436
    },                                                                                                                 // 3437
                                                                                                                       // 3438
    /**                                                                                                                // 3439
     * Whether the browser supports sandboxed iframes                                                                  // 3440
     * Currently only IE 6+ offers such feature <iframe security="restricted">                                         // 3441
     *                                                                                                                 // 3442
     * http://msdn.microsoft.com/en-us/library/ms534622(v=vs.85).aspx                                                  // 3443
     * http://blogs.msdn.com/b/ie/archive/2008/01/18/using-frames-more-securely.aspx                                   // 3444
     *                                                                                                                 // 3445
     * HTML5 sandboxed iframes are still buggy and their DOM is not reachable from the outside (except when using postMessage)
     */                                                                                                                // 3447
    supportsSandboxedIframes: function() {                                                                             // 3448
      return isIE;                                                                                                     // 3449
    },                                                                                                                 // 3450
                                                                                                                       // 3451
    /**                                                                                                                // 3452
     * IE6+7 throw a mixed content warning when the src of an iframe                                                   // 3453
     * is empty/unset or about:blank                                                                                   // 3454
     * window.querySelector is implemented as of IE8                                                                   // 3455
     */                                                                                                                // 3456
    throwsMixedContentWarningWhenIframeSrcIsEmpty: function() {                                                        // 3457
      return !("querySelector" in document);                                                                           // 3458
    },                                                                                                                 // 3459
                                                                                                                       // 3460
    /**                                                                                                                // 3461
     * Whether the caret is correctly displayed in contentEditable elements                                            // 3462
     * Firefox sometimes shows a huge caret in the beginning after focusing                                            // 3463
     */                                                                                                                // 3464
    displaysCaretInEmptyContentEditableCorrectly: function() {                                                         // 3465
      return !isGecko;                                                                                                 // 3466
    },                                                                                                                 // 3467
                                                                                                                       // 3468
    /**                                                                                                                // 3469
     * Opera and IE are the only browsers who offer the css value                                                      // 3470
     * in the original unit, thx to the currentStyle object                                                            // 3471
     * All other browsers provide the computed style in px via window.getComputedStyle                                 // 3472
     */                                                                                                                // 3473
    hasCurrentStyleProperty: function() {                                                                              // 3474
      return "currentStyle" in testElement;                                                                            // 3475
    },                                                                                                                 // 3476
                                                                                                                       // 3477
    /**                                                                                                                // 3478
     * Whether the browser inserts a <br> when pressing enter in a contentEditable element                             // 3479
     */                                                                                                                // 3480
    insertsLineBreaksOnReturn: function() {                                                                            // 3481
      return isGecko;                                                                                                  // 3482
    },                                                                                                                 // 3483
                                                                                                                       // 3484
    supportsPlaceholderAttributeOn: function(element) {                                                                // 3485
      return "placeholder" in element;                                                                                 // 3486
    },                                                                                                                 // 3487
                                                                                                                       // 3488
    supportsEvent: function(eventName) {                                                                               // 3489
      return "on" + eventName in testElement || (function() {                                                          // 3490
        testElement.setAttribute("on" + eventName, "return;");                                                         // 3491
        return typeof(testElement["on" + eventName]) === "function";                                                   // 3492
      })();                                                                                                            // 3493
    },                                                                                                                 // 3494
                                                                                                                       // 3495
    /**                                                                                                                // 3496
     * Opera doesn't correctly fire focus/blur events when clicking in- and outside of iframe                          // 3497
     */                                                                                                                // 3498
    supportsEventsInIframeCorrectly: function() {                                                                      // 3499
      return !isOpera;                                                                                                 // 3500
    },                                                                                                                 // 3501
                                                                                                                       // 3502
    /**                                                                                                                // 3503
     * Chrome & Safari only fire the ondrop/ondragend/... events when the ondragover event is cancelled                // 3504
     * with event.preventDefault                                                                                       // 3505
     * Firefox 3.6 fires those events anyway, but the mozilla doc says that the dragover/dragenter event needs         // 3506
     * to be cancelled                                                                                                 // 3507
     */                                                                                                                // 3508
    firesOnDropOnlyWhenOnDragOverIsCancelled: function() {                                                             // 3509
      return isWebKit || isGecko;                                                                                      // 3510
    },                                                                                                                 // 3511
                                                                                                                       // 3512
    /**                                                                                                                // 3513
     * Whether the browser supports the event.dataTransfer property in a proper way                                    // 3514
     */                                                                                                                // 3515
    supportsDataTransfer: function() {                                                                                 // 3516
      try {                                                                                                            // 3517
        // Firefox doesn't support dataTransfer in a safe way, it doesn't strip script code in the html payload (like Chrome does)
        return isWebKit && (window.Clipboard || window.DataTransfer).prototype.getData;                                // 3519
      } catch(e) {                                                                                                     // 3520
        return false;                                                                                                  // 3521
      }                                                                                                                // 3522
    },                                                                                                                 // 3523
                                                                                                                       // 3524
    /**                                                                                                                // 3525
     * Everything below IE9 doesn't know how to treat HTML5 tags                                                       // 3526
     *                                                                                                                 // 3527
     * @param {Object} context The document object on which to check HTML5 support                                     // 3528
     *                                                                                                                 // 3529
     * @example                                                                                                        // 3530
     *    wysihtml5.browser.supportsHTML5Tags(document);                                                               // 3531
     */                                                                                                                // 3532
    supportsHTML5Tags: function(context) {                                                                             // 3533
      var element = context.createElement("div"),                                                                      // 3534
          html5   = "<article>foo</article>";                                                                          // 3535
      element.innerHTML = html5;                                                                                       // 3536
      return element.innerHTML.toLowerCase() === html5;                                                                // 3537
    },                                                                                                                 // 3538
                                                                                                                       // 3539
    /**                                                                                                                // 3540
     * Checks whether a document supports a certain queryCommand                                                       // 3541
     * In particular, Opera needs a reference to a document that has a contentEditable in it's dom tree                // 3542
     * in oder to report correct results                                                                               // 3543
     *                                                                                                                 // 3544
     * @param {Object} doc Document object on which to check for a query command                                       // 3545
     * @param {String} command The query command to check for                                                          // 3546
     * @return {Boolean}                                                                                               // 3547
     *                                                                                                                 // 3548
     * @example                                                                                                        // 3549
     *    wysihtml5.browser.supportsCommand(document, "bold");                                                         // 3550
     */                                                                                                                // 3551
    supportsCommand: (function() {                                                                                     // 3552
      // Following commands are supported but contain bugs in some browsers                                            // 3553
      var buggyCommands = {                                                                                            // 3554
        // formatBlock fails with some tags (eg. <blockquote>)                                                         // 3555
        "formatBlock":          isIE,                                                                                  // 3556
         // When inserting unordered or ordered lists in Firefox, Chrome or Safari, the current selection or line gets // 3557
         // converted into a list (<ul><li>...</li></ul>, <ol><li>...</li></ol>)                                       // 3558
         // IE and Opera act a bit different here as they convert the entire content of the current block element into a list
        "insertUnorderedList":  isIE || isOpera || isWebKit,                                                           // 3560
        "insertOrderedList":    isIE || isOpera || isWebKit                                                            // 3561
      };                                                                                                               // 3562
                                                                                                                       // 3563
      // Firefox throws errors for queryCommandSupported, so we have to build up our own object of supported commands  // 3564
      var supported = {                                                                                                // 3565
        "insertHTML": isGecko                                                                                          // 3566
      };                                                                                                               // 3567
                                                                                                                       // 3568
      return function(doc, command) {                                                                                  // 3569
        var isBuggy = buggyCommands[command];                                                                          // 3570
        if (!isBuggy) {                                                                                                // 3571
          // Firefox throws errors when invoking queryCommandSupported or queryCommandEnabled                          // 3572
          try {                                                                                                        // 3573
            return doc.queryCommandSupported(command);                                                                 // 3574
          } catch(e1) {}                                                                                               // 3575
                                                                                                                       // 3576
          try {                                                                                                        // 3577
            return doc.queryCommandEnabled(command);                                                                   // 3578
          } catch(e2) {                                                                                                // 3579
            return !!supported[command];                                                                               // 3580
          }                                                                                                            // 3581
        }                                                                                                              // 3582
        return false;                                                                                                  // 3583
      };                                                                                                               // 3584
    })(),                                                                                                              // 3585
                                                                                                                       // 3586
    /**                                                                                                                // 3587
     * IE: URLs starting with:                                                                                         // 3588
     *    www., http://, https://, ftp://, gopher://, mailto:, new:, snews:, telnet:, wasis:, file://,                 // 3589
     *    nntp://, newsrc:, ldap://, ldaps://, outlook:, mic:// and url:                                               // 3590
     * will automatically be auto-linked when either the user inserts them via copy&paste or presses the               // 3591
     * space bar when the caret is directly after such an url.                                                         // 3592
     * This behavior cannot easily be avoided in IE < 9 since the logic is hardcoded in the mshtml.dll                 // 3593
     * (related blog post on msdn                                                                                      // 3594
     * http://blogs.msdn.com/b/ieinternals/archive/2009/09/17/prevent-automatic-hyperlinking-in-contenteditable-html.aspx).
     */                                                                                                                // 3596
    doesAutoLinkingInContentEditable: function() {                                                                     // 3597
      return isIE;                                                                                                     // 3598
    },                                                                                                                 // 3599
                                                                                                                       // 3600
    /**                                                                                                                // 3601
     * As stated above, IE auto links urls typed into contentEditable elements                                         // 3602
     * Since IE9 it's possible to prevent this behavior                                                                // 3603
     */                                                                                                                // 3604
    canDisableAutoLinking: function() {                                                                                // 3605
      return this.supportsCommand(document, "AutoUrlDetect");                                                          // 3606
    },                                                                                                                 // 3607
                                                                                                                       // 3608
    /**                                                                                                                // 3609
     * IE leaves an empty paragraph in the contentEditable element after clearing it                                   // 3610
     * Chrome/Safari sometimes an empty <div>                                                                          // 3611
     */                                                                                                                // 3612
    clearsContentEditableCorrectly: function() {                                                                       // 3613
      return isGecko || isOpera || isWebKit;                                                                           // 3614
    },                                                                                                                 // 3615
                                                                                                                       // 3616
    /**                                                                                                                // 3617
     * IE gives wrong results for getAttribute                                                                         // 3618
     */                                                                                                                // 3619
    supportsGetAttributeCorrectly: function() {                                                                        // 3620
      var td = document.createElement("td");                                                                           // 3621
      return td.getAttribute("rowspan") != "1";                                                                        // 3622
    },                                                                                                                 // 3623
                                                                                                                       // 3624
    /**                                                                                                                // 3625
     * When clicking on images in IE, Opera and Firefox, they are selected, which makes it easy to interact with them. // 3626
     * Chrome and Safari both don't support this                                                                       // 3627
     */                                                                                                                // 3628
    canSelectImagesInContentEditable: function() {                                                                     // 3629
      return isGecko || isIE || isOpera;                                                                               // 3630
    },                                                                                                                 // 3631
                                                                                                                       // 3632
    /**                                                                                                                // 3633
     * When the caret is in an empty list (<ul><li>|</li></ul>) which is the first child in an contentEditable container
     * pressing backspace doesn't remove the entire list as done in other browsers                                     // 3635
     */                                                                                                                // 3636
    clearsListsInContentEditableCorrectly: function() {                                                                // 3637
      return isGecko || isIE || isWebKit;                                                                              // 3638
    },                                                                                                                 // 3639
                                                                                                                       // 3640
    /**                                                                                                                // 3641
     * All browsers except Safari and Chrome automatically scroll the range/caret position into view                   // 3642
     */                                                                                                                // 3643
    autoScrollsToCaret: function() {                                                                                   // 3644
      return !isWebKit;                                                                                                // 3645
    },                                                                                                                 // 3646
                                                                                                                       // 3647
    /**                                                                                                                // 3648
     * Check whether the browser automatically closes tags that don't need to be opened                                // 3649
     */                                                                                                                // 3650
    autoClosesUnclosedTags: function() {                                                                               // 3651
      var clonedTestElement = testElement.cloneNode(false),                                                            // 3652
          returnValue,                                                                                                 // 3653
          innerHTML;                                                                                                   // 3654
                                                                                                                       // 3655
      clonedTestElement.innerHTML = "<p><div></div>";                                                                  // 3656
      innerHTML                   = clonedTestElement.innerHTML.toLowerCase();                                         // 3657
      returnValue                 = innerHTML === "<p></p><div></div>" || innerHTML === "<p><div></div></p>";          // 3658
                                                                                                                       // 3659
      // Cache result by overwriting current function                                                                  // 3660
      this.autoClosesUnclosedTags = function() { return returnValue; };                                                // 3661
                                                                                                                       // 3662
      return returnValue;                                                                                              // 3663
    },                                                                                                                 // 3664
                                                                                                                       // 3665
    /**                                                                                                                // 3666
     * Whether the browser supports the native document.getElementsByClassName which returns live NodeLists            // 3667
     */                                                                                                                // 3668
    supportsNativeGetElementsByClassName: function() {                                                                 // 3669
      return String(document.getElementsByClassName).indexOf("[native code]") !== -1;                                  // 3670
    },                                                                                                                 // 3671
                                                                                                                       // 3672
    /**                                                                                                                // 3673
     * As of now (19.04.2011) only supported by Firefox 4 and Chrome                                                   // 3674
     * See https://developer.mozilla.org/en/DOM/Selection/modify                                                       // 3675
     */                                                                                                                // 3676
    supportsSelectionModify: function() {                                                                              // 3677
      return "getSelection" in window && "modify" in window.getSelection();                                            // 3678
    },                                                                                                                 // 3679
                                                                                                                       // 3680
    /**                                                                                                                // 3681
     * Whether the browser supports the classList object for fast className manipulation                               // 3682
     * See https://developer.mozilla.org/en/DOM/element.classList                                                      // 3683
     */                                                                                                                // 3684
    supportsClassList: function() {                                                                                    // 3685
      return "classList" in testElement;                                                                               // 3686
    },                                                                                                                 // 3687
                                                                                                                       // 3688
    /**                                                                                                                // 3689
     * Opera needs a white space after a <br> in order to position the caret correctly                                 // 3690
     */                                                                                                                // 3691
    needsSpaceAfterLineBreak: function() {                                                                             // 3692
      return isOpera;                                                                                                  // 3693
    },                                                                                                                 // 3694
                                                                                                                       // 3695
    /**                                                                                                                // 3696
     * Whether the browser supports the speech api on the given element                                                // 3697
     * See http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/                                         // 3698
     *                                                                                                                 // 3699
     * @example                                                                                                        // 3700
     *    var input = document.createElement("input");                                                                 // 3701
     *    if (wysihtml5.browser.supportsSpeechApiOn(input)) {                                                          // 3702
     *      // ...                                                                                                     // 3703
     *    }                                                                                                            // 3704
     */                                                                                                                // 3705
    supportsSpeechApiOn: function(input) {                                                                             // 3706
      var chromeVersion = userAgent.match(/Chrome\/(\d+)/) || [, 0];                                                   // 3707
      return chromeVersion[1] >= 11 && ("onwebkitspeechchange" in input || "speech" in input);                         // 3708
    },                                                                                                                 // 3709
                                                                                                                       // 3710
    /**                                                                                                                // 3711
     * IE9 crashes when setting a getter via Object.defineProperty on XMLHttpRequest or XDomainRequest                 // 3712
     * See https://connect.microsoft.com/ie/feedback/details/650112                                                    // 3713
     * or try the POC http://tifftiff.de/ie9_crash/                                                                    // 3714
     */                                                                                                                // 3715
    crashesWhenDefineProperty: function(property) {                                                                    // 3716
      return isIE && (property === "XMLHttpRequest" || property === "XDomainRequest");                                 // 3717
    },                                                                                                                 // 3718
                                                                                                                       // 3719
    /**                                                                                                                // 3720
     * IE is the only browser who fires the "focus" event not immediately when .focus() is called on an element        // 3721
     */                                                                                                                // 3722
    doesAsyncFocus: function() {                                                                                       // 3723
      return isIE;                                                                                                     // 3724
    },                                                                                                                 // 3725
                                                                                                                       // 3726
    /**                                                                                                                // 3727
     * In IE it's impssible for the user and for the selection library to set the caret after an <img> when it's the lastChild in the document
     */                                                                                                                // 3729
    hasProblemsSettingCaretAfterImg: function() {                                                                      // 3730
      return isIE;                                                                                                     // 3731
    },                                                                                                                 // 3732
                                                                                                                       // 3733
    hasUndoInContextMenu: function() {                                                                                 // 3734
      return isGecko || isChrome || isOpera;                                                                           // 3735
    }                                                                                                                  // 3736
  };                                                                                                                   // 3737
})();wysihtml5.lang.array = function(arr) {                                                                            // 3738
  return {                                                                                                             // 3739
    /**                                                                                                                // 3740
     * Check whether a given object exists in an array                                                                 // 3741
     *                                                                                                                 // 3742
     * @example                                                                                                        // 3743
     *    wysihtml5.lang.array([1, 2]).contains(1);                                                                    // 3744
     *    // => true                                                                                                   // 3745
     */                                                                                                                // 3746
    contains: function(needle) {                                                                                       // 3747
      if (arr.indexOf) {                                                                                               // 3748
        return arr.indexOf(needle) !== -1;                                                                             // 3749
      } else {                                                                                                         // 3750
        for (var i=0, length=arr.length; i<length; i++) {                                                              // 3751
          if (arr[i] === needle) { return true; }                                                                      // 3752
        }                                                                                                              // 3753
        return false;                                                                                                  // 3754
      }                                                                                                                // 3755
    },                                                                                                                 // 3756
                                                                                                                       // 3757
    /**                                                                                                                // 3758
     * Substract one array from another                                                                                // 3759
     *                                                                                                                 // 3760
     * @example                                                                                                        // 3761
     *    wysihtml5.lang.array([1, 2, 3, 4]).without([3, 4]);                                                          // 3762
     *    // => [1, 2]                                                                                                 // 3763
     */                                                                                                                // 3764
    without: function(arrayToSubstract) {                                                                              // 3765
      arrayToSubstract = wysihtml5.lang.array(arrayToSubstract);                                                       // 3766
      var newArr  = [],                                                                                                // 3767
          i       = 0,                                                                                                 // 3768
          length  = arr.length;                                                                                        // 3769
      for (; i<length; i++) {                                                                                          // 3770
        if (!arrayToSubstract.contains(arr[i])) {                                                                      // 3771
          newArr.push(arr[i]);                                                                                         // 3772
        }                                                                                                              // 3773
      }                                                                                                                // 3774
      return newArr;                                                                                                   // 3775
    },                                                                                                                 // 3776
                                                                                                                       // 3777
    /**                                                                                                                // 3778
     * Return a clean native array                                                                                     // 3779
     *                                                                                                                 // 3780
     * Following will convert a Live NodeList to a proper Array                                                        // 3781
     * @example                                                                                                        // 3782
     *    var childNodes = wysihtml5.lang.array(document.body.childNodes).get();                                       // 3783
     */                                                                                                                // 3784
    get: function() {                                                                                                  // 3785
      var i        = 0,                                                                                                // 3786
          length   = arr.length,                                                                                       // 3787
          newArray = [];                                                                                               // 3788
      for (; i<length; i++) {                                                                                          // 3789
        newArray.push(arr[i]);                                                                                         // 3790
      }                                                                                                                // 3791
      return newArray;                                                                                                 // 3792
    }                                                                                                                  // 3793
  };                                                                                                                   // 3794
};wysihtml5.lang.Dispatcher = Base.extend(                                                                             // 3795
  /** @scope wysihtml5.lang.Dialog.prototype */ {                                                                      // 3796
  observe: function(eventName, handler) {                                                                              // 3797
    this.events = this.events || {};                                                                                   // 3798
    this.events[eventName] = this.events[eventName] || [];                                                             // 3799
    this.events[eventName].push(handler);                                                                              // 3800
    return this;                                                                                                       // 3801
  },                                                                                                                   // 3802
                                                                                                                       // 3803
  on: function() {                                                                                                     // 3804
    return this.observe.apply(this, wysihtml5.lang.array(arguments).get());                                            // 3805
  },                                                                                                                   // 3806
                                                                                                                       // 3807
  fire: function(eventName, payload) {                                                                                 // 3808
    this.events = this.events || {};                                                                                   // 3809
    var handlers = this.events[eventName] || [],                                                                       // 3810
        i        = 0;                                                                                                  // 3811
    for (; i<handlers.length; i++) {                                                                                   // 3812
      handlers[i].call(this, payload);                                                                                 // 3813
    }                                                                                                                  // 3814
    return this;                                                                                                       // 3815
  },                                                                                                                   // 3816
                                                                                                                       // 3817
  stopObserving: function(eventName, handler) {                                                                        // 3818
    this.events = this.events || {};                                                                                   // 3819
    var i = 0,                                                                                                         // 3820
        handlers,                                                                                                      // 3821
        newHandlers;                                                                                                   // 3822
    if (eventName) {                                                                                                   // 3823
      handlers    = this.events[eventName] || [],                                                                      // 3824
      newHandlers = [];                                                                                                // 3825
      for (; i<handlers.length; i++) {                                                                                 // 3826
        if (handlers[i] !== handler && handler) {                                                                      // 3827
          newHandlers.push(handlers[i]);                                                                               // 3828
        }                                                                                                              // 3829
      }                                                                                                                // 3830
      this.events[eventName] = newHandlers;                                                                            // 3831
    } else {                                                                                                           // 3832
      // Clean up all events                                                                                           // 3833
      this.events = {};                                                                                                // 3834
    }                                                                                                                  // 3835
    return this;                                                                                                       // 3836
  }                                                                                                                    // 3837
});wysihtml5.lang.object = function(obj) {                                                                             // 3838
  return {                                                                                                             // 3839
    /**                                                                                                                // 3840
     * @example                                                                                                        // 3841
     *    wysihtml5.lang.object({ foo: 1, bar: 1 }).merge({ bar: 2, baz: 3 }).get();                                   // 3842
     *    // => { foo: 1, bar: 2, baz: 3 }                                                                             // 3843
     */                                                                                                                // 3844
    merge: function(otherObj) {                                                                                        // 3845
      for (var i in otherObj) {                                                                                        // 3846
        obj[i] = otherObj[i];                                                                                          // 3847
      }                                                                                                                // 3848
      return this;                                                                                                     // 3849
    },                                                                                                                 // 3850
                                                                                                                       // 3851
    get: function() {                                                                                                  // 3852
      return obj;                                                                                                      // 3853
    },                                                                                                                 // 3854
                                                                                                                       // 3855
    /**                                                                                                                // 3856
     * @example                                                                                                        // 3857
     *    wysihtml5.lang.object({ foo: 1 }).clone();                                                                   // 3858
     *    // => { foo: 1 }                                                                                             // 3859
     */                                                                                                                // 3860
    clone: function() {                                                                                                // 3861
      var newObj = {},                                                                                                 // 3862
          i;                                                                                                           // 3863
      for (i in obj) {                                                                                                 // 3864
        newObj[i] = obj[i];                                                                                            // 3865
      }                                                                                                                // 3866
      return newObj;                                                                                                   // 3867
    },                                                                                                                 // 3868
                                                                                                                       // 3869
    /**                                                                                                                // 3870
     * @example                                                                                                        // 3871
     *    wysihtml5.lang.object([]).isArray();                                                                         // 3872
     *    // => true                                                                                                   // 3873
     */                                                                                                                // 3874
    isArray: function() {                                                                                              // 3875
      return Object.prototype.toString.call(obj) === "[object Array]";                                                 // 3876
    }                                                                                                                  // 3877
  };                                                                                                                   // 3878
};(function() {                                                                                                        // 3879
  var WHITE_SPACE_START = /^\s+/,                                                                                      // 3880
      WHITE_SPACE_END   = /\s+$/;                                                                                      // 3881
  wysihtml5.lang.string = function(str) {                                                                              // 3882
    str = String(str);                                                                                                 // 3883
    return {                                                                                                           // 3884
      /**                                                                                                              // 3885
       * @example                                                                                                      // 3886
       *    wysihtml5.lang.string("   foo   ").trim();                                                                 // 3887
       *    // => "foo"                                                                                                // 3888
       */                                                                                                              // 3889
      trim: function() {                                                                                               // 3890
        return str.replace(WHITE_SPACE_START, "").replace(WHITE_SPACE_END, "");                                        // 3891
      },                                                                                                               // 3892
                                                                                                                       // 3893
      /**                                                                                                              // 3894
       * @example                                                                                                      // 3895
       *    wysihtml5.lang.string("Hello #{name}").interpolate({ name: "Christopher" });                               // 3896
       *    // => "Hello Christopher"                                                                                  // 3897
       */                                                                                                              // 3898
      interpolate: function(vars) {                                                                                    // 3899
        for (var i in vars) {                                                                                          // 3900
          str = this.replace("#{" + i + "}").by(vars[i]);                                                              // 3901
        }                                                                                                              // 3902
        return str;                                                                                                    // 3903
      },                                                                                                               // 3904
                                                                                                                       // 3905
      /**                                                                                                              // 3906
       * @example                                                                                                      // 3907
       *    wysihtml5.lang.string("Hello Tom").replace("Tom").with("Hans");                                            // 3908
       *    // => "Hello Hans"                                                                                         // 3909
       */                                                                                                              // 3910
      replace: function(search) {                                                                                      // 3911
        return {                                                                                                       // 3912
          by: function(replace) {                                                                                      // 3913
            return str.split(search).join(replace);                                                                    // 3914
          }                                                                                                            // 3915
        }                                                                                                              // 3916
      }                                                                                                                // 3917
    };                                                                                                                 // 3918
  };                                                                                                                   // 3919
})();/**                                                                                                               // 3920
 * Find urls in descendant text nodes of an element and auto-links them                                                // 3921
 * Inspired by http://james.padolsey.com/javascript/find-and-replace-text-with-javascript/                             // 3922
 *                                                                                                                     // 3923
 * @param {Element} element Container element in which to search for urls                                              // 3924
 *                                                                                                                     // 3925
 * @example                                                                                                            // 3926
 *    <div id="text-container">Please click here: www.google.com</div>                                                 // 3927
 *    <script>wysihtml5.dom.autoLink(document.getElementById("text-container"));</script>                              // 3928
 */                                                                                                                    // 3929
(function(wysihtml5) {                                                                                                 // 3930
  var /**                                                                                                              // 3931
       * Don't auto-link urls that are contained in the following elements:                                            // 3932
       */                                                                                                              // 3933
      IGNORE_URLS_IN        = wysihtml5.lang.array(["CODE", "PRE", "A", "SCRIPT", "HEAD", "TITLE", "STYLE"]),          // 3934
      /**                                                                                                              // 3935
       * revision 1:                                                                                                   // 3936
       *    /(\S+\.{1}[^\s\,\.\!]+)/g                                                                                  // 3937
       *                                                                                                               // 3938
       * revision 2:                                                                                                   // 3939
       *    /(\b(((https?|ftp):\/\/)|(www\.))[-A-Z0-9+&@#\/%?=~_|!:,.;\[\]]*[-A-Z0-9+&@#\/%=~_|])/gim                  // 3940
       *                                                                                                               // 3941
       * put this in the beginning if you don't wan't to match within a word                                           // 3942
       *    (^|[\>\(\{\[\s\>])                                                                                         // 3943
       */                                                                                                              // 3944
      URL_REG_EXP           = /((https?:\/\/|www\.)[^\s<]{3,})/gi,                                                     // 3945
      TRAILING_CHAR_REG_EXP = /([^\w\/\-](,?))$/i,                                                                     // 3946
      MAX_DISPLAY_LENGTH    = 100,                                                                                     // 3947
      BRACKETS              = { ")": "(", "]": "[", "}": "{" };                                                        // 3948
                                                                                                                       // 3949
  function autoLink(element) {                                                                                         // 3950
    if (_hasParentThatShouldBeIgnored(element)) {                                                                      // 3951
      return element;                                                                                                  // 3952
    }                                                                                                                  // 3953
                                                                                                                       // 3954
    if (element === element.ownerDocument.documentElement) {                                                           // 3955
      element = element.ownerDocument.body;                                                                            // 3956
    }                                                                                                                  // 3957
                                                                                                                       // 3958
    return _parseNode(element);                                                                                        // 3959
  }                                                                                                                    // 3960
                                                                                                                       // 3961
  /**                                                                                                                  // 3962
   * This is basically a rebuild of                                                                                    // 3963
   * the rails auto_link_urls text helper                                                                              // 3964
   */                                                                                                                  // 3965
  function _convertUrlsToLinks(str) {                                                                                  // 3966
    return str.replace(URL_REG_EXP, function(match, url) {                                                             // 3967
      var punctuation = (url.match(TRAILING_CHAR_REG_EXP) || [])[1] || "",                                             // 3968
          opening     = BRACKETS[punctuation];                                                                         // 3969
      url = url.replace(TRAILING_CHAR_REG_EXP, "");                                                                    // 3970
                                                                                                                       // 3971
      if (url.split(opening).length > url.split(punctuation).length) {                                                 // 3972
        url = url + punctuation;                                                                                       // 3973
        punctuation = "";                                                                                              // 3974
      }                                                                                                                // 3975
      var realUrl    = url,                                                                                            // 3976
          displayUrl = url;                                                                                            // 3977
      if (url.length > MAX_DISPLAY_LENGTH) {                                                                           // 3978
        displayUrl = displayUrl.substr(0, MAX_DISPLAY_LENGTH) + "...";                                                 // 3979
      }                                                                                                                // 3980
      // Add http prefix if necessary                                                                                  // 3981
      if (realUrl.substr(0, 4) === "www.") {                                                                           // 3982
        realUrl = "http://" + realUrl;                                                                                 // 3983
      }                                                                                                                // 3984
                                                                                                                       // 3985
      return '<a href="' + realUrl + '">' + displayUrl + '</a>' + punctuation;                                         // 3986
    });                                                                                                                // 3987
  }                                                                                                                    // 3988
                                                                                                                       // 3989
  /**                                                                                                                  // 3990
   * Creates or (if already cached) returns a temp element                                                             // 3991
   * for the given document object                                                                                     // 3992
   */                                                                                                                  // 3993
  function _getTempElement(context) {                                                                                  // 3994
    var tempElement = context._wysihtml5_tempElement;                                                                  // 3995
    if (!tempElement) {                                                                                                // 3996
      tempElement = context._wysihtml5_tempElement = context.createElement("div");                                     // 3997
    }                                                                                                                  // 3998
    return tempElement;                                                                                                // 3999
  }                                                                                                                    // 4000
                                                                                                                       // 4001
  /**                                                                                                                  // 4002
   * Replaces the original text nodes with the newly auto-linked dom tree                                              // 4003
   */                                                                                                                  // 4004
  function _wrapMatchesInNode(textNode) {                                                                              // 4005
    var parentNode  = textNode.parentNode,                                                                             // 4006
        tempElement = _getTempElement(parentNode.ownerDocument);                                                       // 4007
                                                                                                                       // 4008
    // We need to insert an empty/temporary <span /> to fix IE quirks                                                  // 4009
    // Elsewise IE would strip white space in the beginning                                                            // 4010
    tempElement.innerHTML = "<span></span>" + _convertUrlsToLinks(textNode.data);                                      // 4011
    tempElement.removeChild(tempElement.firstChild);                                                                   // 4012
                                                                                                                       // 4013
    while (tempElement.firstChild) {                                                                                   // 4014
      // inserts tempElement.firstChild before textNode                                                                // 4015
      parentNode.insertBefore(tempElement.firstChild, textNode);                                                       // 4016
    }                                                                                                                  // 4017
    parentNode.removeChild(textNode);                                                                                  // 4018
  }                                                                                                                    // 4019
                                                                                                                       // 4020
  function _hasParentThatShouldBeIgnored(node) {                                                                       // 4021
    var nodeName;                                                                                                      // 4022
    while (node.parentNode) {                                                                                          // 4023
      node = node.parentNode;                                                                                          // 4024
      nodeName = node.nodeName;                                                                                        // 4025
      if (IGNORE_URLS_IN.contains(nodeName)) {                                                                         // 4026
        return true;                                                                                                   // 4027
      } else if (nodeName === "body") {                                                                                // 4028
        return false;                                                                                                  // 4029
      }                                                                                                                // 4030
    }                                                                                                                  // 4031
    return false;                                                                                                      // 4032
  }                                                                                                                    // 4033
                                                                                                                       // 4034
  function _parseNode(element) {                                                                                       // 4035
    if (IGNORE_URLS_IN.contains(element.nodeName)) {                                                                   // 4036
      return;                                                                                                          // 4037
    }                                                                                                                  // 4038
                                                                                                                       // 4039
    if (element.nodeType === wysihtml5.TEXT_NODE && element.data.match(URL_REG_EXP)) {                                 // 4040
      _wrapMatchesInNode(element);                                                                                     // 4041
      return;                                                                                                          // 4042
    }                                                                                                                  // 4043
                                                                                                                       // 4044
    var childNodes        = wysihtml5.lang.array(element.childNodes).get(),                                            // 4045
        childNodesLength  = childNodes.length,                                                                         // 4046
        i                 = 0;                                                                                         // 4047
                                                                                                                       // 4048
    for (; i<childNodesLength; i++) {                                                                                  // 4049
      _parseNode(childNodes[i]);                                                                                       // 4050
    }                                                                                                                  // 4051
                                                                                                                       // 4052
    return element;                                                                                                    // 4053
  }                                                                                                                    // 4054
                                                                                                                       // 4055
  wysihtml5.dom.autoLink = autoLink;                                                                                   // 4056
                                                                                                                       // 4057
  // Reveal url reg exp to the outside                                                                                 // 4058
  wysihtml5.dom.autoLink.URL_REG_EXP = URL_REG_EXP;                                                                    // 4059
})(wysihtml5);(function(wysihtml5) {                                                                                   // 4060
  var supportsClassList = wysihtml5.browser.supportsClassList(),                                                       // 4061
      api               = wysihtml5.dom;                                                                               // 4062
                                                                                                                       // 4063
  api.addClass = function(element, className) {                                                                        // 4064
    if (supportsClassList) {                                                                                           // 4065
      return element.classList.add(className);                                                                         // 4066
    }                                                                                                                  // 4067
    if (api.hasClass(element, className)) {                                                                            // 4068
      return;                                                                                                          // 4069
    }                                                                                                                  // 4070
    element.className += " " + className;                                                                              // 4071
  };                                                                                                                   // 4072
                                                                                                                       // 4073
  api.removeClass = function(element, className) {                                                                     // 4074
    if (supportsClassList) {                                                                                           // 4075
      return element.classList.remove(className);                                                                      // 4076
    }                                                                                                                  // 4077
                                                                                                                       // 4078
    element.className = element.className.replace(new RegExp("(^|\\s+)" + className + "(\\s+|$)"), " ");               // 4079
  };                                                                                                                   // 4080
                                                                                                                       // 4081
  api.hasClass = function(element, className) {                                                                        // 4082
    if (supportsClassList) {                                                                                           // 4083
      return element.classList.contains(className);                                                                    // 4084
    }                                                                                                                  // 4085
                                                                                                                       // 4086
    var elementClassName = element.className;                                                                          // 4087
    return (elementClassName.length > 0 && (elementClassName == className || new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));
  };                                                                                                                   // 4089
})(wysihtml5);                                                                                                         // 4090
wysihtml5.dom.contains = (function() {                                                                                 // 4091
  var documentElement = document.documentElement;                                                                      // 4092
  if (documentElement.contains) {                                                                                      // 4093
    return function(container, element) {                                                                              // 4094
      if (element.nodeType !== wysihtml5.ELEMENT_NODE) {                                                               // 4095
        element = element.parentNode;                                                                                  // 4096
      }                                                                                                                // 4097
      return container !== element && container.contains(element);                                                     // 4098
    };                                                                                                                 // 4099
  } else if (documentElement.compareDocumentPosition) {                                                                // 4100
    return function(container, element) {                                                                              // 4101
      // https://developer.mozilla.org/en/DOM/Node.compareDocumentPosition                                             // 4102
      return !!(container.compareDocumentPosition(element) & 16);                                                      // 4103
    };                                                                                                                 // 4104
  }                                                                                                                    // 4105
})();/**                                                                                                               // 4106
 * Converts an HTML fragment/element into a unordered/ordered list                                                     // 4107
 *                                                                                                                     // 4108
 * @param {Element} element The element which should be turned into a list                                             // 4109
 * @param {String} listType The list type in which to convert the tree (either "ul" or "ol")                           // 4110
 * @return {Element} The created list                                                                                  // 4111
 *                                                                                                                     // 4112
 * @example                                                                                                            // 4113
 *    <!-- Assume the following dom: -->                                                                               // 4114
 *    <span id="pseudo-list">                                                                                          // 4115
 *      eminem<br>                                                                                                     // 4116
 *      dr. dre                                                                                                        // 4117
 *      <div>50 Cent</div>                                                                                             // 4118
 *    </span>                                                                                                          // 4119
 *                                                                                                                     // 4120
 *    <script>                                                                                                         // 4121
 *      wysihtml5.dom.convertToList(document.getElementById("pseudo-list"), "ul");                                     // 4122
 *    </script>                                                                                                        // 4123
 *                                                                                                                     // 4124
 *    <!-- Will result in: -->                                                                                         // 4125
 *    <ul>                                                                                                             // 4126
 *      <li>eminem</li>                                                                                                // 4127
 *      <li>dr. dre</li>                                                                                               // 4128
 *      <li>50 Cent</li>                                                                                               // 4129
 *    </ul>                                                                                                            // 4130
 */                                                                                                                    // 4131
wysihtml5.dom.convertToList = (function() {                                                                            // 4132
  function _createListItem(doc, list) {                                                                                // 4133
    var listItem = doc.createElement("li");                                                                            // 4134
    list.appendChild(listItem);                                                                                        // 4135
    return listItem;                                                                                                   // 4136
  }                                                                                                                    // 4137
                                                                                                                       // 4138
  function _createList(doc, type) {                                                                                    // 4139
    return doc.createElement(type);                                                                                    // 4140
  }                                                                                                                    // 4141
                                                                                                                       // 4142
  function convertToList(element, listType) {                                                                          // 4143
    if (element.nodeName === "UL" || element.nodeName === "OL" || element.nodeName === "MENU") {                       // 4144
      // Already a list                                                                                                // 4145
      return element;                                                                                                  // 4146
    }                                                                                                                  // 4147
                                                                                                                       // 4148
    var doc               = element.ownerDocument,                                                                     // 4149
        list              = _createList(doc, listType),                                                                // 4150
        lineBreaks        = element.querySelectorAll("br"),                                                            // 4151
        lineBreaksLength  = lineBreaks.length,                                                                         // 4152
        childNodes,                                                                                                    // 4153
        childNodesLength,                                                                                              // 4154
        childNode,                                                                                                     // 4155
        lineBreak,                                                                                                     // 4156
        parentNode,                                                                                                    // 4157
        isBlockElement,                                                                                                // 4158
        isLineBreak,                                                                                                   // 4159
        currentListItem,                                                                                               // 4160
        i;                                                                                                             // 4161
                                                                                                                       // 4162
    // First find <br> at the end of inline elements and move them behind them                                         // 4163
    for (i=0; i<lineBreaksLength; i++) {                                                                               // 4164
      lineBreak = lineBreaks[i];                                                                                       // 4165
      while ((parentNode = lineBreak.parentNode) && parentNode !== element && parentNode.lastChild === lineBreak) {    // 4166
        if (wysihtml5.dom.getStyle("display").from(parentNode) === "block") {                                          // 4167
          parentNode.removeChild(lineBreak);                                                                           // 4168
          break;                                                                                                       // 4169
        }                                                                                                              // 4170
        wysihtml5.dom.insert(lineBreak).after(lineBreak.parentNode);                                                   // 4171
      }                                                                                                                // 4172
    }                                                                                                                  // 4173
                                                                                                                       // 4174
    childNodes        = wysihtml5.lang.array(element.childNodes).get();                                                // 4175
    childNodesLength  = childNodes.length;                                                                             // 4176
                                                                                                                       // 4177
    for (i=0; i<childNodesLength; i++) {                                                                               // 4178
      currentListItem   = currentListItem || _createListItem(doc, list);                                               // 4179
      childNode         = childNodes[i];                                                                               // 4180
      isBlockElement    = wysihtml5.dom.getStyle("display").from(childNode) === "block";                               // 4181
      isLineBreak       = childNode.nodeName === "BR";                                                                 // 4182
                                                                                                                       // 4183
      if (isBlockElement) {                                                                                            // 4184
        // Append blockElement to current <li> if empty, otherwise create a new one                                    // 4185
        currentListItem = currentListItem.firstChild ? _createListItem(doc, list) : currentListItem;                   // 4186
        currentListItem.appendChild(childNode);                                                                        // 4187
        currentListItem = null;                                                                                        // 4188
        continue;                                                                                                      // 4189
      }                                                                                                                // 4190
                                                                                                                       // 4191
      if (isLineBreak) {                                                                                               // 4192
        // Only create a new list item in the next iteration when the current one has already content                  // 4193
        currentListItem = currentListItem.firstChild ? null : currentListItem;                                         // 4194
        continue;                                                                                                      // 4195
      }                                                                                                                // 4196
                                                                                                                       // 4197
      currentListItem.appendChild(childNode);                                                                          // 4198
    }                                                                                                                  // 4199
                                                                                                                       // 4200
    element.parentNode.replaceChild(list, element);                                                                    // 4201
    return list;                                                                                                       // 4202
  }                                                                                                                    // 4203
                                                                                                                       // 4204
  return convertToList;                                                                                                // 4205
})();/**                                                                                                               // 4206
 * Copy a set of attributes from one element to another                                                                // 4207
 *                                                                                                                     // 4208
 * @param {Array} attributesToCopy List of attributes which should be copied                                           // 4209
 * @return {Object} Returns an object which offers the "from" method which can be invoked with the element where to    // 4210
 *    copy the attributes from., this again returns an object which provides a method named "to" which can be invoked  // 4211
 *    with the element where to copy the attributes to (see example)                                                   // 4212
 *                                                                                                                     // 4213
 * @example                                                                                                            // 4214
 *    var textarea    = document.querySelector("textarea"),                                                            // 4215
 *        div         = document.querySelector("div[contenteditable=true]"),                                           // 4216
 *        anotherDiv  = document.querySelector("div.preview");                                                         // 4217
 *    wysihtml5.dom.copyAttributes(["spellcheck", "value", "placeholder"]).from(textarea).to(div).andTo(anotherDiv);   // 4218
 *                                                                                                                     // 4219
 */                                                                                                                    // 4220
wysihtml5.dom.copyAttributes = function(attributesToCopy) {                                                            // 4221
  return {                                                                                                             // 4222
    from: function(elementToCopyFrom) {                                                                                // 4223
      return {                                                                                                         // 4224
        to: function(elementToCopyTo) {                                                                                // 4225
          var attribute,                                                                                               // 4226
              i         = 0,                                                                                           // 4227
              length    = attributesToCopy.length;                                                                     // 4228
          for (; i<length; i++) {                                                                                      // 4229
            attribute = attributesToCopy[i];                                                                           // 4230
            if (typeof(elementToCopyFrom[attribute]) !== "undefined" && elementToCopyFrom[attribute] !== "") {         // 4231
              elementToCopyTo[attribute] = elementToCopyFrom[attribute];                                               // 4232
            }                                                                                                          // 4233
          }                                                                                                            // 4234
          return { andTo: arguments.callee };                                                                          // 4235
        }                                                                                                              // 4236
      };                                                                                                               // 4237
    }                                                                                                                  // 4238
  };                                                                                                                   // 4239
};/**                                                                                                                  // 4240
 * Copy a set of styles from one element to another                                                                    // 4241
 * Please note that this only works properly across browsers when the element from which to copy the styles            // 4242
 * is in the dom                                                                                                       // 4243
 *                                                                                                                     // 4244
 * Interesting article on how to copy styles                                                                           // 4245
 *                                                                                                                     // 4246
 * @param {Array} stylesToCopy List of styles which should be copied                                                   // 4247
 * @return {Object} Returns an object which offers the "from" method which can be invoked with the element where to    // 4248
 *    copy the styles from., this again returns an object which provides a method named "to" which can be invoked      // 4249
 *    with the element where to copy the styles to (see example)                                                       // 4250
 *                                                                                                                     // 4251
 * @example                                                                                                            // 4252
 *    var textarea    = document.querySelector("textarea"),                                                            // 4253
 *        div         = document.querySelector("div[contenteditable=true]"),                                           // 4254
 *        anotherDiv  = document.querySelector("div.preview");                                                         // 4255
 *    wysihtml5.dom.copyStyles(["overflow-y", "width", "height"]).from(textarea).to(div).andTo(anotherDiv);            // 4256
 *                                                                                                                     // 4257
 */                                                                                                                    // 4258
(function(dom) {                                                                                                       // 4259
                                                                                                                       // 4260
  /**                                                                                                                  // 4261
   * Mozilla, WebKit and Opera recalculate the computed width when box-sizing: boder-box; is set                       // 4262
   * So if an element has "width: 200px; -moz-box-sizing: border-box; border: 1px;" then                               // 4263
   * its computed css width will be 198px                                                                              // 4264
   */                                                                                                                  // 4265
  var BOX_SIZING_PROPERTIES = ["-webkit-box-sizing", "-moz-box-sizing", "-ms-box-sizing", "box-sizing"];               // 4266
                                                                                                                       // 4267
  var shouldIgnoreBoxSizingBorderBox = function(element) {                                                             // 4268
    if (hasBoxSizingBorderBox(element)) {                                                                              // 4269
       return parseInt(dom.getStyle("width").from(element), 10) < element.offsetWidth;                                 // 4270
    }                                                                                                                  // 4271
    return false;                                                                                                      // 4272
  };                                                                                                                   // 4273
                                                                                                                       // 4274
  var hasBoxSizingBorderBox = function(element) {                                                                      // 4275
    var i       = 0,                                                                                                   // 4276
        length  = BOX_SIZING_PROPERTIES.length;                                                                        // 4277
    for (; i<length; i++) {                                                                                            // 4278
      if (dom.getStyle(BOX_SIZING_PROPERTIES[i]).from(element) === "border-box") {                                     // 4279
        return BOX_SIZING_PROPERTIES[i];                                                                               // 4280
      }                                                                                                                // 4281
    }                                                                                                                  // 4282
  };                                                                                                                   // 4283
                                                                                                                       // 4284
  dom.copyStyles = function(stylesToCopy) {                                                                            // 4285
    return {                                                                                                           // 4286
      from: function(element) {                                                                                        // 4287
        if (shouldIgnoreBoxSizingBorderBox(element)) {                                                                 // 4288
          stylesToCopy = wysihtml5.lang.array(stylesToCopy).without(BOX_SIZING_PROPERTIES);                            // 4289
        }                                                                                                              // 4290
                                                                                                                       // 4291
        var cssText = "",                                                                                              // 4292
            length  = stylesToCopy.length,                                                                             // 4293
            i       = 0,                                                                                               // 4294
            property;                                                                                                  // 4295
        for (; i<length; i++) {                                                                                        // 4296
          property = stylesToCopy[i];                                                                                  // 4297
          cssText += property + ":" + dom.getStyle(property).from(element) + ";";                                      // 4298
        }                                                                                                              // 4299
                                                                                                                       // 4300
        return {                                                                                                       // 4301
          to: function(element) {                                                                                      // 4302
            dom.setStyles(cssText).on(element);                                                                        // 4303
            return { andTo: arguments.callee };                                                                        // 4304
          }                                                                                                            // 4305
        };                                                                                                             // 4306
      }                                                                                                                // 4307
    };                                                                                                                 // 4308
  };                                                                                                                   // 4309
})(wysihtml5.dom);/**                                                                                                  // 4310
 * Event Delegation                                                                                                    // 4311
 *                                                                                                                     // 4312
 * @example                                                                                                            // 4313
 *    wysihtml5.dom.delegate(document.body, "a", "click", function() {                                                 // 4314
 *      // foo                                                                                                         // 4315
 *    });                                                                                                              // 4316
 */                                                                                                                    // 4317
(function(wysihtml5) {                                                                                                 // 4318
                                                                                                                       // 4319
  wysihtml5.dom.delegate = function(container, selector, eventName, handler) {                                         // 4320
    return wysihtml5.dom.observe(container, eventName, function(event) {                                               // 4321
      var target    = event.target,                                                                                    // 4322
          match     = wysihtml5.lang.array(container.querySelectorAll(selector));                                      // 4323
                                                                                                                       // 4324
      while (target && target !== container) {                                                                         // 4325
        if (match.contains(target)) {                                                                                  // 4326
          handler.call(target, event);                                                                                 // 4327
          break;                                                                                                       // 4328
        }                                                                                                              // 4329
        target = target.parentNode;                                                                                    // 4330
      }                                                                                                                // 4331
    });                                                                                                                // 4332
  };                                                                                                                   // 4333
                                                                                                                       // 4334
})(wysihtml5);/**                                                                                                      // 4335
 * Returns the given html wrapped in a div element                                                                     // 4336
 *                                                                                                                     // 4337
 * Fixing IE's inability to treat unknown elements (HTML5 section, article, ...) correctly                             // 4338
 * when inserted via innerHTML                                                                                         // 4339
 *                                                                                                                     // 4340
 * @param {String} html The html which should be wrapped in a dom element                                              // 4341
 * @param {Obejct} [context] Document object of the context the html belongs to                                        // 4342
 *                                                                                                                     // 4343
 * @example                                                                                                            // 4344
 *    wysihtml5.dom.getAsDom("<article>foo</article>");                                                                // 4345
 */                                                                                                                    // 4346
wysihtml5.dom.getAsDom = (function() {                                                                                 // 4347
                                                                                                                       // 4348
  var _innerHTMLShiv = function(html, context) {                                                                       // 4349
    var tempElement = context.createElement("div");                                                                    // 4350
    tempElement.style.display = "none";                                                                                // 4351
    context.body.appendChild(tempElement);                                                                             // 4352
    // IE throws an exception when trying to insert <frameset></frameset> via innerHTML                                // 4353
    try { tempElement.innerHTML = html; } catch(e) {}                                                                  // 4354
    context.body.removeChild(tempElement);                                                                             // 4355
    return tempElement;                                                                                                // 4356
  };                                                                                                                   // 4357
                                                                                                                       // 4358
  /**                                                                                                                  // 4359
   * Make sure IE supports HTML5 tags, which is accomplished by simply creating one instance of each element           // 4360
   */                                                                                                                  // 4361
  var _ensureHTML5Compatibility = function(context) {                                                                  // 4362
    if (context._wysihtml5_supportsHTML5Tags) {                                                                        // 4363
      return;                                                                                                          // 4364
    }                                                                                                                  // 4365
    for (var i=0, length=HTML5_ELEMENTS.length; i<length; i++) {                                                       // 4366
      context.createElement(HTML5_ELEMENTS[i]);                                                                        // 4367
    }                                                                                                                  // 4368
    context._wysihtml5_supportsHTML5Tags = true;                                                                       // 4369
  };                                                                                                                   // 4370
                                                                                                                       // 4371
                                                                                                                       // 4372
  /**                                                                                                                  // 4373
   * List of html5 tags                                                                                                // 4374
   * taken from http://simon.html5.org/html5-elements                                                                  // 4375
   */                                                                                                                  // 4376
  var HTML5_ELEMENTS = [                                                                                               // 4377
    "abbr", "article", "aside", "audio", "bdi", "canvas", "command", "datalist", "details", "figcaption",              // 4378
    "figure", "footer", "header", "hgroup", "keygen", "mark", "meter", "nav", "output", "progress",                    // 4379
    "rp", "rt", "ruby", "svg", "section", "source", "summary", "time", "track", "video", "wbr"                         // 4380
  ];                                                                                                                   // 4381
                                                                                                                       // 4382
  return function(html, context) {                                                                                     // 4383
    context = context || document;                                                                                     // 4384
    var tempElement;                                                                                                   // 4385
    if (typeof(html) === "object" && html.nodeType) {                                                                  // 4386
      tempElement = context.createElement("div");                                                                      // 4387
      tempElement.appendChild(html);                                                                                   // 4388
    } else if (wysihtml5.browser.supportsHTML5Tags(context)) {                                                         // 4389
      tempElement = context.createElement("div");                                                                      // 4390
      tempElement.innerHTML = html;                                                                                    // 4391
    } else {                                                                                                           // 4392
      _ensureHTML5Compatibility(context);                                                                              // 4393
      tempElement = _innerHTMLShiv(html, context);                                                                     // 4394
    }                                                                                                                  // 4395
    return tempElement;                                                                                                // 4396
  };                                                                                                                   // 4397
})();/**                                                                                                               // 4398
 * Walks the dom tree from the given node up until it finds a match                                                    // 4399
 * Designed for optimal performance.                                                                                   // 4400
 *                                                                                                                     // 4401
 * @param {Element} node The from which to check the parent nodes                                                      // 4402
 * @param {Object} matchingSet Object to match against (possible properties: nodeName, className, classRegExp)         // 4403
 * @param {Number} [levels] How many parents should the function check up from the current node (defaults to 50)       // 4404
 * @return {null|Element} Returns the first element that matched the desiredNodeName(s)                                // 4405
 * @example                                                                                                            // 4406
 *    var listElement = wysihtml5.dom.getParentElement(document.querySelector("li"), { nodeName: ["MENU", "UL", "OL"] });
 *    // ... or ...                                                                                                    // 4408
 *    var unorderedListElement = wysihtml5.dom.getParentElement(document.querySelector("li"), { nodeName: "UL" });     // 4409
 *    // ... or ...                                                                                                    // 4410
 *    var coloredElement = wysihtml5.dom.getParentElement(myTextNode, { nodeName: "SPAN", className: "wysiwyg-color-red", classRegExp: /wysiwyg-color-[a-z]/g });
 */                                                                                                                    // 4412
wysihtml5.dom.getParentElement = (function() {                                                                         // 4413
                                                                                                                       // 4414
  function _isSameNodeName(nodeName, desiredNodeNames) {                                                               // 4415
    if (!desiredNodeNames || !desiredNodeNames.length) {                                                               // 4416
      return true;                                                                                                     // 4417
    }                                                                                                                  // 4418
                                                                                                                       // 4419
    if (typeof(desiredNodeNames) === "string") {                                                                       // 4420
      return nodeName === desiredNodeNames;                                                                            // 4421
    } else {                                                                                                           // 4422
      return wysihtml5.lang.array(desiredNodeNames).contains(nodeName);                                                // 4423
    }                                                                                                                  // 4424
  }                                                                                                                    // 4425
                                                                                                                       // 4426
  function _isElement(node) {                                                                                          // 4427
    return node.nodeType === wysihtml5.ELEMENT_NODE;                                                                   // 4428
  }                                                                                                                    // 4429
                                                                                                                       // 4430
  function _hasClassName(element, className, classRegExp) {                                                            // 4431
    var classNames = (element.className || "").match(classRegExp) || [];                                               // 4432
    if (!className) {                                                                                                  // 4433
      return !!classNames.length;                                                                                      // 4434
    }                                                                                                                  // 4435
    return classNames[classNames.length - 1] === className;                                                            // 4436
  }                                                                                                                    // 4437
                                                                                                                       // 4438
  function _getParentElementWithNodeName(node, nodeName, levels) {                                                     // 4439
    while (levels-- && node && node.nodeName !== "BODY") {                                                             // 4440
      if (_isSameNodeName(node.nodeName, nodeName)) {                                                                  // 4441
        return node;                                                                                                   // 4442
      }                                                                                                                // 4443
      node = node.parentNode;                                                                                          // 4444
    }                                                                                                                  // 4445
    return null;                                                                                                       // 4446
  }                                                                                                                    // 4447
                                                                                                                       // 4448
  function _getParentElementWithNodeNameAndClassName(node, nodeName, className, classRegExp, levels) {                 // 4449
    while (levels-- && node && node.nodeName !== "BODY") {                                                             // 4450
      if (_isElement(node) &&                                                                                          // 4451
          _isSameNodeName(node.nodeName, nodeName) &&                                                                  // 4452
          _hasClassName(node, className, classRegExp)) {                                                               // 4453
        return node;                                                                                                   // 4454
      }                                                                                                                // 4455
      node = node.parentNode;                                                                                          // 4456
    }                                                                                                                  // 4457
    return null;                                                                                                       // 4458
  }                                                                                                                    // 4459
                                                                                                                       // 4460
  return function(node, matchingSet, levels) {                                                                         // 4461
    levels = levels || 50; // Go max 50 nodes upwards from current node                                                // 4462
    if (matchingSet.className || matchingSet.classRegExp) {                                                            // 4463
      return _getParentElementWithNodeNameAndClassName(                                                                // 4464
        node, matchingSet.nodeName, matchingSet.className, matchingSet.classRegExp, levels                             // 4465
      );                                                                                                               // 4466
    } else {                                                                                                           // 4467
      return _getParentElementWithNodeName(                                                                            // 4468
        node, matchingSet.nodeName, levels                                                                             // 4469
      );                                                                                                               // 4470
    }                                                                                                                  // 4471
  };                                                                                                                   // 4472
})();                                                                                                                  // 4473
/**                                                                                                                    // 4474
 * Get element's style for a specific css property                                                                     // 4475
 *                                                                                                                     // 4476
 * @param {Element} element The element on which to retrieve the style                                                 // 4477
 * @param {String} property The CSS property to retrieve ("float", "display", "text-align", ...)                       // 4478
 *                                                                                                                     // 4479
 * @example                                                                                                            // 4480
 *    wysihtml5.dom.getStyle("display").from(document.body);                                                           // 4481
 *    // => "block"                                                                                                    // 4482
 */                                                                                                                    // 4483
wysihtml5.dom.getStyle = (function() {                                                                                 // 4484
  var stylePropertyMapping = {                                                                                         // 4485
        "float": ("styleFloat" in document.createElement("div").style) ? "styleFloat" : "cssFloat"                     // 4486
      },                                                                                                               // 4487
      REG_EXP_CAMELIZE = /\-[a-z]/g;                                                                                   // 4488
                                                                                                                       // 4489
  function camelize(str) {                                                                                             // 4490
    return str.replace(REG_EXP_CAMELIZE, function(match) {                                                             // 4491
      return match.charAt(1).toUpperCase();                                                                            // 4492
    });                                                                                                                // 4493
  }                                                                                                                    // 4494
                                                                                                                       // 4495
  return function(property) {                                                                                          // 4496
    return {                                                                                                           // 4497
      from: function(element) {                                                                                        // 4498
        if (element.nodeType !== wysihtml5.ELEMENT_NODE) {                                                             // 4499
          return;                                                                                                      // 4500
        }                                                                                                              // 4501
                                                                                                                       // 4502
        var doc               = element.ownerDocument,                                                                 // 4503
            camelizedProperty = stylePropertyMapping[property] || camelize(property),                                  // 4504
            style             = element.style,                                                                         // 4505
            currentStyle      = element.currentStyle,                                                                  // 4506
            styleValue        = style[camelizedProperty];                                                              // 4507
        if (styleValue) {                                                                                              // 4508
          return styleValue;                                                                                           // 4509
        }                                                                                                              // 4510
                                                                                                                       // 4511
        // currentStyle is no standard and only supported by Opera and IE but it has one important advantage over the standard-compliant
        // window.getComputedStyle, since it returns css property values in their original unit:                       // 4513
        // If you set an elements width to "50%", window.getComputedStyle will give you it's current width in px while currentStyle
        // gives you the original "50%".                                                                               // 4515
        // Opera supports both, currentStyle and window.getComputedStyle, that's why checking for currentStyle should have higher prio
        if (currentStyle) {                                                                                            // 4517
          try {                                                                                                        // 4518
                return currentStyle[camelizedProperty];                                                                // 4519
          } catch(e) {                                                                                                 // 4520
            //ie will occasionally fail for unknown reasons. swallowing exception                                      // 4521
          }                                                                                                            // 4522
        }                                                                                                              // 4523
                                                                                                                       // 4524
        var win                 = doc.defaultView || doc.parentWindow,                                                 // 4525
            needsOverflowReset  = (property === "height" || property === "width") && element.nodeName === "TEXTAREA",  // 4526
            originalOverflow,                                                                                          // 4527
            returnValue;                                                                                               // 4528
                                                                                                                       // 4529
        if (win.getComputedStyle) {                                                                                    // 4530
          // Chrome and Safari both calculate a wrong width and height for textareas when they have scroll bars        // 4531
          // therfore we remove and restore the scrollbar and calculate the value in between                           // 4532
          if (needsOverflowReset) {                                                                                    // 4533
            originalOverflow = style.overflow;                                                                         // 4534
            style.overflow = "hidden";                                                                                 // 4535
          }                                                                                                            // 4536
          returnValue = win.getComputedStyle(element, null).getPropertyValue(property);                                // 4537
          if (needsOverflowReset) {                                                                                    // 4538
            style.overflow = originalOverflow || "";                                                                   // 4539
          }                                                                                                            // 4540
          return returnValue;                                                                                          // 4541
        }                                                                                                              // 4542
      }                                                                                                                // 4543
    };                                                                                                                 // 4544
  };                                                                                                                   // 4545
})();/**                                                                                                               // 4546
 * High performant way to check whether an element with a specific tag name is in the given document                   // 4547
 * Optimized for being heavily executed                                                                                // 4548
 * Unleashes the power of live node lists                                                                              // 4549
 *                                                                                                                     // 4550
 * @param {Object} doc The document object of the context where to check                                               // 4551
 * @param {String} tagName Upper cased tag name                                                                        // 4552
 * @example                                                                                                            // 4553
 *    wysihtml5.dom.hasElementWithTagName(document, "IMG");                                                            // 4554
 */                                                                                                                    // 4555
wysihtml5.dom.hasElementWithTagName = (function() {                                                                    // 4556
  var LIVE_CACHE          = {},                                                                                        // 4557
      DOCUMENT_IDENTIFIER = 1;                                                                                         // 4558
                                                                                                                       // 4559
  function _getDocumentIdentifier(doc) {                                                                               // 4560
    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);                           // 4561
  }                                                                                                                    // 4562
                                                                                                                       // 4563
  return function(doc, tagName) {                                                                                      // 4564
    var key         = _getDocumentIdentifier(doc) + ":" + tagName,                                                     // 4565
        cacheEntry  = LIVE_CACHE[key];                                                                                 // 4566
    if (!cacheEntry) {                                                                                                 // 4567
      cacheEntry = LIVE_CACHE[key] = doc.getElementsByTagName(tagName);                                                // 4568
    }                                                                                                                  // 4569
                                                                                                                       // 4570
    return cacheEntry.length > 0;                                                                                      // 4571
  };                                                                                                                   // 4572
})();/**                                                                                                               // 4573
 * High performant way to check whether an element with a specific class name is in the given document                 // 4574
 * Optimized for being heavily executed                                                                                // 4575
 * Unleashes the power of live node lists                                                                              // 4576
 *                                                                                                                     // 4577
 * @param {Object} doc The document object of the context where to check                                               // 4578
 * @param {String} tagName Upper cased tag name                                                                        // 4579
 * @example                                                                                                            // 4580
 *    wysihtml5.dom.hasElementWithClassName(document, "foobar");                                                       // 4581
 */                                                                                                                    // 4582
(function(wysihtml5) {                                                                                                 // 4583
  var LIVE_CACHE          = {},                                                                                        // 4584
      DOCUMENT_IDENTIFIER = 1;                                                                                         // 4585
                                                                                                                       // 4586
  function _getDocumentIdentifier(doc) {                                                                               // 4587
    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);                           // 4588
  }                                                                                                                    // 4589
                                                                                                                       // 4590
  wysihtml5.dom.hasElementWithClassName = function(doc, className) {                                                   // 4591
    // getElementsByClassName is not supported by IE<9                                                                 // 4592
    // but is sometimes mocked via library code (which then doesn't return live node lists)                            // 4593
    if (!wysihtml5.browser.supportsNativeGetElementsByClassName()) {                                                   // 4594
      return !!doc.querySelector("." + className);                                                                     // 4595
    }                                                                                                                  // 4596
                                                                                                                       // 4597
    var key         = _getDocumentIdentifier(doc) + ":" + className,                                                   // 4598
        cacheEntry  = LIVE_CACHE[key];                                                                                 // 4599
    if (!cacheEntry) {                                                                                                 // 4600
      cacheEntry = LIVE_CACHE[key] = doc.getElementsByClassName(className);                                            // 4601
    }                                                                                                                  // 4602
                                                                                                                       // 4603
    return cacheEntry.length > 0;                                                                                      // 4604
  };                                                                                                                   // 4605
})(wysihtml5);                                                                                                         // 4606
wysihtml5.dom.insert = function(elementToInsert) {                                                                     // 4607
  return {                                                                                                             // 4608
    after: function(element) {                                                                                         // 4609
      element.parentNode.insertBefore(elementToInsert, element.nextSibling);                                           // 4610
    },                                                                                                                 // 4611
                                                                                                                       // 4612
    before: function(element) {                                                                                        // 4613
      element.parentNode.insertBefore(elementToInsert, element);                                                       // 4614
    },                                                                                                                 // 4615
                                                                                                                       // 4616
    into: function(element) {                                                                                          // 4617
      element.appendChild(elementToInsert);                                                                            // 4618
    }                                                                                                                  // 4619
  };                                                                                                                   // 4620
};wysihtml5.dom.insertCSS = function(rules) {                                                                          // 4621
  rules = rules.join("\n");                                                                                            // 4622
                                                                                                                       // 4623
  return {                                                                                                             // 4624
    into: function(doc) {                                                                                              // 4625
      var head         = doc.head || doc.getElementsByTagName("head")[0],                                              // 4626
          styleElement = doc.createElement("style");                                                                   // 4627
                                                                                                                       // 4628
      styleElement.type = "text/css";                                                                                  // 4629
                                                                                                                       // 4630
      if (styleElement.styleSheet) {                                                                                   // 4631
        styleElement.styleSheet.cssText = rules;                                                                       // 4632
      } else {                                                                                                         // 4633
        styleElement.appendChild(doc.createTextNode(rules));                                                           // 4634
      }                                                                                                                // 4635
                                                                                                                       // 4636
      if (head) {                                                                                                      // 4637
        head.appendChild(styleElement);                                                                                // 4638
      }                                                                                                                // 4639
    }                                                                                                                  // 4640
  };                                                                                                                   // 4641
};/**                                                                                                                  // 4642
 * Method to set dom events                                                                                            // 4643
 *                                                                                                                     // 4644
 * @example                                                                                                            // 4645
 *    wysihtml5.dom.observe(iframe.contentWindow.document.body, ["focus", "blur"], function() { ... });                // 4646
 */                                                                                                                    // 4647
wysihtml5.dom.observe = function(element, eventNames, handler) {                                                       // 4648
  eventNames = typeof(eventNames) === "string" ? [eventNames] : eventNames;                                            // 4649
                                                                                                                       // 4650
  var handlerWrapper,                                                                                                  // 4651
      eventName,                                                                                                       // 4652
      i       = 0,                                                                                                     // 4653
      length  = eventNames.length;                                                                                     // 4654
                                                                                                                       // 4655
  for (; i<length; i++) {                                                                                              // 4656
    eventName = eventNames[i];                                                                                         // 4657
    if (element.addEventListener) {                                                                                    // 4658
      element.addEventListener(eventName, handler, false);                                                             // 4659
    } else {                                                                                                           // 4660
      handlerWrapper = function(event) {                                                                               // 4661
        if (!("target" in event)) {                                                                                    // 4662
          event.target = event.srcElement;                                                                             // 4663
        }                                                                                                              // 4664
        event.preventDefault = event.preventDefault || function() {                                                    // 4665
          this.returnValue = false;                                                                                    // 4666
        };                                                                                                             // 4667
        event.stopPropagation = event.stopPropagation || function() {                                                  // 4668
          this.cancelBubble = true;                                                                                    // 4669
        };                                                                                                             // 4670
        handler.call(element, event);                                                                                  // 4671
      };                                                                                                               // 4672
      element.attachEvent("on" + eventName, handlerWrapper);                                                           // 4673
    }                                                                                                                  // 4674
  }                                                                                                                    // 4675
                                                                                                                       // 4676
  return {                                                                                                             // 4677
    stop: function() {                                                                                                 // 4678
      var eventName,                                                                                                   // 4679
          i       = 0,                                                                                                 // 4680
          length  = eventNames.length;                                                                                 // 4681
      for (; i<length; i++) {                                                                                          // 4682
        eventName = eventNames[i];                                                                                     // 4683
        if (element.removeEventListener) {                                                                             // 4684
          element.removeEventListener(eventName, handler, false);                                                      // 4685
        } else {                                                                                                       // 4686
          element.detachEvent("on" + eventName, handlerWrapper);                                                       // 4687
        }                                                                                                              // 4688
      }                                                                                                                // 4689
    }                                                                                                                  // 4690
  };                                                                                                                   // 4691
};                                                                                                                     // 4692
/**                                                                                                                    // 4693
 * HTML Sanitizer                                                                                                      // 4694
 * Rewrites the HTML based on given rules                                                                              // 4695
 *                                                                                                                     // 4696
 * @param {Element|String} elementOrHtml HTML String to be sanitized OR element whose content should be sanitized      // 4697
 * @param {Object} [rules] List of rules for rewriting the HTML, if there's no rule for an element it will             // 4698
 *    be converted to a "span". Each rule is a key/value pair where key is the tag to convert, and value the           // 4699
 *    desired substitution.                                                                                            // 4700
 * @param {Object} context Document object in which to parse the html, needed to sandbox the parsing                   // 4701
 *                                                                                                                     // 4702
 * @return {Element|String} Depends on the elementOrHtml parameter. When html then the sanitized html as string elsewise the element.
 *                                                                                                                     // 4704
 * @example                                                                                                            // 4705
 *    var userHTML = '<div id="foo" onclick="alert(1);"><p><font color="red">foo</font><script>alert(1);</script></p></div>';
 *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4707
 *      tags {                                                                                                         // 4708
 *        p:      "div",      // Rename p tags to div tags                                                             // 4709
 *        font:   "span"      // Rename font tags to span tags                                                         // 4710
 *        div:    true,       // Keep them, also possible (same result when passing: "div" or true)                    // 4711
 *        script: undefined   // Remove script elements                                                                // 4712
 *      }                                                                                                              // 4713
 *    });                                                                                                              // 4714
 *    // => <div><div><span>foo bar</span></div></div>                                                                 // 4715
 *                                                                                                                     // 4716
 *    var userHTML = '<table><tbody><tr><td>I'm a table!</td></tr></tbody></table>';                                   // 4717
 *    wysihtml5.dom.parse(userHTML);                                                                                   // 4718
 *    // => '<span><span><span><span>I'm a table!</span></span></span></span>'                                         // 4719
 *                                                                                                                     // 4720
 *    var userHTML = '<div>foobar<br>foobar</div>';                                                                    // 4721
 *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4722
 *      tags: {                                                                                                        // 4723
 *        div: undefined,                                                                                              // 4724
 *        br:  true                                                                                                    // 4725
 *      }                                                                                                              // 4726
 *    });                                                                                                              // 4727
 *    // => ''                                                                                                         // 4728
 *                                                                                                                     // 4729
 *    var userHTML = '<div class="red">foo</div><div class="pink">bar</div>';                                          // 4730
 *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4731
 *      classes: {                                                                                                     // 4732
 *        red:    1,                                                                                                   // 4733
 *        green:  1                                                                                                    // 4734
 *      },                                                                                                             // 4735
 *      tags: {                                                                                                        // 4736
 *        div: {                                                                                                       // 4737
 *          rename_tag:     "p"                                                                                        // 4738
 *        }                                                                                                            // 4739
 *      }                                                                                                              // 4740
 *    });                                                                                                              // 4741
 *    // => '<p class="red">foo</p><p>bar</p>'                                                                         // 4742
 */                                                                                                                    // 4743
wysihtml5.dom.parse = (function() {                                                                                    // 4744
                                                                                                                       // 4745
  /**                                                                                                                  // 4746
   * It's not possible to use a XMLParser/DOMParser as HTML5 is not always well-formed XML                             // 4747
   * new DOMParser().parseFromString('<img src="foo.gif">') will cause a parseError since the                          // 4748
   * node isn't closed                                                                                                 // 4749
   *                                                                                                                   // 4750
   * Therefore we've to use the browser's ordinary HTML parser invoked by setting innerHTML.                           // 4751
   */                                                                                                                  // 4752
  var NODE_TYPE_MAPPING = {                                                                                            // 4753
        "1": _handleElement,                                                                                           // 4754
        "3": _handleText                                                                                               // 4755
      },                                                                                                               // 4756
      // Rename unknown tags to this                                                                                   // 4757
      DEFAULT_NODE_NAME   = "span",                                                                                    // 4758
      WHITE_SPACE_REG_EXP = /\s+/,                                                                                     // 4759
      defaultRules        = { tags: {}, classes: {} },                                                                 // 4760
      currentRules        = {};                                                                                        // 4761
                                                                                                                       // 4762
  /**                                                                                                                  // 4763
   * Iterates over all childs of the element, recreates them, appends them into a document fragment                    // 4764
   * which later replaces the entire body content                                                                      // 4765
   */                                                                                                                  // 4766
  function parse(elementOrHtml, rules, context, cleanUp) {                                                             // 4767
    wysihtml5.lang.object(currentRules).merge(defaultRules).merge(rules).get();                                        // 4768
                                                                                                                       // 4769
    context           = context || elementOrHtml.ownerDocument || document;                                            // 4770
    var fragment      = context.createDocumentFragment(),                                                              // 4771
        isString      = typeof(elementOrHtml) === "string",                                                            // 4772
        element,                                                                                                       // 4773
        newNode,                                                                                                       // 4774
        firstChild;                                                                                                    // 4775
                                                                                                                       // 4776
    if (isString) {                                                                                                    // 4777
      element = wysihtml5.dom.getAsDom(elementOrHtml, context);                                                        // 4778
    } else {                                                                                                           // 4779
      element = elementOrHtml;                                                                                         // 4780
    }                                                                                                                  // 4781
                                                                                                                       // 4782
    while (element.firstChild) {                                                                                       // 4783
      firstChild  = element.firstChild;                                                                                // 4784
      element.removeChild(firstChild);                                                                                 // 4785
      newNode = _convert(firstChild, cleanUp);                                                                         // 4786
      if (newNode) {                                                                                                   // 4787
        fragment.appendChild(newNode);                                                                                 // 4788
      }                                                                                                                // 4789
    }                                                                                                                  // 4790
                                                                                                                       // 4791
    // Clear element contents                                                                                          // 4792
    element.innerHTML = "";                                                                                            // 4793
                                                                                                                       // 4794
    // Insert new DOM tree                                                                                             // 4795
    element.appendChild(fragment);                                                                                     // 4796
                                                                                                                       // 4797
    return isString ? wysihtml5.quirks.getCorrectInnerHTML(element) : element;                                         // 4798
  }                                                                                                                    // 4799
                                                                                                                       // 4800
  function _convert(oldNode, cleanUp) {                                                                                // 4801
    var oldNodeType     = oldNode.nodeType,                                                                            // 4802
        oldChilds       = oldNode.childNodes,                                                                          // 4803
        oldChildsLength = oldChilds.length,                                                                            // 4804
        newNode,                                                                                                       // 4805
        method          = NODE_TYPE_MAPPING[oldNodeType],                                                              // 4806
        i               = 0;                                                                                           // 4807
                                                                                                                       // 4808
    newNode = method && method(oldNode);                                                                               // 4809
                                                                                                                       // 4810
    if (!newNode) {                                                                                                    // 4811
      return null;                                                                                                     // 4812
    }                                                                                                                  // 4813
                                                                                                                       // 4814
    for (i=0; i<oldChildsLength; i++) {                                                                                // 4815
      newChild = _convert(oldChilds[i], cleanUp);                                                                      // 4816
      if (newChild) {                                                                                                  // 4817
        newNode.appendChild(newChild);                                                                                 // 4818
      }                                                                                                                // 4819
    }                                                                                                                  // 4820
                                                                                                                       // 4821
    // Cleanup senseless <span> elements                                                                               // 4822
    if (cleanUp &&                                                                                                     // 4823
        newNode.childNodes.length <= 1 &&                                                                              // 4824
        newNode.nodeName.toLowerCase() === DEFAULT_NODE_NAME &&                                                        // 4825
        !newNode.attributes.length) {                                                                                  // 4826
      return newNode.firstChild;                                                                                       // 4827
    }                                                                                                                  // 4828
                                                                                                                       // 4829
    return newNode;                                                                                                    // 4830
  }                                                                                                                    // 4831
                                                                                                                       // 4832
  function _handleElement(oldNode) {                                                                                   // 4833
    var rule,                                                                                                          // 4834
        newNode,                                                                                                       // 4835
        endTag,                                                                                                        // 4836
        tagRules    = currentRules.tags,                                                                               // 4837
        nodeName    = oldNode.nodeName.toLowerCase(),                                                                  // 4838
        scopeName   = oldNode.scopeName;                                                                               // 4839
                                                                                                                       // 4840
    /**                                                                                                                // 4841
     * We already parsed that element                                                                                  // 4842
     * ignore it! (yes, this sometimes happens in IE8 when the html is invalid)                                        // 4843
     */                                                                                                                // 4844
    if (oldNode._wysihtml5) {                                                                                          // 4845
      return null;                                                                                                     // 4846
    }                                                                                                                  // 4847
    oldNode._wysihtml5 = 1;                                                                                            // 4848
                                                                                                                       // 4849
    if (oldNode.className === "wysihtml5-temp") {                                                                      // 4850
      return null;                                                                                                     // 4851
    }                                                                                                                  // 4852
                                                                                                                       // 4853
    /**                                                                                                                // 4854
     * IE is the only browser who doesn't include the namespace in the                                                 // 4855
     * nodeName, that's why we have to prepend it by ourselves                                                         // 4856
     * scopeName is a proprietary IE feature                                                                           // 4857
     * read more here http://msdn.microsoft.com/en-us/library/ms534388(v=vs.85).aspx                                   // 4858
     */                                                                                                                // 4859
    if (scopeName && scopeName != "HTML") {                                                                            // 4860
      nodeName = scopeName + ":" + nodeName;                                                                           // 4861
    }                                                                                                                  // 4862
                                                                                                                       // 4863
    /**                                                                                                                // 4864
     * Repair node                                                                                                     // 4865
     * IE is a bit bitchy when it comes to invalid nested markup which includes unclosed tags                          // 4866
     * A <p> doesn't need to be closed according HTML4-5 spec, we simply replace it with a <div> to preserve its content and layout
     */                                                                                                                // 4868
    if ("outerHTML" in oldNode) {                                                                                      // 4869
      if (!wysihtml5.browser.autoClosesUnclosedTags() &&                                                               // 4870
          oldNode.nodeName === "P" &&                                                                                  // 4871
          oldNode.outerHTML.slice(-4).toLowerCase() !== "</p>") {                                                      // 4872
        nodeName = "div";                                                                                              // 4873
      }                                                                                                                // 4874
    }                                                                                                                  // 4875
                                                                                                                       // 4876
    if (nodeName in tagRules) {                                                                                        // 4877
      rule = tagRules[nodeName];                                                                                       // 4878
      if (!rule || rule.remove) {                                                                                      // 4879
        return null;                                                                                                   // 4880
      }                                                                                                                // 4881
                                                                                                                       // 4882
      rule = typeof(rule) === "string" ? { rename_tag: rule } : rule;                                                  // 4883
    } else if (oldNode.firstChild) {                                                                                   // 4884
      rule = { rename_tag: DEFAULT_NODE_NAME };                                                                        // 4885
    } else {                                                                                                           // 4886
      // Remove empty unknown elements                                                                                 // 4887
      return null;                                                                                                     // 4888
    }                                                                                                                  // 4889
                                                                                                                       // 4890
    newNode = oldNode.ownerDocument.createElement(rule.rename_tag || nodeName);                                        // 4891
    _handleAttributes(oldNode, newNode, rule);                                                                         // 4892
                                                                                                                       // 4893
    oldNode = null;                                                                                                    // 4894
    return newNode;                                                                                                    // 4895
  }                                                                                                                    // 4896
                                                                                                                       // 4897
  function _handleAttributes(oldNode, newNode, rule) {                                                                 // 4898
    var attributes          = {},                         // fresh new set of attributes to set on newNode             // 4899
        setClass            = rule.set_class,             // classes to set                                            // 4900
        addClass            = rule.add_class,             // add classes based on existing attributes                  // 4901
        setAttributes       = rule.set_attributes,        // attributes to set on the current node                     // 4902
        checkAttributes     = rule.check_attributes,      // check/convert values of attributes                        // 4903
        allowedClasses      = currentRules.classes,                                                                    // 4904
        i                   = 0,                                                                                       // 4905
        classes             = [],                                                                                      // 4906
        newClasses          = [],                                                                                      // 4907
        newUniqueClasses    = [],                                                                                      // 4908
        oldClasses          = [],                                                                                      // 4909
        classesLength,                                                                                                 // 4910
        newClassesLength,                                                                                              // 4911
        currentClass,                                                                                                  // 4912
        newClass,                                                                                                      // 4913
        attributeName,                                                                                                 // 4914
        newAttributeValue,                                                                                             // 4915
        method;                                                                                                        // 4916
                                                                                                                       // 4917
    if (setAttributes) {                                                                                               // 4918
      attributes = wysihtml5.lang.object(setAttributes).clone();                                                       // 4919
    }                                                                                                                  // 4920
                                                                                                                       // 4921
    if (checkAttributes) {                                                                                             // 4922
      for (attributeName in checkAttributes) {                                                                         // 4923
        method = attributeCheckMethods[checkAttributes[attributeName]];                                                // 4924
        if (!method) {                                                                                                 // 4925
          continue;                                                                                                    // 4926
        }                                                                                                              // 4927
        newAttributeValue = method(_getAttribute(oldNode, attributeName));                                             // 4928
        if (typeof(newAttributeValue) === "string") {                                                                  // 4929
          attributes[attributeName] = newAttributeValue;                                                               // 4930
        }                                                                                                              // 4931
      }                                                                                                                // 4932
    }                                                                                                                  // 4933
                                                                                                                       // 4934
    if (setClass) {                                                                                                    // 4935
      classes.push(setClass);                                                                                          // 4936
    }                                                                                                                  // 4937
                                                                                                                       // 4938
    if (addClass) {                                                                                                    // 4939
      for (attributeName in addClass) {                                                                                // 4940
        method = addClassMethods[addClass[attributeName]];                                                             // 4941
        if (!method) {                                                                                                 // 4942
          continue;                                                                                                    // 4943
        }                                                                                                              // 4944
        newClass = method(_getAttribute(oldNode, attributeName));                                                      // 4945
        if (typeof(newClass) === "string") {                                                                           // 4946
          classes.push(newClass);                                                                                      // 4947
        }                                                                                                              // 4948
      }                                                                                                                // 4949
    }                                                                                                                  // 4950
                                                                                                                       // 4951
    // make sure that wysihtml5 temp class doesn't get stripped out                                                    // 4952
    allowedClasses["_wysihtml5-temp-placeholder"] = 1;                                                                 // 4953
                                                                                                                       // 4954
    // add old classes last                                                                                            // 4955
    oldClasses = oldNode.getAttribute("class");                                                                        // 4956
    if (oldClasses) {                                                                                                  // 4957
      classes = classes.concat(oldClasses.split(WHITE_SPACE_REG_EXP));                                                 // 4958
    }                                                                                                                  // 4959
    classesLength = classes.length;                                                                                    // 4960
    for (; i<classesLength; i++) {                                                                                     // 4961
      currentClass = classes[i];                                                                                       // 4962
      if (allowedClasses[currentClass]) {                                                                              // 4963
        newClasses.push(currentClass);                                                                                 // 4964
      }                                                                                                                // 4965
    }                                                                                                                  // 4966
                                                                                                                       // 4967
    // remove duplicate entries and preserve class specificity                                                         // 4968
    newClassesLength = newClasses.length;                                                                              // 4969
    while (newClassesLength--) {                                                                                       // 4970
      currentClass = newClasses[newClassesLength];                                                                     // 4971
      if (!wysihtml5.lang.array(newUniqueClasses).contains(currentClass)) {                                            // 4972
        newUniqueClasses.unshift(currentClass);                                                                        // 4973
      }                                                                                                                // 4974
    }                                                                                                                  // 4975
                                                                                                                       // 4976
    if (newUniqueClasses.length) {                                                                                     // 4977
      attributes["class"] = newUniqueClasses.join(" ");                                                                // 4978
    }                                                                                                                  // 4979
                                                                                                                       // 4980
    // set attributes on newNode                                                                                       // 4981
    for (attributeName in attributes) {                                                                                // 4982
      // Setting attributes can cause a js error in IE under certain circumstances                                     // 4983
      // eg. on a <img> under https when it's new attribute value is non-https                                         // 4984
      // TODO: Investigate this further and check for smarter handling                                                 // 4985
      try {                                                                                                            // 4986
        newNode.setAttribute(attributeName, attributes[attributeName]);                                                // 4987
      } catch(e) {}                                                                                                    // 4988
    }                                                                                                                  // 4989
                                                                                                                       // 4990
    // IE8 sometimes loses the width/height attributes when those are set before the "src"                             // 4991
    // so we make sure to set them again                                                                               // 4992
    if (attributes.src) {                                                                                              // 4993
      if (typeof(attributes.width) !== "undefined") {                                                                  // 4994
        newNode.setAttribute("width", attributes.width);                                                               // 4995
      }                                                                                                                // 4996
      if (typeof(attributes.height) !== "undefined") {                                                                 // 4997
        newNode.setAttribute("height", attributes.height);                                                             // 4998
      }                                                                                                                // 4999
    }                                                                                                                  // 5000
  }                                                                                                                    // 5001
                                                                                                                       // 5002
  /**                                                                                                                  // 5003
   * IE gives wrong results for hasAttribute/getAttribute, for example:                                                // 5004
   *    var td = document.createElement("td");                                                                         // 5005
   *    td.getAttribute("rowspan"); // => "1" in IE                                                                    // 5006
   *                                                                                                                   // 5007
   * Therefore we have to check the element's outerHTML for the attribute                                              // 5008
   */                                                                                                                  // 5009
  var HAS_GET_ATTRIBUTE_BUG = !wysihtml5.browser.supportsGetAttributeCorrectly();                                      // 5010
  function _getAttribute(node, attributeName) {                                                                        // 5011
    attributeName = attributeName.toLowerCase();                                                                       // 5012
    var nodeName = node.nodeName;                                                                                      // 5013
    if (nodeName == "IMG" && attributeName == "src" && _isLoadedImage(node) === true) {                                // 5014
      // Get 'src' attribute value via object property since this will always contain the                              // 5015
      // full absolute url (http://...)                                                                                // 5016
      // this fixes a very annoying bug in firefox (ver 3.6 & 4) and IE 8 where images copied from the same host       // 5017
      // will have relative paths, which the sanitizer strips out (see attributeCheckMethods.url)                      // 5018
      return node.src;                                                                                                 // 5019
    } else if (HAS_GET_ATTRIBUTE_BUG && "outerHTML" in node) {                                                         // 5020
      // Don't trust getAttribute/hasAttribute in IE 6-8, instead check the element's outerHTML                        // 5021
      var outerHTML      = node.outerHTML.toLowerCase(),                                                               // 5022
          // TODO: This might not work for attributes without value: <input disabled>                                  // 5023
          hasAttribute   = outerHTML.indexOf(" " + attributeName +  "=") != -1;                                        // 5024
                                                                                                                       // 5025
      return hasAttribute ? node.getAttribute(attributeName) : null;                                                   // 5026
    } else{                                                                                                            // 5027
      return node.getAttribute(attributeName);                                                                         // 5028
    }                                                                                                                  // 5029
  }                                                                                                                    // 5030
                                                                                                                       // 5031
  /**                                                                                                                  // 5032
   * Check whether the given node is a proper loaded image                                                             // 5033
   * FIXME: Returns undefined when unknown (Chrome, Safari)                                                            // 5034
   */                                                                                                                  // 5035
  function _isLoadedImage(node) {                                                                                      // 5036
    try {                                                                                                              // 5037
      return node.complete && !node.mozMatchesSelector(":-moz-broken");                                                // 5038
    } catch(e) {                                                                                                       // 5039
      if (node.complete && node.readyState === "complete") {                                                           // 5040
        return true;                                                                                                   // 5041
      }                                                                                                                // 5042
    }                                                                                                                  // 5043
  }                                                                                                                    // 5044
                                                                                                                       // 5045
  function _handleText(oldNode) {                                                                                      // 5046
    return oldNode.ownerDocument.createTextNode(oldNode.data);                                                         // 5047
  }                                                                                                                    // 5048
                                                                                                                       // 5049
                                                                                                                       // 5050
  // ------------ attribute checks ------------ \\
  var attributeCheckMethods = {                                                                                        // 5052
    url: (function() {                                                                                                 // 5053
      var REG_EXP = /^https?:\/\//i;                                                                                   // 5054
      return function(attributeValue) {                                                                                // 5055
        if (!attributeValue || !attributeValue.match(REG_EXP)) {                                                       // 5056
          return null;                                                                                                 // 5057
        }                                                                                                              // 5058
        return attributeValue.replace(REG_EXP, function(match) {                                                       // 5059
          return match.toLowerCase();                                                                                  // 5060
        });                                                                                                            // 5061
      };                                                                                                               // 5062
    })(),                                                                                                              // 5063
                                                                                                                       // 5064
    alt: (function() {                                                                                                 // 5065
      var REG_EXP = /[^ a-z0-9_\-]/gi;                                                                                 // 5066
      return function(attributeValue) {                                                                                // 5067
        if (!attributeValue) {                                                                                         // 5068
          return "";                                                                                                   // 5069
        }                                                                                                              // 5070
        return attributeValue.replace(REG_EXP, "");                                                                    // 5071
      };                                                                                                               // 5072
    })(),                                                                                                              // 5073
                                                                                                                       // 5074
    numbers: (function() {                                                                                             // 5075
      var REG_EXP = /\D/g;                                                                                             // 5076
      return function(attributeValue) {                                                                                // 5077
        attributeValue = (attributeValue || "").replace(REG_EXP, "");                                                  // 5078
        return attributeValue || null;                                                                                 // 5079
      };                                                                                                               // 5080
    })()                                                                                                               // 5081
  };                                                                                                                   // 5082
                                                                                                                       // 5083
  // ------------ class converter (converts an html attribute to a class name) ------------ \\
  var addClassMethods = {                                                                                              // 5085
    align_img: (function() {                                                                                           // 5086
      var mapping = {                                                                                                  // 5087
        left:   "wysiwyg-float-left",                                                                                  // 5088
        right:  "wysiwyg-float-right"                                                                                  // 5089
      };                                                                                                               // 5090
      return function(attributeValue) {                                                                                // 5091
        return mapping[String(attributeValue).toLowerCase()];                                                          // 5092
      };                                                                                                               // 5093
    })(),                                                                                                              // 5094
                                                                                                                       // 5095
    align_text: (function() {                                                                                          // 5096
      var mapping = {                                                                                                  // 5097
        left:     "wysiwyg-text-align-left",                                                                           // 5098
        right:    "wysiwyg-text-align-right",                                                                          // 5099
        center:   "wysiwyg-text-align-center",                                                                         // 5100
        justify:  "wysiwyg-text-align-justify"                                                                         // 5101
      };                                                                                                               // 5102
      return function(attributeValue) {                                                                                // 5103
        return mapping[String(attributeValue).toLowerCase()];                                                          // 5104
      };                                                                                                               // 5105
    })(),                                                                                                              // 5106
                                                                                                                       // 5107
    clear_br: (function() {                                                                                            // 5108
      var mapping = {                                                                                                  // 5109
        left:   "wysiwyg-clear-left",                                                                                  // 5110
        right:  "wysiwyg-clear-right",                                                                                 // 5111
        both:   "wysiwyg-clear-both",                                                                                  // 5112
        all:    "wysiwyg-clear-both"                                                                                   // 5113
      };                                                                                                               // 5114
      return function(attributeValue) {                                                                                // 5115
        return mapping[String(attributeValue).toLowerCase()];                                                          // 5116
      };                                                                                                               // 5117
    })(),                                                                                                              // 5118
                                                                                                                       // 5119
    size_font: (function() {                                                                                           // 5120
      var mapping = {                                                                                                  // 5121
        "1": "wysiwyg-font-size-xx-small",                                                                             // 5122
        "2": "wysiwyg-font-size-small",                                                                                // 5123
        "3": "wysiwyg-font-size-medium",                                                                               // 5124
        "4": "wysiwyg-font-size-large",                                                                                // 5125
        "5": "wysiwyg-font-size-x-large",                                                                              // 5126
        "6": "wysiwyg-font-size-xx-large",                                                                             // 5127
        "7": "wysiwyg-font-size-xx-large",                                                                             // 5128
        "-": "wysiwyg-font-size-smaller",                                                                              // 5129
        "+": "wysiwyg-font-size-larger"                                                                                // 5130
      };                                                                                                               // 5131
      return function(attributeValue) {                                                                                // 5132
        return mapping[String(attributeValue).charAt(0)];                                                              // 5133
      };                                                                                                               // 5134
    })()                                                                                                               // 5135
  };                                                                                                                   // 5136
                                                                                                                       // 5137
  return parse;                                                                                                        // 5138
})();/**                                                                                                               // 5139
 * Checks for empty text node childs and removes them                                                                  // 5140
 *                                                                                                                     // 5141
 * @param {Element} node The element in which to cleanup                                                               // 5142
 * @example                                                                                                            // 5143
 *    wysihtml5.dom.removeEmptyTextNodes(element);                                                                     // 5144
 */                                                                                                                    // 5145
wysihtml5.dom.removeEmptyTextNodes = function(node) {                                                                  // 5146
  var childNode,                                                                                                       // 5147
      childNodes        = wysihtml5.lang.array(node.childNodes).get(),                                                 // 5148
      childNodesLength  = childNodes.length,                                                                           // 5149
      i                 = 0;                                                                                           // 5150
  for (; i<childNodesLength; i++) {                                                                                    // 5151
    childNode = childNodes[i];                                                                                         // 5152
    if (childNode.nodeType === wysihtml5.TEXT_NODE && childNode.data === "") {                                         // 5153
      childNode.parentNode.removeChild(childNode);                                                                     // 5154
    }                                                                                                                  // 5155
  }                                                                                                                    // 5156
};                                                                                                                     // 5157
/**                                                                                                                    // 5158
 * Renames an element (eg. a <div> to a <p>) and keeps its childs                                                      // 5159
 *                                                                                                                     // 5160
 * @param {Element} element The list element which should be renamed                                                   // 5161
 * @param {Element} newNodeName The desired tag name                                                                   // 5162
 *                                                                                                                     // 5163
 * @example                                                                                                            // 5164
 *    <!-- Assume the following dom: -->                                                                               // 5165
 *    <ul id="list">                                                                                                   // 5166
 *      <li>eminem</li>                                                                                                // 5167
 *      <li>dr. dre</li>                                                                                               // 5168
 *      <li>50 Cent</li>                                                                                               // 5169
 *    </ul>                                                                                                            // 5170
 *                                                                                                                     // 5171
 *    <script>                                                                                                         // 5172
 *      wysihtml5.dom.renameElement(document.getElementById("list"), "ol");                                            // 5173
 *    </script>                                                                                                        // 5174
 *                                                                                                                     // 5175
 *    <!-- Will result in: -->                                                                                         // 5176
 *    <ol>                                                                                                             // 5177
 *      <li>eminem</li>                                                                                                // 5178
 *      <li>dr. dre</li>                                                                                               // 5179
 *      <li>50 Cent</li>                                                                                               // 5180
 *    </ol>                                                                                                            // 5181
 */                                                                                                                    // 5182
wysihtml5.dom.renameElement = function(element, newNodeName) {                                                         // 5183
  var newElement = element.ownerDocument.createElement(newNodeName),                                                   // 5184
      firstChild;                                                                                                      // 5185
  while (firstChild = element.firstChild) {                                                                            // 5186
    newElement.appendChild(firstChild);                                                                                // 5187
  }                                                                                                                    // 5188
  wysihtml5.dom.copyAttributes(["align", "className"]).from(element).to(newElement);                                   // 5189
  element.parentNode.replaceChild(newElement, element);                                                                // 5190
  return newElement;                                                                                                   // 5191
};/**                                                                                                                  // 5192
 * Takes an element, removes it and replaces it with it's childs                                                       // 5193
 *                                                                                                                     // 5194
 * @param {Object} node The node which to replace with it's child nodes                                                // 5195
 * @example                                                                                                            // 5196
 *    <div id="foo">                                                                                                   // 5197
 *      <span>hello</span>                                                                                             // 5198
 *    </div>                                                                                                           // 5199
 *    <script>                                                                                                         // 5200
 *      // Remove #foo and replace with it's children                                                                  // 5201
 *      wysihtml5.dom.replaceWithChildNodes(document.getElementById("foo"));                                           // 5202
 *    </script>                                                                                                        // 5203
 */                                                                                                                    // 5204
wysihtml5.dom.replaceWithChildNodes = function(node) {                                                                 // 5205
  if (!node.parentNode) {                                                                                              // 5206
    return;                                                                                                            // 5207
  }                                                                                                                    // 5208
                                                                                                                       // 5209
  if (!node.firstChild) {                                                                                              // 5210
    node.parentNode.removeChild(node);                                                                                 // 5211
    return;                                                                                                            // 5212
  }                                                                                                                    // 5213
                                                                                                                       // 5214
  var fragment = node.ownerDocument.createDocumentFragment();                                                          // 5215
  while (node.firstChild) {                                                                                            // 5216
    fragment.appendChild(node.firstChild);                                                                             // 5217
  }                                                                                                                    // 5218
  node.parentNode.replaceChild(fragment, node);                                                                        // 5219
  node = fragment = null;                                                                                              // 5220
};                                                                                                                     // 5221
/**                                                                                                                    // 5222
 * Unwraps an unordered/ordered list                                                                                   // 5223
 *                                                                                                                     // 5224
 * @param {Element} element The list element which should be unwrapped                                                 // 5225
 *                                                                                                                     // 5226
 * @example                                                                                                            // 5227
 *    <!-- Assume the following dom: -->                                                                               // 5228
 *    <ul id="list">                                                                                                   // 5229
 *      <li>eminem</li>                                                                                                // 5230
 *      <li>dr. dre</li>                                                                                               // 5231
 *      <li>50 Cent</li>                                                                                               // 5232
 *    </ul>                                                                                                            // 5233
 *                                                                                                                     // 5234
 *    <script>                                                                                                         // 5235
 *      wysihtml5.dom.resolveList(document.getElementById("list"));                                                    // 5236
 *    </script>                                                                                                        // 5237
 *                                                                                                                     // 5238
 *    <!-- Will result in: -->                                                                                         // 5239
 *    eminem<br>                                                                                                       // 5240
 *    dr. dre<br>                                                                                                      // 5241
 *    50 Cent<br>                                                                                                      // 5242
 */                                                                                                                    // 5243
(function(dom) {                                                                                                       // 5244
  function _isBlockElement(node) {                                                                                     // 5245
    return dom.getStyle("display").from(node) === "block";                                                             // 5246
  }                                                                                                                    // 5247
                                                                                                                       // 5248
  function _isLineBreak(node) {                                                                                        // 5249
    return node.nodeName === "BR";                                                                                     // 5250
  }                                                                                                                    // 5251
                                                                                                                       // 5252
  function _appendLineBreak(element) {                                                                                 // 5253
    var lineBreak = element.ownerDocument.createElement("br");                                                         // 5254
    element.appendChild(lineBreak);                                                                                    // 5255
  }                                                                                                                    // 5256
                                                                                                                       // 5257
  function resolveList(list) {                                                                                         // 5258
    if (list.nodeName !== "MENU" && list.nodeName !== "UL" && list.nodeName !== "OL") {                                // 5259
      return;                                                                                                          // 5260
    }                                                                                                                  // 5261
                                                                                                                       // 5262
    var doc             = list.ownerDocument,                                                                          // 5263
        fragment        = doc.createDocumentFragment(),                                                                // 5264
        previousSibling = list.previousElementSibling || list.previousSibling,                                         // 5265
        firstChild,                                                                                                    // 5266
        lastChild,                                                                                                     // 5267
        isLastChild,                                                                                                   // 5268
        shouldAppendLineBreak,                                                                                         // 5269
        listItem;                                                                                                      // 5270
                                                                                                                       // 5271
    if (previousSibling && !_isBlockElement(previousSibling)) {                                                        // 5272
      _appendLineBreak(fragment);                                                                                      // 5273
    }                                                                                                                  // 5274
                                                                                                                       // 5275
    while (listItem = list.firstChild) {                                                                               // 5276
      lastChild = listItem.lastChild;                                                                                  // 5277
      while (firstChild = listItem.firstChild) {                                                                       // 5278
        isLastChild           = firstChild === lastChild;                                                              // 5279
        // This needs to be done before appending it to the fragment, as it otherwise will loose style information     // 5280
        shouldAppendLineBreak = isLastChild && !_isBlockElement(firstChild) && !_isLineBreak(firstChild);              // 5281
        fragment.appendChild(firstChild);                                                                              // 5282
        if (shouldAppendLineBreak) {                                                                                   // 5283
          _appendLineBreak(fragment);                                                                                  // 5284
        }                                                                                                              // 5285
      }                                                                                                                // 5286
                                                                                                                       // 5287
      listItem.parentNode.removeChild(listItem);                                                                       // 5288
    }                                                                                                                  // 5289
    list.parentNode.replaceChild(fragment, list);                                                                      // 5290
  }                                                                                                                    // 5291
                                                                                                                       // 5292
  dom.resolveList = resolveList;                                                                                       // 5293
})(wysihtml5.dom);/**                                                                                                  // 5294
 * Sandbox for executing javascript, parsing css styles and doing dom operations in a secure way                       // 5295
 *                                                                                                                     // 5296
 * Browser Compatibility:                                                                                              // 5297
 *  - Secure in MSIE 6+, but only when the user hasn't made changes to his security level "restricted"                 // 5298
 *  - Partially secure in other browsers (Firefox, Opera, Safari, Chrome, ...)                                         // 5299
 *                                                                                                                     // 5300
 * Please note that this class can't benefit from the HTML5 sandbox attribute for the following reasons:               // 5301
 *    - sandboxing doesn't work correctly with inlined content (src="javascript:'<html>...</html>'")                   // 5302
 *    - sandboxing of physical documents causes that the dom isn't accessible anymore from the outside (iframe.contentWindow, ...)
 *    - setting the "allow-same-origin" flag would fix that, but then still javascript and dom events refuse to fire   // 5304
 *    - therefore the "allow-scripts" flag is needed, which then would deactivate any security, as the js executed inside the iframe
 *      can do anything as if the sandbox attribute wasn't set                                                         // 5306
 *                                                                                                                     // 5307
 * @param {Function} [readyCallback] Method that gets invoked when the sandbox is ready                                // 5308
 * @param {Object} [config] Optional parameters                                                                        // 5309
 *                                                                                                                     // 5310
 * @example                                                                                                            // 5311
 *    new wysihtml5.dom.Sandbox(function(sandbox) {                                                                    // 5312
 *      sandbox.getWindow().document.body.innerHTML = '<img src=foo.gif onerror="alert(document.cookie)">';            // 5313
 *    });                                                                                                              // 5314
 */                                                                                                                    // 5315
(function(wysihtml5) {                                                                                                 // 5316
  var /**                                                                                                              // 5317
       * Default configuration                                                                                         // 5318
       */                                                                                                              // 5319
      doc                 = document,                                                                                  // 5320
      /**                                                                                                              // 5321
       * Properties to unset/protect on the window object                                                              // 5322
       */                                                                                                              // 5323
      windowProperties    = [                                                                                          // 5324
        "parent", "top", "opener", "frameElement", "frames",                                                           // 5325
        "localStorage", "globalStorage", "sessionStorage", "indexedDB"                                                 // 5326
      ],                                                                                                               // 5327
      /**                                                                                                              // 5328
       * Properties on the window object which are set to an empty function                                            // 5329
       */                                                                                                              // 5330
      windowProperties2   = [                                                                                          // 5331
        "open", "close", "openDialog", "showModalDialog",                                                              // 5332
        "alert", "confirm", "prompt",                                                                                  // 5333
        "openDatabase", "postMessage",                                                                                 // 5334
        "XMLHttpRequest", "XDomainRequest"                                                                             // 5335
      ],                                                                                                               // 5336
      /**                                                                                                              // 5337
       * Properties to unset/protect on the document object                                                            // 5338
       */                                                                                                              // 5339
      documentProperties  = [                                                                                          // 5340
        "referrer",                                                                                                    // 5341
        "write", "open", "close"                                                                                       // 5342
      ];                                                                                                               // 5343
                                                                                                                       // 5344
  wysihtml5.dom.Sandbox = Base.extend(                                                                                 // 5345
    /** @scope wysihtml5.dom.Sandbox.prototype */ {                                                                    // 5346
                                                                                                                       // 5347
    constructor: function(readyCallback, config) {                                                                     // 5348
      this.callback = readyCallback || wysihtml5.EMPTY_FUNCTION;                                                       // 5349
      this.config   = wysihtml5.lang.object({}).merge(config).get();                                                   // 5350
      this.iframe   = this._createIframe();                                                                            // 5351
    },                                                                                                                 // 5352
                                                                                                                       // 5353
    insertInto: function(element) {                                                                                    // 5354
      if (typeof(element) === "string") {                                                                              // 5355
        element = doc.getElementById(element);                                                                         // 5356
      }                                                                                                                // 5357
                                                                                                                       // 5358
      element.appendChild(this.iframe);                                                                                // 5359
    },                                                                                                                 // 5360
                                                                                                                       // 5361
    getIframe: function() {                                                                                            // 5362
      return this.iframe;                                                                                              // 5363
    },                                                                                                                 // 5364
                                                                                                                       // 5365
    getWindow: function() {                                                                                            // 5366
      this._readyError();                                                                                              // 5367
    },                                                                                                                 // 5368
                                                                                                                       // 5369
    getDocument: function() {                                                                                          // 5370
      this._readyError();                                                                                              // 5371
    },                                                                                                                 // 5372
                                                                                                                       // 5373
    destroy: function() {                                                                                              // 5374
      var iframe = this.getIframe();                                                                                   // 5375
      iframe.parentNode.removeChild(iframe);                                                                           // 5376
    },                                                                                                                 // 5377
                                                                                                                       // 5378
    _readyError: function() {                                                                                          // 5379
      throw new Error("wysihtml5.Sandbox: Sandbox iframe isn't loaded yet");                                           // 5380
    },                                                                                                                 // 5381
                                                                                                                       // 5382
    /**                                                                                                                // 5383
     * Creates the sandbox iframe                                                                                      // 5384
     *                                                                                                                 // 5385
     * Some important notes:                                                                                           // 5386
     *  - We can't use HTML5 sandbox for now:                                                                          // 5387
     *    setting it causes that the iframe's dom can't be accessed from the outside                                   // 5388
     *    Therefore we need to set the "allow-same-origin" flag which enables accessing the iframe's dom               // 5389
     *    But then there's another problem, DOM events (focus, blur, change, keypress, ...) aren't fired.              // 5390
     *    In order to make this happen we need to set the "allow-scripts" flag.                                        // 5391
     *    A combination of allow-scripts and allow-same-origin is almost the same as setting no sandbox attribute at all.
     *  - Chrome & Safari, doesn't seem to support sandboxing correctly when the iframe's html is inlined (no physical document)
     *  - IE needs to have the security="restricted" attribute set before the iframe is                                // 5394
     *    inserted into the dom tree                                                                                   // 5395
     *  - Believe it or not but in IE "security" in document.createElement("iframe") is false, even                    // 5396
     *    though it supports it                                                                                        // 5397
     *  - When an iframe has security="restricted", in IE eval() & execScript() don't work anymore                     // 5398
     *  - IE doesn't fire the onload event when the content is inlined in the src attribute, therefore we rely         // 5399
     *    on the onreadystatechange event                                                                              // 5400
     */                                                                                                                // 5401
    _createIframe: function() {                                                                                        // 5402
      var that   = this,                                                                                               // 5403
          iframe = doc.createElement("iframe");                                                                        // 5404
      iframe.className = "wysihtml5-sandbox";                                                                          // 5405
      wysihtml5.dom.setAttributes({                                                                                    // 5406
        "security":           "restricted",                                                                            // 5407
        "allowtransparency":  "true",                                                                                  // 5408
        "frameborder":        0,                                                                                       // 5409
        "width":              0,                                                                                       // 5410
        "height":             0,                                                                                       // 5411
        "marginwidth":        0,                                                                                       // 5412
        "marginheight":       0                                                                                        // 5413
      }).on(iframe);                                                                                                   // 5414
                                                                                                                       // 5415
      // Setting the src like this prevents ssl warnings in IE6                                                        // 5416
      if (wysihtml5.browser.throwsMixedContentWarningWhenIframeSrcIsEmpty()) {                                         // 5417
        iframe.src = "javascript:'<html></html>'";                                                                     // 5418
      }                                                                                                                // 5419
                                                                                                                       // 5420
      iframe.onload = function() {                                                                                     // 5421
        iframe.onreadystatechange = iframe.onload = null;                                                              // 5422
        that._onLoadIframe(iframe);                                                                                    // 5423
      };                                                                                                               // 5424
                                                                                                                       // 5425
      iframe.onreadystatechange = function() {                                                                         // 5426
        if (/loaded|complete/.test(iframe.readyState)) {                                                               // 5427
          iframe.onreadystatechange = iframe.onload = null;                                                            // 5428
          that._onLoadIframe(iframe);                                                                                  // 5429
        }                                                                                                              // 5430
      };                                                                                                               // 5431
                                                                                                                       // 5432
      return iframe;                                                                                                   // 5433
    },                                                                                                                 // 5434
                                                                                                                       // 5435
    /**                                                                                                                // 5436
     * Callback for when the iframe has finished loading                                                               // 5437
     */                                                                                                                // 5438
    _onLoadIframe: function(iframe) {                                                                                  // 5439
      // don't resume when the iframe got unloaded (eg. by removing it from the dom)                                   // 5440
      if (!wysihtml5.dom.contains(doc.documentElement, iframe)) {                                                      // 5441
        return;                                                                                                        // 5442
      }                                                                                                                // 5443
                                                                                                                       // 5444
      var that           = this,                                                                                       // 5445
          iframeWindow   = iframe.contentWindow,                                                                       // 5446
          iframeDocument = iframe.contentWindow.document,                                                              // 5447
          charset        = doc.characterSet || doc.charset || "utf-8",                                                 // 5448
          sandboxHtml    = this._getHtml({                                                                             // 5449
            charset:      charset,                                                                                     // 5450
            stylesheets:  this.config.stylesheets                                                                      // 5451
          });                                                                                                          // 5452
                                                                                                                       // 5453
      // Create the basic dom tree including proper DOCTYPE and charset                                                // 5454
      iframeDocument.open("text/html", "replace");                                                                     // 5455
      iframeDocument.write(sandboxHtml);                                                                               // 5456
      iframeDocument.close();                                                                                          // 5457
                                                                                                                       // 5458
      this.getWindow = function() { return iframe.contentWindow; };                                                    // 5459
      this.getDocument = function() { return iframe.contentWindow.document; };                                         // 5460
                                                                                                                       // 5461
      // Catch js errors and pass them to the parent's onerror event                                                   // 5462
      // addEventListener("error") doesn't work properly in some browsers                                              // 5463
      // TODO: apparently this doesn't work in IE9!                                                                    // 5464
      iframeWindow.onerror = function(errorMessage, fileName, lineNumber) {                                            // 5465
        throw new Error("wysihtml5.Sandbox: " + errorMessage, fileName, lineNumber);                                   // 5466
      };                                                                                                               // 5467
                                                                                                                       // 5468
      if (!wysihtml5.browser.supportsSandboxedIframes()) {                                                             // 5469
        // Unset a bunch of sensitive variables                                                                        // 5470
        // Please note: This isn't hack safe!                                                                          // 5471
        // It more or less just takes care of basic attacks and prevents accidental theft of sensitive information     // 5472
        // IE is secure though, which is the most important thing, since IE is the only browser, who                   // 5473
        // takes over scripts & styles into contentEditable elements when copied from external websites                // 5474
        // or applications (Microsoft Word, ...)                                                                       // 5475
        var i, length;                                                                                                 // 5476
        for (i=0, length=windowProperties.length; i<length; i++) {                                                     // 5477
          this._unset(iframeWindow, windowProperties[i]);                                                              // 5478
        }                                                                                                              // 5479
        for (i=0, length=windowProperties2.length; i<length; i++) {                                                    // 5480
          this._unset(iframeWindow, windowProperties2[i], wysihtml5.EMPTY_FUNCTION);                                   // 5481
        }                                                                                                              // 5482
        for (i=0, length=documentProperties.length; i<length; i++) {                                                   // 5483
          this._unset(iframeDocument, documentProperties[i]);                                                          // 5484
        }                                                                                                              // 5485
        // This doesn't work in Safari 5                                                                               // 5486
        // See http://stackoverflow.com/questions/992461/is-it-possible-to-override-document-cookie-in-webkit          // 5487
        this._unset(iframeDocument, "cookie", "", true);                                                               // 5488
      }                                                                                                                // 5489
                                                                                                                       // 5490
      this.loaded = true;                                                                                              // 5491
                                                                                                                       // 5492
      // Trigger the callback                                                                                          // 5493
      setTimeout(function() { that.callback(that); }, 0);                                                              // 5494
    },                                                                                                                 // 5495
                                                                                                                       // 5496
    _getHtml: function(templateVars) {                                                                                 // 5497
      var stylesheets = templateVars.stylesheets,                                                                      // 5498
          html        = "",                                                                                            // 5499
          i           = 0,                                                                                             // 5500
          length;                                                                                                      // 5501
      stylesheets = typeof(stylesheets) === "string" ? [stylesheets] : stylesheets;                                    // 5502
      if (stylesheets) {                                                                                               // 5503
        length = stylesheets.length;                                                                                   // 5504
        for (; i<length; i++) {                                                                                        // 5505
          html += '<link rel="stylesheet" href="' + stylesheets[i] + '">';                                             // 5506
        }                                                                                                              // 5507
      }                                                                                                                // 5508
      templateVars.stylesheets = html;                                                                                 // 5509
                                                                                                                       // 5510
      return wysihtml5.lang.string(                                                                                    // 5511
        '<!DOCTYPE html><html><head>'                                                                                  // 5512
        + '<meta charset="#{charset}">#{stylesheets}</head>'                                                           // 5513
        + '<body></body></html>'                                                                                       // 5514
      ).interpolate(templateVars);                                                                                     // 5515
    },                                                                                                                 // 5516
                                                                                                                       // 5517
    /**                                                                                                                // 5518
     * Method to unset/override existing variables                                                                     // 5519
     * @example                                                                                                        // 5520
     *    // Make cookie unreadable and unwritable                                                                     // 5521
     *    this._unset(document, "cookie", "", true);                                                                   // 5522
     */                                                                                                                // 5523
    _unset: function(object, property, value, setter) {                                                                // 5524
      try { object[property] = value; } catch(e) {}                                                                    // 5525
                                                                                                                       // 5526
      try { object.__defineGetter__(property, function() { return value; }); } catch(e) {}                             // 5527
      if (setter) {                                                                                                    // 5528
        try { object.__defineSetter__(property, function() {}); } catch(e) {}                                          // 5529
      }                                                                                                                // 5530
                                                                                                                       // 5531
      if (!wysihtml5.browser.crashesWhenDefineProperty(property)) {                                                    // 5532
        try {                                                                                                          // 5533
          var config = {                                                                                               // 5534
            get: function() { return value; }                                                                          // 5535
          };                                                                                                           // 5536
          if (setter) {                                                                                                // 5537
            config.set = function() {};                                                                                // 5538
          }                                                                                                            // 5539
          Object.defineProperty(object, property, config);                                                             // 5540
        } catch(e) {}                                                                                                  // 5541
      }                                                                                                                // 5542
    }                                                                                                                  // 5543
  });                                                                                                                  // 5544
})(wysihtml5);                                                                                                         // 5545
(function() {                                                                                                          // 5546
  var mapping = {                                                                                                      // 5547
    "className": "class"                                                                                               // 5548
  };                                                                                                                   // 5549
  wysihtml5.dom.setAttributes = function(attributes) {                                                                 // 5550
    return {                                                                                                           // 5551
      on: function(element) {                                                                                          // 5552
        for (var i in attributes) {                                                                                    // 5553
          element.setAttribute(mapping[i] || i, attributes[i]);                                                        // 5554
        }                                                                                                              // 5555
      }                                                                                                                // 5556
    }                                                                                                                  // 5557
  };                                                                                                                   // 5558
})();wysihtml5.dom.setStyles = function(styles) {                                                                      // 5559
  return {                                                                                                             // 5560
    on: function(element) {                                                                                            // 5561
      var style = element.style;                                                                                       // 5562
      if (typeof(styles) === "string") {                                                                               // 5563
        style.cssText += ";" + styles;                                                                                 // 5564
        return;                                                                                                        // 5565
      }                                                                                                                // 5566
      for (var i in styles) {                                                                                          // 5567
        if (i === "float") {                                                                                           // 5568
          style.cssFloat = styles[i];                                                                                  // 5569
          style.styleFloat = styles[i];                                                                                // 5570
        } else {                                                                                                       // 5571
          style[i] = styles[i];                                                                                        // 5572
        }                                                                                                              // 5573
      }                                                                                                                // 5574
    }                                                                                                                  // 5575
  };                                                                                                                   // 5576
};/**                                                                                                                  // 5577
 * Simulate HTML5 placeholder attribute                                                                                // 5578
 *                                                                                                                     // 5579
 * Needed since                                                                                                        // 5580
 *    - div[contentEditable] elements don't support it                                                                 // 5581
 *    - older browsers (such as IE8 and Firefox 3.6) don't support it at all                                           // 5582
 *                                                                                                                     // 5583
 * @param {Object} parent Instance of main wysihtml5.Editor class                                                      // 5584
 * @param {Element} view Instance of wysihtml5.views.* class                                                           // 5585
 * @param {String} placeholderText                                                                                     // 5586
 *                                                                                                                     // 5587
 * @example                                                                                                            // 5588
 *    wysihtml.dom.simulatePlaceholder(this, composer, "Foobar");                                                      // 5589
 */                                                                                                                    // 5590
(function(dom) {                                                                                                       // 5591
  dom.simulatePlaceholder = function(editor, view, placeholderText) {                                                  // 5592
    var CLASS_NAME = "placeholder",                                                                                    // 5593
        unset = function() {                                                                                           // 5594
          if (view.hasPlaceholderSet()) {                                                                              // 5595
            view.clear();                                                                                              // 5596
          }                                                                                                            // 5597
          dom.removeClass(view.element, CLASS_NAME);                                                                   // 5598
        },                                                                                                             // 5599
        set = function() {                                                                                             // 5600
          if (view.isEmpty()) {                                                                                        // 5601
            view.setValue(placeholderText);                                                                            // 5602
            dom.addClass(view.element, CLASS_NAME);                                                                    // 5603
          }                                                                                                            // 5604
        };                                                                                                             // 5605
                                                                                                                       // 5606
    editor                                                                                                             // 5607
      .observe("set_placeholder", set)                                                                                 // 5608
      .observe("unset_placeholder", unset)                                                                             // 5609
      .observe("focus:composer", unset)                                                                                // 5610
      .observe("paste:composer", unset)                                                                                // 5611
      .observe("blur:composer", set);                                                                                  // 5612
                                                                                                                       // 5613
    set();                                                                                                             // 5614
  };                                                                                                                   // 5615
})(wysihtml5.dom);                                                                                                     // 5616
(function(dom) {                                                                                                       // 5617
  var documentElement = document.documentElement;                                                                      // 5618
  if ("textContent" in documentElement) {                                                                              // 5619
    dom.setTextContent = function(element, text) {                                                                     // 5620
      element.textContent = text;                                                                                      // 5621
    };                                                                                                                 // 5622
                                                                                                                       // 5623
    dom.getTextContent = function(element) {                                                                           // 5624
      return element.textContent;                                                                                      // 5625
    };                                                                                                                 // 5626
  } else if ("innerText" in documentElement) {                                                                         // 5627
    dom.setTextContent = function(element, text) {                                                                     // 5628
      element.innerText = text;                                                                                        // 5629
    };                                                                                                                 // 5630
                                                                                                                       // 5631
    dom.getTextContent = function(element) {                                                                           // 5632
      return element.innerText;                                                                                        // 5633
    };                                                                                                                 // 5634
  } else {                                                                                                             // 5635
    dom.setTextContent = function(element, text) {                                                                     // 5636
      element.nodeValue = text;                                                                                        // 5637
    };                                                                                                                 // 5638
                                                                                                                       // 5639
    dom.getTextContent = function(element) {                                                                           // 5640
      return element.nodeValue;                                                                                        // 5641
    };                                                                                                                 // 5642
  }                                                                                                                    // 5643
})(wysihtml5.dom);                                                                                                     // 5644
                                                                                                                       // 5645
/**                                                                                                                    // 5646
 * Fix most common html formatting misbehaviors of browsers implementation when inserting                              // 5647
 * content via copy & paste contentEditable                                                                            // 5648
 *                                                                                                                     // 5649
 * @author Christopher Blum                                                                                            // 5650
 */                                                                                                                    // 5651
wysihtml5.quirks.cleanPastedHTML = (function() {                                                                       // 5652
  // TODO: We probably need more rules here                                                                            // 5653
  var defaultRules = {                                                                                                 // 5654
    // When pasting underlined links <a> into a contentEditable, IE thinks, it has to insert <u> to keep the styling   // 5655
    "a u": wysihtml5.dom.replaceWithChildNodes                                                                         // 5656
  };                                                                                                                   // 5657
                                                                                                                       // 5658
  function cleanPastedHTML(elementOrHtml, rules, context) {                                                            // 5659
    rules   = rules || defaultRules;                                                                                   // 5660
    context = context || elementOrHtml.ownerDocument || document;                                                      // 5661
                                                                                                                       // 5662
    var element,                                                                                                       // 5663
        isString = typeof(elementOrHtml) === "string",                                                                 // 5664
        method,                                                                                                        // 5665
        matches,                                                                                                       // 5666
        matchesLength,                                                                                                 // 5667
        i,                                                                                                             // 5668
        j = 0;                                                                                                         // 5669
    if (isString) {                                                                                                    // 5670
      element = wysihtml5.dom.getAsDom(elementOrHtml, context);                                                        // 5671
    } else {                                                                                                           // 5672
      element = elementOrHtml;                                                                                         // 5673
    }                                                                                                                  // 5674
                                                                                                                       // 5675
    for (i in rules) {                                                                                                 // 5676
      matches       = element.querySelectorAll(i);                                                                     // 5677
      method        = rules[i];                                                                                        // 5678
      matchesLength = matches.length;                                                                                  // 5679
      for (; j<matchesLength; j++) {                                                                                   // 5680
        method(matches[j]);                                                                                            // 5681
      }                                                                                                                // 5682
    }                                                                                                                  // 5683
                                                                                                                       // 5684
    matches = elementOrHtml = rules = null;                                                                            // 5685
                                                                                                                       // 5686
    return isString ? element.innerHTML : element;                                                                     // 5687
  }                                                                                                                    // 5688
                                                                                                                       // 5689
  return cleanPastedHTML;                                                                                              // 5690
})();/**                                                                                                               // 5691
 * IE and Opera leave an empty paragraph in the contentEditable element after clearing it                              // 5692
 *                                                                                                                     // 5693
 * @param {Object} contentEditableElement The contentEditable element to observe for clearing events                   // 5694
 * @exaple                                                                                                             // 5695
 *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);                                                 // 5696
 */                                                                                                                    // 5697
(function(wysihtml5) {                                                                                                 // 5698
  var dom = wysihtml5.dom;                                                                                             // 5699
                                                                                                                       // 5700
  wysihtml5.quirks.ensureProperClearing = (function() {                                                                // 5701
    var clearIfNecessary = function(event) {                                                                           // 5702
      var element = this;                                                                                              // 5703
      setTimeout(function() {                                                                                          // 5704
        var innerHTML = element.innerHTML.toLowerCase();                                                               // 5705
        if (innerHTML == "<p>&nbsp;</p>" ||                                                                            // 5706
            innerHTML == "<p>&nbsp;</p><p>&nbsp;</p>") {                                                               // 5707
          element.innerHTML = "";                                                                                      // 5708
        }                                                                                                              // 5709
      }, 0);                                                                                                           // 5710
    };                                                                                                                 // 5711
                                                                                                                       // 5712
    return function(composer) {                                                                                        // 5713
      dom.observe(composer.element, ["cut", "keydown"], clearIfNecessary);                                             // 5714
    };                                                                                                                 // 5715
  })();                                                                                                                // 5716
                                                                                                                       // 5717
                                                                                                                       // 5718
                                                                                                                       // 5719
  /**                                                                                                                  // 5720
   * In Opera when the caret is in the first and only item of a list (<ul><li>|</li></ul>) and the list is the first child of the contentEditable element, it's impossible to delete the list by hitting backspace
   *                                                                                                                   // 5722
   * @param {Object} contentEditableElement The contentEditable element to observe for clearing events                 // 5723
   * @exaple                                                                                                           // 5724
   *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);                                               // 5725
   */                                                                                                                  // 5726
  wysihtml5.quirks.ensureProperClearingOfLists = (function() {                                                         // 5727
    var ELEMENTS_THAT_CONTAIN_LI = ["OL", "UL", "MENU"];                                                               // 5728
                                                                                                                       // 5729
    var clearIfNecessary = function(element, contentEditableElement) {                                                 // 5730
      if (!contentEditableElement.firstChild || !wysihtml5.lang.array(ELEMENTS_THAT_CONTAIN_LI).contains(contentEditableElement.firstChild.nodeName)) {
        return;                                                                                                        // 5732
      }                                                                                                                // 5733
                                                                                                                       // 5734
      var list = dom.getParentElement(element, { nodeName: ELEMENTS_THAT_CONTAIN_LI });                                // 5735
      if (!list) {                                                                                                     // 5736
        return;                                                                                                        // 5737
      }                                                                                                                // 5738
                                                                                                                       // 5739
      var listIsFirstChildOfContentEditable = list == contentEditableElement.firstChild;                               // 5740
      if (!listIsFirstChildOfContentEditable) {                                                                        // 5741
        return;                                                                                                        // 5742
      }                                                                                                                // 5743
                                                                                                                       // 5744
      var hasOnlyOneListItem = list.childNodes.length <= 1;                                                            // 5745
      if (!hasOnlyOneListItem) {                                                                                       // 5746
        return;                                                                                                        // 5747
      }                                                                                                                // 5748
                                                                                                                       // 5749
      var onlyListItemIsEmpty = list.firstChild ? list.firstChild.innerHTML === "" : true;                             // 5750
      if (!onlyListItemIsEmpty) {                                                                                      // 5751
        return;                                                                                                        // 5752
      }                                                                                                                // 5753
                                                                                                                       // 5754
      list.parentNode.removeChild(list);                                                                               // 5755
    };                                                                                                                 // 5756
                                                                                                                       // 5757
    return function(composer) {                                                                                        // 5758
      dom.observe(composer.element, "keydown", function(event) {                                                       // 5759
        if (event.keyCode !== wysihtml5.BACKSPACE_KEY) {                                                               // 5760
          return;                                                                                                      // 5761
        }                                                                                                              // 5762
                                                                                                                       // 5763
        var element = composer.selection.getSelectedNode();                                                            // 5764
        clearIfNecessary(element, composer.element);                                                                   // 5765
      });                                                                                                              // 5766
    };                                                                                                                 // 5767
  })();                                                                                                                // 5768
                                                                                                                       // 5769
})(wysihtml5);                                                                                                         // 5770
// See https://bugzilla.mozilla.org/show_bug.cgi?id=664398                                                             // 5771
//                                                                                                                     // 5772
// In Firefox this:                                                                                                    // 5773
//      var d = document.createElement("div");                                                                         // 5774
//      d.innerHTML ='<a href="~"></a>';                                                                               // 5775
//      d.innerHTML;                                                                                                   // 5776
// will result in:                                                                                                     // 5777
//      <a href="%7E"></a>                                                                                             // 5778
// which is wrong                                                                                                      // 5779
(function(wysihtml5) {                                                                                                 // 5780
  var TILDE_ESCAPED = "%7E";                                                                                           // 5781
  wysihtml5.quirks.getCorrectInnerHTML = function(element) {                                                           // 5782
    var innerHTML = element.innerHTML;                                                                                 // 5783
    if (innerHTML.indexOf(TILDE_ESCAPED) === -1) {                                                                     // 5784
      return innerHTML;                                                                                                // 5785
    }                                                                                                                  // 5786
                                                                                                                       // 5787
    var elementsWithTilde = element.querySelectorAll("[href*='~'], [src*='~']"),                                       // 5788
        url,                                                                                                           // 5789
        urlToSearch,                                                                                                   // 5790
        length,                                                                                                        // 5791
        i;                                                                                                             // 5792
    for (i=0, length=elementsWithTilde.length; i<length; i++) {                                                        // 5793
      url         = elementsWithTilde[i].href || elementsWithTilde[i].src;                                             // 5794
      urlToSearch = wysihtml5.lang.string(url).replace("~").by(TILDE_ESCAPED);                                         // 5795
      innerHTML   = wysihtml5.lang.string(innerHTML).replace(urlToSearch).by(url);                                     // 5796
    }                                                                                                                  // 5797
    return innerHTML;                                                                                                  // 5798
  };                                                                                                                   // 5799
})(wysihtml5);/**                                                                                                      // 5800
 * Some browsers don't insert line breaks when hitting return in a contentEditable element                             // 5801
 *    - Opera & IE insert new <p> on return                                                                            // 5802
 *    - Chrome & Safari insert new <div> on return                                                                     // 5803
 *    - Firefox inserts <br> on return (yippie!)                                                                       // 5804
 *                                                                                                                     // 5805
 * @param {Element} element                                                                                            // 5806
 *                                                                                                                     // 5807
 * @example                                                                                                            // 5808
 *    wysihtml5.quirks.insertLineBreakOnReturn(element);                                                               // 5809
 */                                                                                                                    // 5810
(function(wysihtml5) {                                                                                                 // 5811
  var dom                                           = wysihtml5.dom,                                                   // 5812
      USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS  = ["LI", "P", "H1", "H2", "H3", "H4", "H5", "H6"],                 // 5813
      LIST_TAGS                                     = ["UL", "OL", "MENU"];                                            // 5814
                                                                                                                       // 5815
  wysihtml5.quirks.insertLineBreakOnReturn = function(composer) {                                                      // 5816
    function unwrap(selectedNode) {                                                                                    // 5817
      var parentElement = dom.getParentElement(selectedNode, { nodeName: ["P", "DIV"] }, 2);                           // 5818
      if (!parentElement) {                                                                                            // 5819
        return;                                                                                                        // 5820
      }                                                                                                                // 5821
                                                                                                                       // 5822
      var invisibleSpace = document.createTextNode(wysihtml5.INVISIBLE_SPACE);                                         // 5823
      dom.insert(invisibleSpace).before(parentElement);                                                                // 5824
      dom.replaceWithChildNodes(parentElement);                                                                        // 5825
      composer.selection.selectNode(invisibleSpace);                                                                   // 5826
    }                                                                                                                  // 5827
                                                                                                                       // 5828
    function keyDown(event) {                                                                                          // 5829
      var keyCode = event.keyCode;                                                                                     // 5830
      if (event.shiftKey || (keyCode !== wysihtml5.ENTER_KEY && keyCode !== wysihtml5.BACKSPACE_KEY)) {                // 5831
        return;                                                                                                        // 5832
      }                                                                                                                // 5833
                                                                                                                       // 5834
      var element         = event.target,                                                                              // 5835
          selectedNode    = composer.selection.getSelectedNode(),                                                      // 5836
          blockElement    = dom.getParentElement(selectedNode, { nodeName: USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS }, 4);
      if (blockElement) {                                                                                              // 5838
        // Some browsers create <p> elements after leaving a list                                                      // 5839
        // check after keydown of backspace and return whether a <p> got inserted and unwrap it                        // 5840
        if (blockElement.nodeName === "LI" && (keyCode === wysihtml5.ENTER_KEY || keyCode === wysihtml5.BACKSPACE_KEY)) {
          setTimeout(function() {                                                                                      // 5842
            var selectedNode = composer.selection.getSelectedNode(),                                                   // 5843
                list,                                                                                                  // 5844
                div;                                                                                                   // 5845
            if (!selectedNode) {                                                                                       // 5846
              return;                                                                                                  // 5847
            }                                                                                                          // 5848
                                                                                                                       // 5849
            list = dom.getParentElement(selectedNode, {                                                                // 5850
              nodeName: LIST_TAGS                                                                                      // 5851
            }, 2);                                                                                                     // 5852
                                                                                                                       // 5853
            if (list) {                                                                                                // 5854
              return;                                                                                                  // 5855
            }                                                                                                          // 5856
                                                                                                                       // 5857
            unwrap(selectedNode);                                                                                      // 5858
          }, 0);                                                                                                       // 5859
        } else if (blockElement.nodeName.match(/H[1-6]/) && keyCode === wysihtml5.ENTER_KEY) {                         // 5860
          setTimeout(function() {                                                                                      // 5861
            unwrap(composer.selection.getSelectedNode());                                                              // 5862
          }, 0);                                                                                                       // 5863
        }                                                                                                              // 5864
        return;                                                                                                        // 5865
      }                                                                                                                // 5866
                                                                                                                       // 5867
      if (keyCode === wysihtml5.ENTER_KEY && !wysihtml5.browser.insertsLineBreaksOnReturn()) {                         // 5868
        composer.commands.exec("insertLineBreak");                                                                     // 5869
        event.preventDefault();                                                                                        // 5870
      }                                                                                                                // 5871
    }                                                                                                                  // 5872
                                                                                                                       // 5873
    // keypress doesn't fire when you hit backspace                                                                    // 5874
    dom.observe(composer.element.ownerDocument, "keydown", keyDown);                                                   // 5875
  };                                                                                                                   // 5876
})(wysihtml5);/**                                                                                                      // 5877
 * Force rerendering of a given element                                                                                // 5878
 * Needed to fix display misbehaviors of IE                                                                            // 5879
 *                                                                                                                     // 5880
 * @param {Element} element The element object which needs to be rerendered                                            // 5881
 * @example                                                                                                            // 5882
 *    wysihtml5.quirks.redraw(document.body);                                                                          // 5883
 */                                                                                                                    // 5884
(function(wysihtml5) {                                                                                                 // 5885
  var CLASS_NAME = "wysihtml5-quirks-redraw";                                                                          // 5886
                                                                                                                       // 5887
  wysihtml5.quirks.redraw = function(element) {                                                                        // 5888
    wysihtml5.dom.addClass(element, CLASS_NAME);                                                                       // 5889
    wysihtml5.dom.removeClass(element, CLASS_NAME);                                                                    // 5890
                                                                                                                       // 5891
    // Following hack is needed for firefox to make sure that image resize handles are properly removed                // 5892
    try {                                                                                                              // 5893
      var doc = element.ownerDocument;                                                                                 // 5894
      doc.execCommand("italic", false, null);                                                                          // 5895
      doc.execCommand("italic", false, null);                                                                          // 5896
    } catch(e) {}                                                                                                      // 5897
  };                                                                                                                   // 5898
})(wysihtml5);/**                                                                                                      // 5899
 * Selection API                                                                                                       // 5900
 *                                                                                                                     // 5901
 * @example                                                                                                            // 5902
 *    var selection = new wysihtml5.Selection(editor);                                                                 // 5903
 */                                                                                                                    // 5904
(function(wysihtml5) {                                                                                                 // 5905
  var dom = wysihtml5.dom;                                                                                             // 5906
                                                                                                                       // 5907
  function _getCumulativeOffsetTop(element) {                                                                          // 5908
    var top = 0;                                                                                                       // 5909
    if (element.parentNode) {                                                                                          // 5910
      do {                                                                                                             // 5911
        top += element.offsetTop || 0;                                                                                 // 5912
        element = element.offsetParent;                                                                                // 5913
      } while (element);                                                                                               // 5914
    }                                                                                                                  // 5915
    return top;                                                                                                        // 5916
  }                                                                                                                    // 5917
                                                                                                                       // 5918
  wysihtml5.Selection = Base.extend(                                                                                   // 5919
    /** @scope wysihtml5.Selection.prototype */ {                                                                      // 5920
    constructor: function(editor) {                                                                                    // 5921
      // Make sure that our external range library is initialized                                                      // 5922
      window.rangy.init();                                                                                             // 5923
                                                                                                                       // 5924
      this.editor   = editor;                                                                                          // 5925
      this.composer = editor.composer;                                                                                 // 5926
      this.doc      = this.composer.doc;                                                                               // 5927
    },                                                                                                                 // 5928
                                                                                                                       // 5929
    /**                                                                                                                // 5930
     * Get the current selection as a bookmark to be able to later restore it                                          // 5931
     *                                                                                                                 // 5932
     * @return {Object} An object that represents the current selection                                                // 5933
     */                                                                                                                // 5934
    getBookmark: function() {                                                                                          // 5935
      var range = this.getRange();                                                                                     // 5936
      return range && range.cloneRange();                                                                              // 5937
    },                                                                                                                 // 5938
                                                                                                                       // 5939
    /**                                                                                                                // 5940
     * Restore a selection retrieved via wysihtml5.Selection.prototype.getBookmark                                     // 5941
     *                                                                                                                 // 5942
     * @param {Object} bookmark An object that represents the current selection                                        // 5943
     */                                                                                                                // 5944
    setBookmark: function(bookmark) {                                                                                  // 5945
      if (!bookmark) {                                                                                                 // 5946
        return;                                                                                                        // 5947
      }                                                                                                                // 5948
                                                                                                                       // 5949
      this.setSelection(bookmark);                                                                                     // 5950
    },                                                                                                                 // 5951
                                                                                                                       // 5952
    /**                                                                                                                // 5953
     * Set the caret in front of the given node                                                                        // 5954
     *                                                                                                                 // 5955
     * @param {Object} node The element or text node where to position the caret in front of                           // 5956
     * @example                                                                                                        // 5957
     *    selection.setBefore(myElement);                                                                              // 5958
     */                                                                                                                // 5959
    setBefore: function(node) {                                                                                        // 5960
      var range = rangy.createRange(this.doc);                                                                         // 5961
      range.setStartBefore(node);                                                                                      // 5962
      range.setEndBefore(node);                                                                                        // 5963
      return this.setSelection(range);                                                                                 // 5964
    },                                                                                                                 // 5965
                                                                                                                       // 5966
    /**                                                                                                                // 5967
     * Set the caret after the given node                                                                              // 5968
     *                                                                                                                 // 5969
     * @param {Object} node The element or text node where to position the caret in front of                           // 5970
     * @example                                                                                                        // 5971
     *    selection.setBefore(myElement);                                                                              // 5972
     */                                                                                                                // 5973
    setAfter: function(node) {                                                                                         // 5974
      var range = rangy.createRange(this.doc);                                                                         // 5975
      range.setStartAfter(node);                                                                                       // 5976
      range.setEndAfter(node);                                                                                         // 5977
      return this.setSelection(range);                                                                                 // 5978
    },                                                                                                                 // 5979
                                                                                                                       // 5980
    /**                                                                                                                // 5981
     * Ability to select/mark nodes                                                                                    // 5982
     *                                                                                                                 // 5983
     * @param {Element} node The node/element to select                                                                // 5984
     * @example                                                                                                        // 5985
     *    selection.selectNode(document.getElementById("my-image"));                                                   // 5986
     */                                                                                                                // 5987
    selectNode: function(node) {                                                                                       // 5988
      var range           = rangy.createRange(this.doc),                                                               // 5989
          isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,                                                  // 5990
          canHaveHTML     = "canHaveHTML" in node ? node.canHaveHTML : (node.nodeName !== "IMG"),                      // 5991
          content         = isElement ? node.innerHTML : node.data,                                                    // 5992
          isEmpty         = (content === "" || content === wysihtml5.INVISIBLE_SPACE),                                 // 5993
          displayStyle    = dom.getStyle("display").from(node),                                                        // 5994
          isBlockElement  = (displayStyle === "block" || displayStyle === "list-item");                                // 5995
                                                                                                                       // 5996
      if (isEmpty && isElement && canHaveHTML) {                                                                       // 5997
        // Make sure that caret is visible in node by inserting a zero width no breaking space                         // 5998
        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}                                                // 5999
      }                                                                                                                // 6000
                                                                                                                       // 6001
      if (canHaveHTML) {                                                                                               // 6002
        range.selectNodeContents(node);                                                                                // 6003
      } else {                                                                                                         // 6004
        range.selectNode(node);                                                                                        // 6005
      }                                                                                                                // 6006
                                                                                                                       // 6007
      if (canHaveHTML && isEmpty && isElement) {                                                                       // 6008
        range.collapse(isBlockElement);                                                                                // 6009
      } else if (canHaveHTML && isEmpty) {                                                                             // 6010
        range.setStartAfter(node);                                                                                     // 6011
        range.setEndAfter(node);                                                                                       // 6012
      }                                                                                                                // 6013
                                                                                                                       // 6014
      this.setSelection(range);                                                                                        // 6015
    },                                                                                                                 // 6016
                                                                                                                       // 6017
    /**                                                                                                                // 6018
     * Get the node which contains the selection                                                                       // 6019
     *                                                                                                                 // 6020
     * @param {Boolean} [controlRange] (only IE) Whether it should return the selected ControlRange element when the selection type is a "ControlRange"
     * @return {Object} The node that contains the caret                                                               // 6022
     * @example                                                                                                        // 6023
     *    var nodeThatContainsCaret = selection.getSelectedNode();                                                     // 6024
     */                                                                                                                // 6025
    getSelectedNode: function(controlRange) {                                                                          // 6026
      var selection,                                                                                                   // 6027
          range;                                                                                                       // 6028
                                                                                                                       // 6029
      if (controlRange && this.doc.selection && this.doc.selection.type === "Control") {                               // 6030
        range = this.doc.selection.createRange();                                                                      // 6031
        if (range && range.length) {                                                                                   // 6032
          return range.item(0);                                                                                        // 6033
        }                                                                                                              // 6034
      }                                                                                                                // 6035
                                                                                                                       // 6036
      selection = this.getSelection(this.doc);                                                                         // 6037
      if (selection.focusNode === selection.anchorNode) {                                                              // 6038
        return selection.focusNode;                                                                                    // 6039
      } else {                                                                                                         // 6040
        range = this.getRange(this.doc);                                                                               // 6041
        return range ? range.commonAncestorContainer : this.doc.body;                                                  // 6042
      }                                                                                                                // 6043
    },                                                                                                                 // 6044
                                                                                                                       // 6045
    executeAndRestore: function(method, restoreScrollPosition) {                                                       // 6046
      var body                  = this.doc.body,                                                                       // 6047
          oldScrollTop          = restoreScrollPosition && body.scrollTop,                                             // 6048
          oldScrollLeft         = restoreScrollPosition && body.scrollLeft,                                            // 6049
          className             = "_wysihtml5-temp-placeholder",                                                       // 6050
          placeholderHTML       = '<span class="' + className + '">' + wysihtml5.INVISIBLE_SPACE + '</span>',          // 6051
          range                 = this.getRange(this.doc),                                                             // 6052
          newRange;                                                                                                    // 6053
                                                                                                                       // 6054
      // Nothing selected, execute and say goodbye                                                                     // 6055
      if (!range) {                                                                                                    // 6056
        method(body, body);                                                                                            // 6057
        return;                                                                                                        // 6058
      }                                                                                                                // 6059
                                                                                                                       // 6060
      var node = range.createContextualFragment(placeholderHTML);                                                      // 6061
      range.insertNode(node);                                                                                          // 6062
                                                                                                                       // 6063
      // Make sure that a potential error doesn't cause our placeholder element to be left as a placeholder            // 6064
      try {                                                                                                            // 6065
        method(range.startContainer, range.endContainer);                                                              // 6066
      } catch(e3) {                                                                                                    // 6067
        setTimeout(function() { throw e3; }, 0);                                                                       // 6068
      }                                                                                                                // 6069
                                                                                                                       // 6070
      caretPlaceholder = this.doc.querySelector("." + className);                                                      // 6071
      if (caretPlaceholder) {                                                                                          // 6072
        newRange = rangy.createRange(this.doc);                                                                        // 6073
        newRange.selectNode(caretPlaceholder);                                                                         // 6074
        newRange.deleteContents();                                                                                     // 6075
        this.setSelection(newRange);                                                                                   // 6076
      } else {                                                                                                         // 6077
        // fallback for when all hell breaks loose                                                                     // 6078
        body.focus();                                                                                                  // 6079
      }                                                                                                                // 6080
                                                                                                                       // 6081
      if (restoreScrollPosition) {                                                                                     // 6082
        body.scrollTop  = oldScrollTop;                                                                                // 6083
        body.scrollLeft = oldScrollLeft;                                                                               // 6084
      }                                                                                                                // 6085
                                                                                                                       // 6086
      // Remove it again, just to make sure that the placeholder is definitely out of the dom tree                     // 6087
      try {                                                                                                            // 6088
        caretPlaceholder.parentNode.removeChild(caretPlaceholder);                                                     // 6089
      } catch(e4) {}                                                                                                   // 6090
    },                                                                                                                 // 6091
                                                                                                                       // 6092
    /**                                                                                                                // 6093
     * Different approach of preserving the selection (doesn't modify the dom)                                         // 6094
     * Takes all text nodes in the selection and saves the selection position in the first and last one                // 6095
     */                                                                                                                // 6096
    executeAndRestoreSimple: function(method) {                                                                        // 6097
      var range = this.getRange(),                                                                                     // 6098
          body  = this.doc.body,                                                                                       // 6099
          newRange,                                                                                                    // 6100
          firstNode,                                                                                                   // 6101
          lastNode,                                                                                                    // 6102
          textNodes,                                                                                                   // 6103
          rangeBackup;                                                                                                 // 6104
                                                                                                                       // 6105
      // Nothing selected, execute and say goodbye                                                                     // 6106
      if (!range) {                                                                                                    // 6107
        method(body, body);                                                                                            // 6108
        return;                                                                                                        // 6109
      }                                                                                                                // 6110
                                                                                                                       // 6111
      textNodes = range.getNodes([3]);                                                                                 // 6112
      firstNode = textNodes[0] || range.startContainer;                                                                // 6113
      lastNode  = textNodes[textNodes.length - 1] || range.endContainer;                                               // 6114
                                                                                                                       // 6115
      rangeBackup = {                                                                                                  // 6116
        collapsed:      range.collapsed,                                                                               // 6117
        startContainer: firstNode,                                                                                     // 6118
        startOffset:    firstNode === range.startContainer ? range.startOffset : 0,                                    // 6119
        endContainer:   lastNode,                                                                                      // 6120
        endOffset:      lastNode === range.endContainer ? range.endOffset : lastNode.length                            // 6121
      };                                                                                                               // 6122
                                                                                                                       // 6123
      try {                                                                                                            // 6124
        method(range.startContainer, range.endContainer);                                                              // 6125
      } catch(e) {                                                                                                     // 6126
        setTimeout(function() { throw e; }, 0);                                                                        // 6127
      }                                                                                                                // 6128
                                                                                                                       // 6129
      newRange = rangy.createRange(this.doc);                                                                          // 6130
      try { newRange.setStart(rangeBackup.startContainer, rangeBackup.startOffset); } catch(e1) {}                     // 6131
      try { newRange.setEnd(rangeBackup.endContainer, rangeBackup.endOffset); } catch(e2) {}                           // 6132
      try { this.setSelection(newRange); } catch(e3) {}                                                                // 6133
    },                                                                                                                 // 6134
                                                                                                                       // 6135
    /**                                                                                                                // 6136
     * Insert html at the caret position and move the cursor after the inserted html                                   // 6137
     *                                                                                                                 // 6138
     * @param {String} html HTML string to insert                                                                      // 6139
     * @example                                                                                                        // 6140
     *    selection.insertHTML("<p>foobar</p>");                                                                       // 6141
     */                                                                                                                // 6142
    insertHTML: function(html) {                                                                                       // 6143
      var range     = rangy.createRange(this.doc),                                                                     // 6144
          node      = range.createContextualFragment(html),                                                            // 6145
          lastChild = node.lastChild;                                                                                  // 6146
      this.insertNode(node);                                                                                           // 6147
      if (lastChild) {                                                                                                 // 6148
        this.setAfter(lastChild);                                                                                      // 6149
      }                                                                                                                // 6150
    },                                                                                                                 // 6151
                                                                                                                       // 6152
    /**                                                                                                                // 6153
     * Insert a node at the caret position and move the cursor behind it                                               // 6154
     *                                                                                                                 // 6155
     * @param {Object} node HTML string to insert                                                                      // 6156
     * @example                                                                                                        // 6157
     *    selection.insertNode(document.createTextNode("foobar"));                                                     // 6158
     */                                                                                                                // 6159
    insertNode: function(node) {                                                                                       // 6160
      var range = this.getRange();                                                                                     // 6161
      if (range) {                                                                                                     // 6162
        range.insertNode(node);                                                                                        // 6163
      }                                                                                                                // 6164
    },                                                                                                                 // 6165
                                                                                                                       // 6166
    /**                                                                                                                // 6167
     * Wraps current selection with the given node                                                                     // 6168
     *                                                                                                                 // 6169
     * @param {Object} node The node to surround the selected elements with                                            // 6170
     */                                                                                                                // 6171
    surround: function(node) {                                                                                         // 6172
      var range = this.getRange();                                                                                     // 6173
      if (!range) {                                                                                                    // 6174
        return;                                                                                                        // 6175
      }                                                                                                                // 6176
                                                                                                                       // 6177
      try {                                                                                                            // 6178
        // This only works when the range boundaries are not overlapping other elements                                // 6179
        range.surroundContents(node);                                                                                  // 6180
        this.selectNode(node);                                                                                         // 6181
      } catch(e) {                                                                                                     // 6182
        // fallback                                                                                                    // 6183
        node.appendChild(range.extractContents());                                                                     // 6184
        range.insertNode(node);                                                                                        // 6185
      }                                                                                                                // 6186
    },                                                                                                                 // 6187
                                                                                                                       // 6188
    /**                                                                                                                // 6189
     * Scroll the current caret position into the view                                                                 // 6190
     * FIXME: This is a bit hacky, there might be a smarter way of doing this                                          // 6191
     *                                                                                                                 // 6192
     * @example                                                                                                        // 6193
     *    selection.scrollIntoView();                                                                                  // 6194
     */                                                                                                                // 6195
    scrollIntoView: function() {                                                                                       // 6196
      var doc           = this.doc,                                                                                    // 6197
          hasScrollBars = doc.documentElement.scrollHeight > doc.documentElement.offsetHeight,                         // 6198
          tempElement   = doc._wysihtml5ScrollIntoViewElement = doc._wysihtml5ScrollIntoViewElement || (function() {   // 6199
            var element = doc.createElement("span");                                                                   // 6200
            // The element needs content in order to be able to calculate it's position properly                       // 6201
            element.innerHTML = wysihtml5.INVISIBLE_SPACE;                                                             // 6202
            return element;                                                                                            // 6203
          })(),                                                                                                        // 6204
          offsetTop;                                                                                                   // 6205
                                                                                                                       // 6206
      if (hasScrollBars) {                                                                                             // 6207
        this.insertNode(tempElement);                                                                                  // 6208
        offsetTop = _getCumulativeOffsetTop(tempElement);                                                              // 6209
        tempElement.parentNode.removeChild(tempElement);                                                               // 6210
        if (offsetTop > doc.body.scrollTop) {                                                                          // 6211
          doc.body.scrollTop = offsetTop;                                                                              // 6212
        }                                                                                                              // 6213
      }                                                                                                                // 6214
    },                                                                                                                 // 6215
                                                                                                                       // 6216
    /**                                                                                                                // 6217
     * Select line where the caret is in                                                                               // 6218
     */                                                                                                                // 6219
    selectLine: function() {                                                                                           // 6220
      if (wysihtml5.browser.supportsSelectionModify()) {                                                               // 6221
        this._selectLine_W3C();                                                                                        // 6222
      } else if (this.doc.selection) {                                                                                 // 6223
        this._selectLine_MSIE();                                                                                       // 6224
      }                                                                                                                // 6225
    },                                                                                                                 // 6226
                                                                                                                       // 6227
    /**                                                                                                                // 6228
     * See https://developer.mozilla.org/en/DOM/Selection/modify                                                       // 6229
     */                                                                                                                // 6230
    _selectLine_W3C: function() {                                                                                      // 6231
      var win       = this.doc.defaultView,                                                                            // 6232
          selection = win.getSelection();                                                                              // 6233
      selection.modify("extend", "left", "lineboundary");                                                              // 6234
      selection.modify("extend", "right", "lineboundary");                                                             // 6235
    },                                                                                                                 // 6236
                                                                                                                       // 6237
    _selectLine_MSIE: function() {                                                                                     // 6238
      var range       = this.doc.selection.createRange(),                                                              // 6239
          rangeTop    = range.boundingTop,                                                                             // 6240
          rangeHeight = range.boundingHeight,                                                                          // 6241
          scrollWidth = this.doc.body.scrollWidth,                                                                     // 6242
          rangeBottom,                                                                                                 // 6243
          rangeEnd,                                                                                                    // 6244
          measureNode,                                                                                                 // 6245
          i,                                                                                                           // 6246
          j;                                                                                                           // 6247
                                                                                                                       // 6248
      if (!range.moveToPoint) {                                                                                        // 6249
        return;                                                                                                        // 6250
      }                                                                                                                // 6251
                                                                                                                       // 6252
      if (rangeTop === 0) {                                                                                            // 6253
        // Don't know why, but when the selection ends at the end of a line                                            // 6254
        // range.boundingTop is 0                                                                                      // 6255
        measureNode = this.doc.createElement("span");                                                                  // 6256
        this.insertNode(measureNode);                                                                                  // 6257
        rangeTop = measureNode.offsetTop;                                                                              // 6258
        measureNode.parentNode.removeChild(measureNode);                                                               // 6259
      }                                                                                                                // 6260
                                                                                                                       // 6261
      rangeTop += 1;                                                                                                   // 6262
                                                                                                                       // 6263
      for (i=-10; i<scrollWidth; i+=2) {                                                                               // 6264
        try {                                                                                                          // 6265
          range.moveToPoint(i, rangeTop);                                                                              // 6266
          break;                                                                                                       // 6267
        } catch(e1) {}                                                                                                 // 6268
      }                                                                                                                // 6269
                                                                                                                       // 6270
      // Investigate the following in order to handle multi line selections                                            // 6271
      // rangeBottom = rangeTop + (rangeHeight ? (rangeHeight - 1) : 0);                                               // 6272
      rangeBottom = rangeTop;                                                                                          // 6273
      rangeEnd = this.doc.selection.createRange();                                                                     // 6274
      for (j=scrollWidth; j>=0; j--) {                                                                                 // 6275
        try {                                                                                                          // 6276
          rangeEnd.moveToPoint(j, rangeBottom);                                                                        // 6277
          break;                                                                                                       // 6278
        } catch(e2) {}                                                                                                 // 6279
      }                                                                                                                // 6280
                                                                                                                       // 6281
      range.setEndPoint("EndToEnd", rangeEnd);                                                                         // 6282
      range.select();                                                                                                  // 6283
    },                                                                                                                 // 6284
                                                                                                                       // 6285
    getText: function() {                                                                                              // 6286
      var selection = this.getSelection();                                                                             // 6287
      return selection ? selection.toString() : "";                                                                    // 6288
    },                                                                                                                 // 6289
                                                                                                                       // 6290
    getNodes: function(nodeType, filter) {                                                                             // 6291
      var range = this.getRange();                                                                                     // 6292
      if (range) {                                                                                                     // 6293
        return range.getNodes([nodeType], filter);                                                                     // 6294
      } else {                                                                                                         // 6295
        return [];                                                                                                     // 6296
      }                                                                                                                // 6297
    },                                                                                                                 // 6298
                                                                                                                       // 6299
    getRange: function() {                                                                                             // 6300
      var selection = this.getSelection();                                                                             // 6301
      return selection && selection.rangeCount && selection.getRangeAt(0);                                             // 6302
    },                                                                                                                 // 6303
                                                                                                                       // 6304
    getSelection: function() {                                                                                         // 6305
      return rangy.getSelection(this.doc.defaultView || this.doc.parentWindow);                                        // 6306
    },                                                                                                                 // 6307
                                                                                                                       // 6308
    setSelection: function(range) {                                                                                    // 6309
      var win       = this.doc.defaultView || this.doc.parentWindow,                                                   // 6310
          selection = rangy.getSelection(win);                                                                         // 6311
      return selection.setSingleRange(range);                                                                          // 6312
    }                                                                                                                  // 6313
  });                                                                                                                  // 6314
                                                                                                                       // 6315
})(wysihtml5);                                                                                                         // 6316
/**                                                                                                                    // 6317
 * Inspired by the rangy CSS Applier module written by Tim Down and licensed under the MIT license.                    // 6318
 * http://code.google.com/p/rangy/                                                                                     // 6319
 *                                                                                                                     // 6320
 * changed in order to be able ...                                                                                     // 6321
 *    - to use custom tags                                                                                             // 6322
 *    - to detect and replace similar css classes via reg exp                                                          // 6323
 */                                                                                                                    // 6324
(function(wysihtml5, rangy) {                                                                                          // 6325
  var defaultTagName = "span";                                                                                         // 6326
                                                                                                                       // 6327
  var REG_EXP_WHITE_SPACE = /\s+/g;                                                                                    // 6328
                                                                                                                       // 6329
  function hasClass(el, cssClass, regExp) {                                                                            // 6330
    if (!el.className) {                                                                                               // 6331
      return false;                                                                                                    // 6332
    }                                                                                                                  // 6333
                                                                                                                       // 6334
    var matchingClassNames = el.className.match(regExp) || [];                                                         // 6335
    return matchingClassNames[matchingClassNames.length - 1] === cssClass;                                             // 6336
  }                                                                                                                    // 6337
                                                                                                                       // 6338
  function addClass(el, cssClass, regExp) {                                                                            // 6339
    if (el.className) {                                                                                                // 6340
      removeClass(el, regExp);                                                                                         // 6341
      el.className += " " + cssClass;                                                                                  // 6342
    } else {                                                                                                           // 6343
      el.className = cssClass;                                                                                         // 6344
    }                                                                                                                  // 6345
  }                                                                                                                    // 6346
                                                                                                                       // 6347
  function removeClass(el, regExp) {                                                                                   // 6348
    if (el.className) {                                                                                                // 6349
      el.className = el.className.replace(regExp, "");                                                                 // 6350
    }                                                                                                                  // 6351
  }                                                                                                                    // 6352
                                                                                                                       // 6353
  function hasSameClasses(el1, el2) {                                                                                  // 6354
    return el1.className.replace(REG_EXP_WHITE_SPACE, " ") == el2.className.replace(REG_EXP_WHITE_SPACE, " ");         // 6355
  }                                                                                                                    // 6356
                                                                                                                       // 6357
  function replaceWithOwnChildren(el) {                                                                                // 6358
    var parent = el.parentNode;                                                                                        // 6359
    while (el.firstChild) {                                                                                            // 6360
      parent.insertBefore(el.firstChild, el);                                                                          // 6361
    }                                                                                                                  // 6362
    parent.removeChild(el);                                                                                            // 6363
  }                                                                                                                    // 6364
                                                                                                                       // 6365
  function elementsHaveSameNonClassAttributes(el1, el2) {                                                              // 6366
    if (el1.attributes.length != el2.attributes.length) {                                                              // 6367
      return false;                                                                                                    // 6368
    }                                                                                                                  // 6369
    for (var i = 0, len = el1.attributes.length, attr1, attr2, name; i < len; ++i) {                                   // 6370
      attr1 = el1.attributes[i];                                                                                       // 6371
      name = attr1.name;                                                                                               // 6372
      if (name != "class") {                                                                                           // 6373
        attr2 = el2.attributes.getNamedItem(name);                                                                     // 6374
        if (attr1.specified != attr2.specified) {                                                                      // 6375
          return false;                                                                                                // 6376
        }                                                                                                              // 6377
        if (attr1.specified && attr1.nodeValue !== attr2.nodeValue) {                                                  // 6378
          return false;                                                                                                // 6379
        }                                                                                                              // 6380
      }                                                                                                                // 6381
    }                                                                                                                  // 6382
    return true;                                                                                                       // 6383
  }                                                                                                                    // 6384
                                                                                                                       // 6385
  function isSplitPoint(node, offset) {                                                                                // 6386
    if (rangy.dom.isCharacterDataNode(node)) {                                                                         // 6387
      if (offset == 0) {                                                                                               // 6388
        return !!node.previousSibling;                                                                                 // 6389
      } else if (offset == node.length) {                                                                              // 6390
        return !!node.nextSibling;                                                                                     // 6391
      } else {                                                                                                         // 6392
        return true;                                                                                                   // 6393
      }                                                                                                                // 6394
    }                                                                                                                  // 6395
                                                                                                                       // 6396
    return offset > 0 && offset < node.childNodes.length;                                                              // 6397
  }                                                                                                                    // 6398
                                                                                                                       // 6399
  function splitNodeAt(node, descendantNode, descendantOffset) {                                                       // 6400
    var newNode;                                                                                                       // 6401
    if (rangy.dom.isCharacterDataNode(descendantNode)) {                                                               // 6402
      if (descendantOffset == 0) {                                                                                     // 6403
        descendantOffset = rangy.dom.getNodeIndex(descendantNode);                                                     // 6404
        descendantNode = descendantNode.parentNode;                                                                    // 6405
      } else if (descendantOffset == descendantNode.length) {                                                          // 6406
        descendantOffset = rangy.dom.getNodeIndex(descendantNode) + 1;                                                 // 6407
        descendantNode = descendantNode.parentNode;                                                                    // 6408
      } else {                                                                                                         // 6409
        newNode = rangy.dom.splitDataNode(descendantNode, descendantOffset);                                           // 6410
      }                                                                                                                // 6411
    }                                                                                                                  // 6412
    if (!newNode) {                                                                                                    // 6413
      newNode = descendantNode.cloneNode(false);                                                                       // 6414
      if (newNode.id) {                                                                                                // 6415
        newNode.removeAttribute("id");                                                                                 // 6416
      }                                                                                                                // 6417
      var child;                                                                                                       // 6418
      while ((child = descendantNode.childNodes[descendantOffset])) {                                                  // 6419
        newNode.appendChild(child);                                                                                    // 6420
      }                                                                                                                // 6421
      rangy.dom.insertAfter(newNode, descendantNode);                                                                  // 6422
    }                                                                                                                  // 6423
    return (descendantNode == node) ? newNode : splitNodeAt(node, newNode.parentNode, rangy.dom.getNodeIndex(newNode));
  }                                                                                                                    // 6425
                                                                                                                       // 6426
  function Merge(firstNode) {                                                                                          // 6427
    this.isElementMerge = (firstNode.nodeType == wysihtml5.ELEMENT_NODE);                                              // 6428
    this.firstTextNode = this.isElementMerge ? firstNode.lastChild : firstNode;                                        // 6429
    this.textNodes = [this.firstTextNode];                                                                             // 6430
  }                                                                                                                    // 6431
                                                                                                                       // 6432
  Merge.prototype = {                                                                                                  // 6433
    doMerge: function() {                                                                                              // 6434
      var textBits = [], textNode, parent, text;                                                                       // 6435
      for (var i = 0, len = this.textNodes.length; i < len; ++i) {                                                     // 6436
        textNode = this.textNodes[i];                                                                                  // 6437
        parent = textNode.parentNode;                                                                                  // 6438
        textBits[i] = textNode.data;                                                                                   // 6439
        if (i) {                                                                                                       // 6440
          parent.removeChild(textNode);                                                                                // 6441
          if (!parent.hasChildNodes()) {                                                                               // 6442
            parent.parentNode.removeChild(parent);                                                                     // 6443
          }                                                                                                            // 6444
        }                                                                                                              // 6445
      }                                                                                                                // 6446
      this.firstTextNode.data = text = textBits.join("");                                                              // 6447
      return text;                                                                                                     // 6448
    },                                                                                                                 // 6449
                                                                                                                       // 6450
    getLength: function() {                                                                                            // 6451
      var i = this.textNodes.length, len = 0;                                                                          // 6452
      while (i--) {                                                                                                    // 6453
        len += this.textNodes[i].length;                                                                               // 6454
      }                                                                                                                // 6455
      return len;                                                                                                      // 6456
    },                                                                                                                 // 6457
                                                                                                                       // 6458
    toString: function() {                                                                                             // 6459
      var textBits = [];                                                                                               // 6460
      for (var i = 0, len = this.textNodes.length; i < len; ++i) {                                                     // 6461
        textBits[i] = "'" + this.textNodes[i].data + "'";                                                              // 6462
      }                                                                                                                // 6463
      return "[Merge(" + textBits.join(",") + ")]";                                                                    // 6464
    }                                                                                                                  // 6465
  };                                                                                                                   // 6466
                                                                                                                       // 6467
  function HTMLApplier(tagNames, cssClass, similarClassRegExp, normalize) {                                            // 6468
    this.tagNames = tagNames || [defaultTagName];                                                                      // 6469
    this.cssClass = cssClass || "";                                                                                    // 6470
    this.similarClassRegExp = similarClassRegExp;                                                                      // 6471
    this.normalize = normalize;                                                                                        // 6472
    this.applyToAnyTagName = false;                                                                                    // 6473
  }                                                                                                                    // 6474
                                                                                                                       // 6475
  HTMLApplier.prototype = {                                                                                            // 6476
    getAncestorWithClass: function(node) {                                                                             // 6477
      var cssClassMatch;                                                                                               // 6478
      while (node) {                                                                                                   // 6479
        cssClassMatch = this.cssClass ? hasClass(node, this.cssClass, this.similarClassRegExp) : true;                 // 6480
        if (node.nodeType == wysihtml5.ELEMENT_NODE && rangy.dom.arrayContains(this.tagNames, node.tagName.toLowerCase()) && cssClassMatch) {
          return node;                                                                                                 // 6482
        }                                                                                                              // 6483
        node = node.parentNode;                                                                                        // 6484
      }                                                                                                                // 6485
      return false;                                                                                                    // 6486
    },                                                                                                                 // 6487
                                                                                                                       // 6488
    // Normalizes nodes after applying a CSS class to a Range.                                                         // 6489
    postApply: function(textNodes, range) {                                                                            // 6490
      var firstNode = textNodes[0], lastNode = textNodes[textNodes.length - 1];                                        // 6491
                                                                                                                       // 6492
      var merges = [], currentMerge;                                                                                   // 6493
                                                                                                                       // 6494
      var rangeStartNode = firstNode, rangeEndNode = lastNode;                                                         // 6495
      var rangeStartOffset = 0, rangeEndOffset = lastNode.length;                                                      // 6496
                                                                                                                       // 6497
      var textNode, precedingTextNode;                                                                                 // 6498
                                                                                                                       // 6499
      for (var i = 0, len = textNodes.length; i < len; ++i) {                                                          // 6500
        textNode = textNodes[i];                                                                                       // 6501
        precedingTextNode = this.getAdjacentMergeableTextNode(textNode.parentNode, false);                             // 6502
        if (precedingTextNode) {                                                                                       // 6503
          if (!currentMerge) {                                                                                         // 6504
            currentMerge = new Merge(precedingTextNode);                                                               // 6505
            merges.push(currentMerge);                                                                                 // 6506
          }                                                                                                            // 6507
          currentMerge.textNodes.push(textNode);                                                                       // 6508
          if (textNode === firstNode) {                                                                                // 6509
            rangeStartNode = currentMerge.firstTextNode;                                                               // 6510
            rangeStartOffset = rangeStartNode.length;                                                                  // 6511
          }                                                                                                            // 6512
          if (textNode === lastNode) {                                                                                 // 6513
            rangeEndNode = currentMerge.firstTextNode;                                                                 // 6514
            rangeEndOffset = currentMerge.getLength();                                                                 // 6515
          }                                                                                                            // 6516
        } else {                                                                                                       // 6517
          currentMerge = null;                                                                                         // 6518
        }                                                                                                              // 6519
      }                                                                                                                // 6520
                                                                                                                       // 6521
      // Test whether the first node after the range needs merging                                                     // 6522
      var nextTextNode = this.getAdjacentMergeableTextNode(lastNode.parentNode, true);                                 // 6523
      if (nextTextNode) {                                                                                              // 6524
        if (!currentMerge) {                                                                                           // 6525
          currentMerge = new Merge(lastNode);                                                                          // 6526
          merges.push(currentMerge);                                                                                   // 6527
        }                                                                                                              // 6528
        currentMerge.textNodes.push(nextTextNode);                                                                     // 6529
      }                                                                                                                // 6530
                                                                                                                       // 6531
      // Do the merges                                                                                                 // 6532
      if (merges.length) {                                                                                             // 6533
        for (i = 0, len = merges.length; i < len; ++i) {                                                               // 6534
          merges[i].doMerge();                                                                                         // 6535
        }                                                                                                              // 6536
        // Set the range boundaries                                                                                    // 6537
        range.setStart(rangeStartNode, rangeStartOffset);                                                              // 6538
        range.setEnd(rangeEndNode, rangeEndOffset);                                                                    // 6539
      }                                                                                                                // 6540
    },                                                                                                                 // 6541
                                                                                                                       // 6542
    getAdjacentMergeableTextNode: function(node, forward) {                                                            // 6543
        var isTextNode = (node.nodeType == wysihtml5.TEXT_NODE);                                                       // 6544
        var el = isTextNode ? node.parentNode : node;                                                                  // 6545
        var adjacentNode;                                                                                              // 6546
        var propName = forward ? "nextSibling" : "previousSibling";                                                    // 6547
        if (isTextNode) {                                                                                              // 6548
          // Can merge if the node's previous/next sibling is a text node                                              // 6549
          adjacentNode = node[propName];                                                                               // 6550
          if (adjacentNode && adjacentNode.nodeType == wysihtml5.TEXT_NODE) {                                          // 6551
            return adjacentNode;                                                                                       // 6552
          }                                                                                                            // 6553
        } else {                                                                                                       // 6554
          // Compare element with its sibling                                                                          // 6555
          adjacentNode = el[propName];                                                                                 // 6556
          if (adjacentNode && this.areElementsMergeable(node, adjacentNode)) {                                         // 6557
            return adjacentNode[forward ? "firstChild" : "lastChild"];                                                 // 6558
          }                                                                                                            // 6559
        }                                                                                                              // 6560
        return null;                                                                                                   // 6561
    },                                                                                                                 // 6562
                                                                                                                       // 6563
    areElementsMergeable: function(el1, el2) {                                                                         // 6564
      return rangy.dom.arrayContains(this.tagNames, (el1.tagName || "").toLowerCase())                                 // 6565
        && rangy.dom.arrayContains(this.tagNames, (el2.tagName || "").toLowerCase())                                   // 6566
        && hasSameClasses(el1, el2)                                                                                    // 6567
        && elementsHaveSameNonClassAttributes(el1, el2);                                                               // 6568
    },                                                                                                                 // 6569
                                                                                                                       // 6570
    createContainer: function(doc) {                                                                                   // 6571
      var el = doc.createElement(this.tagNames[0]);                                                                    // 6572
      if (this.cssClass) {                                                                                             // 6573
        el.className = this.cssClass;                                                                                  // 6574
      }                                                                                                                // 6575
      return el;                                                                                                       // 6576
    },                                                                                                                 // 6577
                                                                                                                       // 6578
    applyToTextNode: function(textNode) {                                                                              // 6579
      var parent = textNode.parentNode;                                                                                // 6580
      if (parent.childNodes.length == 1 && rangy.dom.arrayContains(this.tagNames, parent.tagName.toLowerCase())) {     // 6581
        if (this.cssClass) {                                                                                           // 6582
          addClass(parent, this.cssClass, this.similarClassRegExp);                                                    // 6583
        }                                                                                                              // 6584
      } else {                                                                                                         // 6585
        var el = this.createContainer(rangy.dom.getDocument(textNode));                                                // 6586
        textNode.parentNode.insertBefore(el, textNode);                                                                // 6587
        el.appendChild(textNode);                                                                                      // 6588
      }                                                                                                                // 6589
    },                                                                                                                 // 6590
                                                                                                                       // 6591
    isRemovable: function(el) {                                                                                        // 6592
      return rangy.dom.arrayContains(this.tagNames, el.tagName.toLowerCase()) && wysihtml5.lang.string(el.className).trim() == this.cssClass;
    },                                                                                                                 // 6594
                                                                                                                       // 6595
    undoToTextNode: function(textNode, range, ancestorWithClass) {                                                     // 6596
      if (!range.containsNode(ancestorWithClass)) {                                                                    // 6597
        // Split out the portion of the ancestor from which we can remove the CSS class                                // 6598
        var ancestorRange = range.cloneRange();                                                                        // 6599
        ancestorRange.selectNode(ancestorWithClass);                                                                   // 6600
                                                                                                                       // 6601
        if (ancestorRange.isPointInRange(range.endContainer, range.endOffset) && isSplitPoint(range.endContainer, range.endOffset)) {
          splitNodeAt(ancestorWithClass, range.endContainer, range.endOffset);                                         // 6603
          range.setEndAfter(ancestorWithClass);                                                                        // 6604
        }                                                                                                              // 6605
        if (ancestorRange.isPointInRange(range.startContainer, range.startOffset) && isSplitPoint(range.startContainer, range.startOffset)) {
          ancestorWithClass = splitNodeAt(ancestorWithClass, range.startContainer, range.startOffset);                 // 6607
        }                                                                                                              // 6608
      }                                                                                                                // 6609
                                                                                                                       // 6610
      if (this.similarClassRegExp) {                                                                                   // 6611
        removeClass(ancestorWithClass, this.similarClassRegExp);                                                       // 6612
      }                                                                                                                // 6613
      if (this.isRemovable(ancestorWithClass)) {                                                                       // 6614
        replaceWithOwnChildren(ancestorWithClass);                                                                     // 6615
      }                                                                                                                // 6616
    },                                                                                                                 // 6617
                                                                                                                       // 6618
    applyToRange: function(range) {                                                                                    // 6619
        var textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                         // 6620
        if (!textNodes.length) {                                                                                       // 6621
          try {                                                                                                        // 6622
            var node = this.createContainer(range.endContainer.ownerDocument);                                         // 6623
            range.surroundContents(node);                                                                              // 6624
            this.selectNode(range, node);                                                                              // 6625
            return;                                                                                                    // 6626
          } catch(e) {}                                                                                                // 6627
        }                                                                                                              // 6628
                                                                                                                       // 6629
        range.splitBoundaries();                                                                                       // 6630
        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                             // 6631
                                                                                                                       // 6632
        if (textNodes.length) {                                                                                        // 6633
          var textNode;                                                                                                // 6634
                                                                                                                       // 6635
          for (var i = 0, len = textNodes.length; i < len; ++i) {                                                      // 6636
            textNode = textNodes[i];                                                                                   // 6637
            if (!this.getAncestorWithClass(textNode)) {                                                                // 6638
              this.applyToTextNode(textNode);                                                                          // 6639
            }                                                                                                          // 6640
          }                                                                                                            // 6641
                                                                                                                       // 6642
          range.setStart(textNodes[0], 0);                                                                             // 6643
          textNode = textNodes[textNodes.length - 1];                                                                  // 6644
          range.setEnd(textNode, textNode.length);                                                                     // 6645
                                                                                                                       // 6646
          if (this.normalize) {                                                                                        // 6647
            this.postApply(textNodes, range);                                                                          // 6648
          }                                                                                                            // 6649
        }                                                                                                              // 6650
    },                                                                                                                 // 6651
                                                                                                                       // 6652
    undoToRange: function(range) {                                                                                     // 6653
      var textNodes = range.getNodes([wysihtml5.TEXT_NODE]), textNode, ancestorWithClass;                              // 6654
      if (textNodes.length) {                                                                                          // 6655
        range.splitBoundaries();                                                                                       // 6656
        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                             // 6657
      } else {                                                                                                         // 6658
        var doc = range.endContainer.ownerDocument,                                                                    // 6659
            node = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);                                                      // 6660
        range.insertNode(node);                                                                                        // 6661
        range.selectNode(node);                                                                                        // 6662
        textNodes = [node];                                                                                            // 6663
      }                                                                                                                // 6664
                                                                                                                       // 6665
      for (var i = 0, len = textNodes.length; i < len; ++i) {                                                          // 6666
        textNode = textNodes[i];                                                                                       // 6667
        ancestorWithClass = this.getAncestorWithClass(textNode);                                                       // 6668
        if (ancestorWithClass) {                                                                                       // 6669
          this.undoToTextNode(textNode, range, ancestorWithClass);                                                     // 6670
        }                                                                                                              // 6671
      }                                                                                                                // 6672
                                                                                                                       // 6673
      if (len == 1) {                                                                                                  // 6674
        this.selectNode(range, textNodes[0]);                                                                          // 6675
      } else {                                                                                                         // 6676
        range.setStart(textNodes[0], 0);                                                                               // 6677
        textNode = textNodes[textNodes.length - 1];                                                                    // 6678
        range.setEnd(textNode, textNode.length);                                                                       // 6679
                                                                                                                       // 6680
        if (this.normalize) {                                                                                          // 6681
          this.postApply(textNodes, range);                                                                            // 6682
        }                                                                                                              // 6683
      }                                                                                                                // 6684
    },                                                                                                                 // 6685
                                                                                                                       // 6686
    selectNode: function(range, node) {                                                                                // 6687
      var isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,                                                  // 6688
          canHaveHTML     = "canHaveHTML" in node ? node.canHaveHTML : true,                                           // 6689
          content         = isElement ? node.innerHTML : node.data,                                                    // 6690
          isEmpty         = (content === "" || content === wysihtml5.INVISIBLE_SPACE);                                 // 6691
                                                                                                                       // 6692
      if (isEmpty && isElement && canHaveHTML) {                                                                       // 6693
        // Make sure that caret is visible in node by inserting a zero width no breaking space                         // 6694
        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}                                                // 6695
      }                                                                                                                // 6696
      range.selectNodeContents(node);                                                                                  // 6697
      if (isEmpty && isElement) {                                                                                      // 6698
        range.collapse(false);                                                                                         // 6699
      } else if (isEmpty) {                                                                                            // 6700
        range.setStartAfter(node);                                                                                     // 6701
        range.setEndAfter(node);                                                                                       // 6702
      }                                                                                                                // 6703
    },                                                                                                                 // 6704
                                                                                                                       // 6705
    getTextSelectedByRange: function(textNode, range) {                                                                // 6706
      var textRange = range.cloneRange();                                                                              // 6707
      textRange.selectNodeContents(textNode);                                                                          // 6708
                                                                                                                       // 6709
      var intersectionRange = textRange.intersection(range);                                                           // 6710
      var text = intersectionRange ? intersectionRange.toString() : "";                                                // 6711
      textRange.detach();                                                                                              // 6712
                                                                                                                       // 6713
      return text;                                                                                                     // 6714
    },                                                                                                                 // 6715
                                                                                                                       // 6716
    isAppliedToRange: function(range) {                                                                                // 6717
      var ancestors = [],                                                                                              // 6718
          ancestor,                                                                                                    // 6719
          textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                           // 6720
      if (!textNodes.length) {                                                                                         // 6721
        ancestor = this.getAncestorWithClass(range.startContainer);                                                    // 6722
        return ancestor ? [ancestor] : false;                                                                          // 6723
      }                                                                                                                // 6724
                                                                                                                       // 6725
      for (var i = 0, len = textNodes.length, selectedText; i < len; ++i) {                                            // 6726
        selectedText = this.getTextSelectedByRange(textNodes[i], range);                                               // 6727
        ancestor = this.getAncestorWithClass(textNodes[i]);                                                            // 6728
        if (selectedText != "" && !ancestor) {                                                                         // 6729
          return false;                                                                                                // 6730
        } else {                                                                                                       // 6731
          ancestors.push(ancestor);                                                                                    // 6732
        }                                                                                                              // 6733
      }                                                                                                                // 6734
      return ancestors;                                                                                                // 6735
    },                                                                                                                 // 6736
                                                                                                                       // 6737
    toggleRange: function(range) {                                                                                     // 6738
      if (this.isAppliedToRange(range)) {                                                                              // 6739
        this.undoToRange(range);                                                                                       // 6740
      } else {                                                                                                         // 6741
        this.applyToRange(range);                                                                                      // 6742
      }                                                                                                                // 6743
    }                                                                                                                  // 6744
  };                                                                                                                   // 6745
                                                                                                                       // 6746
  wysihtml5.selection.HTMLApplier = HTMLApplier;                                                                       // 6747
                                                                                                                       // 6748
})(wysihtml5, rangy);/**                                                                                               // 6749
 * Rich Text Query/Formatting Commands                                                                                 // 6750
 *                                                                                                                     // 6751
 * @example                                                                                                            // 6752
 *    var commands = new wysihtml5.Commands(editor);                                                                   // 6753
 */                                                                                                                    // 6754
wysihtml5.Commands = Base.extend(                                                                                      // 6755
  /** @scope wysihtml5.Commands.prototype */ {                                                                         // 6756
  constructor: function(editor) {                                                                                      // 6757
    this.editor   = editor;                                                                                            // 6758
    this.composer = editor.composer;                                                                                   // 6759
    this.doc      = this.composer.doc;                                                                                 // 6760
  },                                                                                                                   // 6761
                                                                                                                       // 6762
  /**                                                                                                                  // 6763
   * Check whether the browser supports the given command                                                              // 6764
   *                                                                                                                   // 6765
   * @param {String} command The command string which to check (eg. "bold", "italic", "insertUnorderedList")           // 6766
   * @example                                                                                                          // 6767
   *    commands.supports("createLink");                                                                               // 6768
   */                                                                                                                  // 6769
  support: function(command) {                                                                                         // 6770
    return wysihtml5.browser.supportsCommand(this.doc, command);                                                       // 6771
  },                                                                                                                   // 6772
                                                                                                                       // 6773
  /**                                                                                                                  // 6774
   * Check whether the browser supports the given command                                                              // 6775
   *                                                                                                                   // 6776
   * @param {String} command The command string which to execute (eg. "bold", "italic", "insertUnorderedList")         // 6777
   * @param {String} [value] The command value parameter, needed for some commands ("createLink", "insertImage", ...), optional for commands that don't require one ("bold", "underline", ...)
   * @example                                                                                                          // 6779
   *    commands.exec("insertImage", "http://a1.twimg.com/profile_images/113868655/schrei_twitter_reasonably_small.jpg");
   */                                                                                                                  // 6781
  exec: function(command, value) {                                                                                     // 6782
    var obj     = wysihtml5.commands[command],                                                                         // 6783
        args    = wysihtml5.lang.array(arguments).get(),                                                               // 6784
        method  = obj && obj.exec,                                                                                     // 6785
        result  = null;                                                                                                // 6786
                                                                                                                       // 6787
    this.editor.fire("beforecommand:composer");                                                                        // 6788
                                                                                                                       // 6789
    if (method) {                                                                                                      // 6790
      args.unshift(this.composer);                                                                                     // 6791
      result = method.apply(obj, args);                                                                                // 6792
    } else {                                                                                                           // 6793
      try {                                                                                                            // 6794
        // try/catch for buggy firefox                                                                                 // 6795
        result = this.doc.execCommand(command, false, value);                                                          // 6796
      } catch(e) {}                                                                                                    // 6797
    }                                                                                                                  // 6798
                                                                                                                       // 6799
    this.editor.fire("aftercommand:composer");                                                                         // 6800
    return result;                                                                                                     // 6801
  },                                                                                                                   // 6802
                                                                                                                       // 6803
  /**                                                                                                                  // 6804
   * Check whether the current command is active                                                                       // 6805
   * If the caret is within a bold text, then calling this with command "bold" should return true                      // 6806
   *                                                                                                                   // 6807
   * @param {String} command The command string which to check (eg. "bold", "italic", "insertUnorderedList")           // 6808
   * @param {String} [commandValue] The command value parameter (eg. for "insertImage" the image src)                  // 6809
   * @return {Boolean} Whether the command is active                                                                   // 6810
   * @example                                                                                                          // 6811
   *    var isCurrentSelectionBold = commands.state("bold");                                                           // 6812
   */                                                                                                                  // 6813
  state: function(command, commandValue) {                                                                             // 6814
    var obj     = wysihtml5.commands[command],                                                                         // 6815
        args    = wysihtml5.lang.array(arguments).get(),                                                               // 6816
        method  = obj && obj.state;                                                                                    // 6817
    if (method) {                                                                                                      // 6818
      args.unshift(this.composer);                                                                                     // 6819
      return method.apply(obj, args);                                                                                  // 6820
    } else {                                                                                                           // 6821
      try {                                                                                                            // 6822
        // try/catch for buggy firefox                                                                                 // 6823
        return this.doc.queryCommandState(command);                                                                    // 6824
      } catch(e) {                                                                                                     // 6825
        return false;                                                                                                  // 6826
      }                                                                                                                // 6827
    }                                                                                                                  // 6828
  },                                                                                                                   // 6829
                                                                                                                       // 6830
  /**                                                                                                                  // 6831
   * Get the current command's value                                                                                   // 6832
   *                                                                                                                   // 6833
   * @param {String} command The command string which to check (eg. "formatBlock")                                     // 6834
   * @return {String} The command value                                                                                // 6835
   * @example                                                                                                          // 6836
   *    var currentBlockElement = commands.value("formatBlock");                                                       // 6837
   */                                                                                                                  // 6838
  value: function(command) {                                                                                           // 6839
    var obj     = wysihtml5.commands[command],                                                                         // 6840
        method  = obj && obj.value;                                                                                    // 6841
    if (method) {                                                                                                      // 6842
      return method.call(obj, this.composer, command);                                                                 // 6843
    } else {                                                                                                           // 6844
      try {                                                                                                            // 6845
        // try/catch for buggy firefox                                                                                 // 6846
        return this.doc.queryCommandValue(command);                                                                    // 6847
      } catch(e) {                                                                                                     // 6848
        return null;                                                                                                   // 6849
      }                                                                                                                // 6850
    }                                                                                                                  // 6851
  }                                                                                                                    // 6852
});                                                                                                                    // 6853
(function(wysihtml5) {                                                                                                 // 6854
  var undef;                                                                                                           // 6855
                                                                                                                       // 6856
  wysihtml5.commands.bold = {                                                                                          // 6857
    exec: function(composer, command) {                                                                                // 6858
      return wysihtml5.commands.formatInline.exec(composer, command, "b");                                             // 6859
    },                                                                                                                 // 6860
                                                                                                                       // 6861
    state: function(composer, command, color) {                                                                        // 6862
      // element.ownerDocument.queryCommandState("bold") results:                                                      // 6863
      // firefox: only <b>                                                                                             // 6864
      // chrome:  <b>, <strong>, <h1>, <h2>, ...                                                                       // 6865
      // ie:      <b>, <strong>                                                                                        // 6866
      // opera:   <b>, <strong>                                                                                        // 6867
      return wysihtml5.commands.formatInline.state(composer, command, "b");                                            // 6868
    },                                                                                                                 // 6869
                                                                                                                       // 6870
    value: function() {                                                                                                // 6871
      return undef;                                                                                                    // 6872
    }                                                                                                                  // 6873
  };                                                                                                                   // 6874
})(wysihtml5);                                                                                                         // 6875
                                                                                                                       // 6876
(function(wysihtml5) {                                                                                                 // 6877
  var undef,                                                                                                           // 6878
      NODE_NAME = "A",                                                                                                 // 6879
      dom       = wysihtml5.dom;                                                                                       // 6880
                                                                                                                       // 6881
  function _removeFormat(composer, anchors) {                                                                          // 6882
    var length  = anchors.length,                                                                                      // 6883
        i       = 0,                                                                                                   // 6884
        anchor,                                                                                                        // 6885
        codeElement,                                                                                                   // 6886
        textContent;                                                                                                   // 6887
    for (; i<length; i++) {                                                                                            // 6888
      anchor      = anchors[i];                                                                                        // 6889
      codeElement = dom.getParentElement(anchor, { nodeName: "code" });                                                // 6890
      textContent = dom.getTextContent(anchor);                                                                        // 6891
                                                                                                                       // 6892
      // if <a> contains url-like text content, rename it to <code> to prevent re-autolinking                          // 6893
      // else replace <a> with its childNodes                                                                          // 6894
      if (textContent.match(dom.autoLink.URL_REG_EXP) && !codeElement) {                                               // 6895
        // <code> element is used to prevent later auto-linking of the content                                         // 6896
        codeElement = dom.renameElement(anchor, "code");                                                               // 6897
      } else {                                                                                                         // 6898
        dom.replaceWithChildNodes(anchor);                                                                             // 6899
      }                                                                                                                // 6900
    }                                                                                                                  // 6901
  }                                                                                                                    // 6902
                                                                                                                       // 6903
  function _format(composer, attributes) {                                                                             // 6904
    var doc             = composer.doc,                                                                                // 6905
        tempClass       = "_wysihtml5-temp-" + (+new Date()),                                                          // 6906
        tempClassRegExp = /non-matching-class/g,                                                                       // 6907
        i               = 0,                                                                                           // 6908
        length,                                                                                                        // 6909
        anchors,                                                                                                       // 6910
        anchor,                                                                                                        // 6911
        hasElementChild,                                                                                               // 6912
        isEmpty,                                                                                                       // 6913
        elementToSetCaretAfter,                                                                                        // 6914
        textContent,                                                                                                   // 6915
        whiteSpace,                                                                                                    // 6916
        j;                                                                                                             // 6917
    wysihtml5.commands.formatInline.exec(composer, undef, NODE_NAME, tempClass, tempClassRegExp);                      // 6918
    anchors = doc.querySelectorAll(NODE_NAME + "." + tempClass);                                                       // 6919
    length  = anchors.length;                                                                                          // 6920
    for (; i<length; i++) {                                                                                            // 6921
      anchor = anchors[i];                                                                                             // 6922
      anchor.removeAttribute("class");                                                                                 // 6923
      for (j in attributes) {                                                                                          // 6924
        anchor.setAttribute(j, attributes[j]);                                                                         // 6925
      }                                                                                                                // 6926
    }                                                                                                                  // 6927
                                                                                                                       // 6928
    elementToSetCaretAfter = anchor;                                                                                   // 6929
    if (length === 1) {                                                                                                // 6930
      textContent = dom.getTextContent(anchor);                                                                        // 6931
      hasElementChild = !!anchor.querySelector("*");                                                                   // 6932
      isEmpty = textContent === "" || textContent === wysihtml5.INVISIBLE_SPACE;                                       // 6933
      if (!hasElementChild && isEmpty) {                                                                               // 6934
        dom.setTextContent(anchor, attributes.text || anchor.href);                                                    // 6935
        whiteSpace = doc.createTextNode(" ");                                                                          // 6936
        composer.selection.setAfter(anchor);                                                                           // 6937
        composer.selection.insertNode(whiteSpace);                                                                     // 6938
        elementToSetCaretAfter = whiteSpace;                                                                           // 6939
      }                                                                                                                // 6940
    }                                                                                                                  // 6941
    composer.selection.setAfter(elementToSetCaretAfter);                                                               // 6942
  }                                                                                                                    // 6943
                                                                                                                       // 6944
  wysihtml5.commands.createLink = {                                                                                    // 6945
    /**                                                                                                                // 6946
     * TODO: Use HTMLApplier or formatInline here                                                                      // 6947
     *                                                                                                                 // 6948
     * Turns selection into a link                                                                                     // 6949
     * If selection is already a link, it removes the link and wraps it with a <code> element                          // 6950
     * The <code> element is needed to avoid auto linking                                                              // 6951
     *                                                                                                                 // 6952
     * @example                                                                                                        // 6953
     *    // either ...                                                                                                // 6954
     *    wysihtml5.commands.createLink.exec(composer, "createLink", "http://www.google.de");                          // 6955
     *    // ... or ...                                                                                                // 6956
     *    wysihtml5.commands.createLink.exec(composer, "createLink", { href: "http://www.google.de", target: "_blank" });
     */                                                                                                                // 6958
    exec: function(composer, command, value) {                                                                         // 6959
      var anchors = this.state(composer, command);                                                                     // 6960
      if (anchors) {                                                                                                   // 6961
        // Selection contains links                                                                                    // 6962
        composer.selection.executeAndRestore(function() {                                                              // 6963
          _removeFormat(composer, anchors);                                                                            // 6964
        });                                                                                                            // 6965
      } else {                                                                                                         // 6966
        // Create links                                                                                                // 6967
        value = typeof(value) === "object" ? value : { href: value };                                                  // 6968
        _format(composer, value);                                                                                      // 6969
      }                                                                                                                // 6970
    },                                                                                                                 // 6971
                                                                                                                       // 6972
    state: function(composer, command) {                                                                               // 6973
      return wysihtml5.commands.formatInline.state(composer, command, "A");                                            // 6974
    },                                                                                                                 // 6975
                                                                                                                       // 6976
    value: function() {                                                                                                // 6977
      return undef;                                                                                                    // 6978
    }                                                                                                                  // 6979
  };                                                                                                                   // 6980
})(wysihtml5);/**                                                                                                      // 6981
 * document.execCommand("fontSize") will create either inline styles (firefox, chrome) or use font tags                // 6982
 * which we don't want                                                                                                 // 6983
 * Instead we set a css class                                                                                          // 6984
 */                                                                                                                    // 6985
(function(wysihtml5) {                                                                                                 // 6986
  var undef,                                                                                                           // 6987
      REG_EXP = /wysiwyg-font-size-[a-z\-]+/g;                                                                         // 6988
                                                                                                                       // 6989
  wysihtml5.commands.fontSize = {                                                                                      // 6990
    exec: function(composer, command, size) {                                                                          // 6991
      return wysihtml5.commands.formatInline.exec(composer, command, "span", "wysiwyg-font-size-" + size, REG_EXP);    // 6992
    },                                                                                                                 // 6993
                                                                                                                       // 6994
    state: function(composer, command, size) {                                                                         // 6995
      return wysihtml5.commands.formatInline.state(composer, command, "span", "wysiwyg-font-size-" + size, REG_EXP);   // 6996
    },                                                                                                                 // 6997
                                                                                                                       // 6998
    value: function() {                                                                                                // 6999
      return undef;                                                                                                    // 7000
    }                                                                                                                  // 7001
  };                                                                                                                   // 7002
})(wysihtml5);                                                                                                         // 7003
/**                                                                                                                    // 7004
 * document.execCommand("foreColor") will create either inline styles (firefox, chrome) or use font tags               // 7005
 * which we don't want                                                                                                 // 7006
 * Instead we set a css class                                                                                          // 7007
 */                                                                                                                    // 7008
(function(wysihtml5) {                                                                                                 // 7009
  var undef,                                                                                                           // 7010
      REG_EXP = /wysiwyg-color-[a-z]+/g;                                                                               // 7011
                                                                                                                       // 7012
  wysihtml5.commands.foreColor = {                                                                                     // 7013
    exec: function(composer, command, color) {                                                                         // 7014
      return wysihtml5.commands.formatInline.exec(composer, command, "span", "wysiwyg-color-" + color, REG_EXP);       // 7015
    },                                                                                                                 // 7016
                                                                                                                       // 7017
    state: function(composer, command, color) {                                                                        // 7018
      return wysihtml5.commands.formatInline.state(composer, command, "span", "wysiwyg-color-" + color, REG_EXP);      // 7019
    },                                                                                                                 // 7020
                                                                                                                       // 7021
    value: function() {                                                                                                // 7022
      return undef;                                                                                                    // 7023
    }                                                                                                                  // 7024
  };                                                                                                                   // 7025
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7026
  var undef,                                                                                                           // 7027
      dom                     = wysihtml5.dom,                                                                         // 7028
      DEFAULT_NODE_NAME       = "DIV",                                                                                 // 7029
      // Following elements are grouped                                                                                // 7030
      // when the caret is within a H1 and the H4 is invoked, the H1 should turn into H4                               // 7031
      // instead of creating a H4 within a H1 which would result in semantically invalid html                          // 7032
      BLOCK_ELEMENTS_GROUP    = ["H1", "H2", "H3", "H4", "H5", "H6", "P", "BLOCKQUOTE", DEFAULT_NODE_NAME];            // 7033
                                                                                                                       // 7034
  /**                                                                                                                  // 7035
   * Remove similiar classes (based on classRegExp)                                                                    // 7036
   * and add the desired class name                                                                                    // 7037
   */                                                                                                                  // 7038
  function _addClass(element, className, classRegExp) {                                                                // 7039
    if (element.className) {                                                                                           // 7040
      _removeClass(element, classRegExp);                                                                              // 7041
      element.className += " " + className;                                                                            // 7042
    } else {                                                                                                           // 7043
      element.className = className;                                                                                   // 7044
    }                                                                                                                  // 7045
  }                                                                                                                    // 7046
                                                                                                                       // 7047
  function _removeClass(element, classRegExp) {                                                                        // 7048
    element.className = element.className.replace(classRegExp, "");                                                    // 7049
  }                                                                                                                    // 7050
                                                                                                                       // 7051
  /**                                                                                                                  // 7052
   * Check whether given node is a text node and whether it's empty                                                    // 7053
   */                                                                                                                  // 7054
  function _isBlankTextNode(node) {                                                                                    // 7055
    return node.nodeType === wysihtml5.TEXT_NODE && !wysihtml5.lang.string(node.data).trim();                          // 7056
  }                                                                                                                    // 7057
                                                                                                                       // 7058
  /**                                                                                                                  // 7059
   * Returns previous sibling node that is not a blank text node                                                       // 7060
   */                                                                                                                  // 7061
  function _getPreviousSiblingThatIsNotBlank(node) {                                                                   // 7062
    var previousSibling = node.previousSibling;                                                                        // 7063
    while (previousSibling && _isBlankTextNode(previousSibling)) {                                                     // 7064
      previousSibling = previousSibling.previousSibling;                                                               // 7065
    }                                                                                                                  // 7066
    return previousSibling;                                                                                            // 7067
  }                                                                                                                    // 7068
                                                                                                                       // 7069
  /**                                                                                                                  // 7070
   * Returns next sibling node that is not a blank text node                                                           // 7071
   */                                                                                                                  // 7072
  function _getNextSiblingThatIsNotBlank(node) {                                                                       // 7073
    var nextSibling = node.nextSibling;                                                                                // 7074
    while (nextSibling && _isBlankTextNode(nextSibling)) {                                                             // 7075
      nextSibling = nextSibling.nextSibling;                                                                           // 7076
    }                                                                                                                  // 7077
    return nextSibling;                                                                                                // 7078
  }                                                                                                                    // 7079
                                                                                                                       // 7080
  /**                                                                                                                  // 7081
   * Adds line breaks before and after the given node if the previous and next siblings                                // 7082
   * aren't already causing a visual line break (block element or <br>)                                                // 7083
   */                                                                                                                  // 7084
  function _addLineBreakBeforeAndAfter(node) {                                                                         // 7085
    var doc             = node.ownerDocument,                                                                          // 7086
        nextSibling     = _getNextSiblingThatIsNotBlank(node),                                                         // 7087
        previousSibling = _getPreviousSiblingThatIsNotBlank(node);                                                     // 7088
                                                                                                                       // 7089
    if (nextSibling && !_isLineBreakOrBlockElement(nextSibling)) {                                                     // 7090
      node.parentNode.insertBefore(doc.createElement("br"), nextSibling);                                              // 7091
    }                                                                                                                  // 7092
    if (previousSibling && !_isLineBreakOrBlockElement(previousSibling)) {                                             // 7093
      node.parentNode.insertBefore(doc.createElement("br"), node);                                                     // 7094
    }                                                                                                                  // 7095
  }                                                                                                                    // 7096
                                                                                                                       // 7097
  /**                                                                                                                  // 7098
   * Removes line breaks before and after the given node                                                               // 7099
   */                                                                                                                  // 7100
  function _removeLineBreakBeforeAndAfter(node) {                                                                      // 7101
    var nextSibling     = _getNextSiblingThatIsNotBlank(node),                                                         // 7102
        previousSibling = _getPreviousSiblingThatIsNotBlank(node);                                                     // 7103
                                                                                                                       // 7104
    if (nextSibling && _isLineBreak(nextSibling)) {                                                                    // 7105
      nextSibling.parentNode.removeChild(nextSibling);                                                                 // 7106
    }                                                                                                                  // 7107
    if (previousSibling && _isLineBreak(previousSibling)) {                                                            // 7108
      previousSibling.parentNode.removeChild(previousSibling);                                                         // 7109
    }                                                                                                                  // 7110
  }                                                                                                                    // 7111
                                                                                                                       // 7112
  function _removeLastChildIfLineBreak(node) {                                                                         // 7113
    var lastChild = node.lastChild;                                                                                    // 7114
    if (lastChild && _isLineBreak(lastChild)) {                                                                        // 7115
      lastChild.parentNode.removeChild(lastChild);                                                                     // 7116
    }                                                                                                                  // 7117
  }                                                                                                                    // 7118
                                                                                                                       // 7119
  function _isLineBreak(node) {                                                                                        // 7120
    return node.nodeName === "BR";                                                                                     // 7121
  }                                                                                                                    // 7122
                                                                                                                       // 7123
  /**                                                                                                                  // 7124
   * Checks whether the elment causes a visual line break                                                              // 7125
   * (<br> or block elements)                                                                                          // 7126
   */                                                                                                                  // 7127
  function _isLineBreakOrBlockElement(element) {                                                                       // 7128
    if (_isLineBreak(element)) {                                                                                       // 7129
      return true;                                                                                                     // 7130
    }                                                                                                                  // 7131
                                                                                                                       // 7132
    if (dom.getStyle("display").from(element) === "block") {                                                           // 7133
      return true;                                                                                                     // 7134
    }                                                                                                                  // 7135
                                                                                                                       // 7136
    return false;                                                                                                      // 7137
  }                                                                                                                    // 7138
                                                                                                                       // 7139
  /**                                                                                                                  // 7140
   * Execute native query command                                                                                      // 7141
   * and if necessary modify the inserted node's className                                                             // 7142
   */                                                                                                                  // 7143
  function _execCommand(doc, command, nodeName, className) {                                                           // 7144
    if (className) {                                                                                                   // 7145
      var eventListener = dom.observe(doc, "DOMNodeInserted", function(event) {                                        // 7146
        var target = event.target,                                                                                     // 7147
            displayStyle;                                                                                              // 7148
        if (target.nodeType !== wysihtml5.ELEMENT_NODE) {                                                              // 7149
          return;                                                                                                      // 7150
        }                                                                                                              // 7151
        displayStyle = dom.getStyle("display").from(target);                                                           // 7152
        if (displayStyle.substr(0, 6) !== "inline") {                                                                  // 7153
          // Make sure that only block elements receive the given class                                                // 7154
          target.className += " " + className;                                                                         // 7155
        }                                                                                                              // 7156
      });                                                                                                              // 7157
    }                                                                                                                  // 7158
    doc.execCommand(command, false, nodeName);                                                                         // 7159
    if (eventListener) {                                                                                               // 7160
      eventListener.stop();                                                                                            // 7161
    }                                                                                                                  // 7162
  }                                                                                                                    // 7163
                                                                                                                       // 7164
  function _selectLineAndWrap(composer, element) {                                                                     // 7165
    composer.selection.selectLine();                                                                                   // 7166
    composer.selection.surround(element);                                                                              // 7167
    _removeLineBreakBeforeAndAfter(element);                                                                           // 7168
    _removeLastChildIfLineBreak(element);                                                                              // 7169
    composer.selection.selectNode(element);                                                                            // 7170
  }                                                                                                                    // 7171
                                                                                                                       // 7172
  function _hasClasses(element) {                                                                                      // 7173
    return !!wysihtml5.lang.string(element.className).trim();                                                          // 7174
  }                                                                                                                    // 7175
                                                                                                                       // 7176
  wysihtml5.commands.formatBlock = {                                                                                   // 7177
    exec: function(composer, command, nodeName, className, classRegExp) {                                              // 7178
      var doc          = composer.doc,                                                                                 // 7179
          blockElement = this.state(composer, command, nodeName, className, classRegExp),                              // 7180
          selectedNode;                                                                                                // 7181
                                                                                                                       // 7182
      nodeName = typeof(nodeName) === "string" ? nodeName.toUpperCase() : nodeName;                                    // 7183
                                                                                                                       // 7184
      if (blockElement) {                                                                                              // 7185
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7186
          if (classRegExp) {                                                                                           // 7187
            _removeClass(blockElement, classRegExp);                                                                   // 7188
          }                                                                                                            // 7189
          var hasClasses = _hasClasses(blockElement);                                                                  // 7190
          if (!hasClasses && blockElement.nodeName === (nodeName || DEFAULT_NODE_NAME)) {                              // 7191
            // Insert a line break afterwards and beforewards when there are siblings                                  // 7192
            // that are not of type line break or block element                                                        // 7193
            _addLineBreakBeforeAndAfter(blockElement);                                                                 // 7194
            dom.replaceWithChildNodes(blockElement);                                                                   // 7195
          } else if (hasClasses) {                                                                                     // 7196
            // Make sure that styling is kept by renaming the element to <div> and copying over the class name         // 7197
            dom.renameElement(blockElement, DEFAULT_NODE_NAME);                                                        // 7198
          }                                                                                                            // 7199
        });                                                                                                            // 7200
        return;                                                                                                        // 7201
      }                                                                                                                // 7202
                                                                                                                       // 7203
      // Find similiar block element and rename it (<h2 class="foo"></h2>  =>  <h1 class="foo"></h1>)                  // 7204
      if (nodeName === null || wysihtml5.lang.array(BLOCK_ELEMENTS_GROUP).contains(nodeName)) {                        // 7205
        selectedNode = composer.selection.getSelectedNode();                                                           // 7206
        blockElement = dom.getParentElement(selectedNode, {                                                            // 7207
          nodeName: BLOCK_ELEMENTS_GROUP                                                                               // 7208
        });                                                                                                            // 7209
                                                                                                                       // 7210
        if (blockElement) {                                                                                            // 7211
          composer.selection.executeAndRestoreSimple(function() {                                                      // 7212
            // Rename current block element to new block element and add class                                         // 7213
            if (nodeName) {                                                                                            // 7214
              blockElement = dom.renameElement(blockElement, nodeName);                                                // 7215
            }                                                                                                          // 7216
            if (className) {                                                                                           // 7217
              _addClass(blockElement, className, classRegExp);                                                         // 7218
            }                                                                                                          // 7219
          });                                                                                                          // 7220
          return;                                                                                                      // 7221
        }                                                                                                              // 7222
      }                                                                                                                // 7223
                                                                                                                       // 7224
      if (composer.commands.support(command)) {                                                                        // 7225
        _execCommand(doc, command, nodeName || DEFAULT_NODE_NAME, className);                                          // 7226
        return;                                                                                                        // 7227
      }                                                                                                                // 7228
                                                                                                                       // 7229
      blockElement = doc.createElement(nodeName || DEFAULT_NODE_NAME);                                                 // 7230
      if (className) {                                                                                                 // 7231
        blockElement.className = className;                                                                            // 7232
      }                                                                                                                // 7233
      _selectLineAndWrap(composer, blockElement);                                                                      // 7234
    },                                                                                                                 // 7235
                                                                                                                       // 7236
    state: function(composer, command, nodeName, className, classRegExp) {                                             // 7237
      nodeName = typeof(nodeName) === "string" ? nodeName.toUpperCase() : nodeName;                                    // 7238
      var selectedNode = composer.selection.getSelectedNode();                                                         // 7239
      return dom.getParentElement(selectedNode, {                                                                      // 7240
        nodeName:     nodeName,                                                                                        // 7241
        className:    className,                                                                                       // 7242
        classRegExp:  classRegExp                                                                                      // 7243
      });                                                                                                              // 7244
    },                                                                                                                 // 7245
                                                                                                                       // 7246
    value: function() {                                                                                                // 7247
      return undef;                                                                                                    // 7248
    }                                                                                                                  // 7249
  };                                                                                                                   // 7250
})(wysihtml5);/**                                                                                                      // 7251
 * formatInline scenarios for tag "B" (| = caret, |foo| = selected text)                                               // 7252
 *                                                                                                                     // 7253
 *   #1 caret in unformatted text:                                                                                     // 7254
 *      abcdefg|                                                                                                       // 7255
 *   output:                                                                                                           // 7256
 *      abcdefg<b>|</b>                                                                                                // 7257
 *                                                                                                                     // 7258
 *   #2 unformatted text selected:                                                                                     // 7259
 *      abc|deg|h                                                                                                      // 7260
 *   output:                                                                                                           // 7261
 *      abc<b>|deg|</b>h                                                                                               // 7262
 *                                                                                                                     // 7263
 *   #3 unformatted text selected across boundaries:                                                                   // 7264
 *      ab|c <span>defg|h</span>                                                                                       // 7265
 *   output:                                                                                                           // 7266
 *      ab<b>|c </b><span><b>defg</b>|h</span>                                                                         // 7267
 *                                                                                                                     // 7268
 *   #4 formatted text entirely selected                                                                               // 7269
 *      <b>|abc|</b>                                                                                                   // 7270
 *   output:                                                                                                           // 7271
 *      |abc|                                                                                                          // 7272
 *                                                                                                                     // 7273
 *   #5 formatted text partially selected                                                                              // 7274
 *      <b>ab|c|</b>                                                                                                   // 7275
 *   output:                                                                                                           // 7276
 *      <b>ab</b>|c|                                                                                                   // 7277
 *                                                                                                                     // 7278
 *   #6 formatted text selected across boundaries                                                                      // 7279
 *      <span>ab|c</span> <b>de|fgh</b>                                                                                // 7280
 *   output:                                                                                                           // 7281
 *      <span>ab|c</span> de|<b>fgh</b>                                                                                // 7282
 */                                                                                                                    // 7283
(function(wysihtml5) {                                                                                                 // 7284
  var undef,                                                                                                           // 7285
      // Treat <b> as <strong> and vice versa                                                                          // 7286
      ALIAS_MAPPING = {                                                                                                // 7287
        "strong": "b",                                                                                                 // 7288
        "em":     "i",                                                                                                 // 7289
        "b":      "strong",                                                                                            // 7290
        "i":      "em"                                                                                                 // 7291
      },                                                                                                               // 7292
      htmlApplier = {};                                                                                                // 7293
                                                                                                                       // 7294
  function _getTagNames(tagName) {                                                                                     // 7295
    var alias = ALIAS_MAPPING[tagName];                                                                                // 7296
    return alias ? [tagName.toLowerCase(), alias.toLowerCase()] : [tagName.toLowerCase()];                             // 7297
  }                                                                                                                    // 7298
                                                                                                                       // 7299
  function _getApplier(tagName, className, classRegExp) {                                                              // 7300
    var identifier = tagName + ":" + className;                                                                        // 7301
    if (!htmlApplier[identifier]) {                                                                                    // 7302
      htmlApplier[identifier] = new wysihtml5.selection.HTMLApplier(_getTagNames(tagName), className, classRegExp, true);
    }                                                                                                                  // 7304
    return htmlApplier[identifier];                                                                                    // 7305
  }                                                                                                                    // 7306
                                                                                                                       // 7307
  wysihtml5.commands.formatInline = {                                                                                  // 7308
    exec: function(composer, command, tagName, className, classRegExp) {                                               // 7309
      var range = composer.selection.getRange();                                                                       // 7310
      if (!range) {                                                                                                    // 7311
        return false;                                                                                                  // 7312
      }                                                                                                                // 7313
      _getApplier(tagName, className, classRegExp).toggleRange(range);                                                 // 7314
      composer.selection.setSelection(range);                                                                          // 7315
    },                                                                                                                 // 7316
                                                                                                                       // 7317
    state: function(composer, command, tagName, className, classRegExp) {                                              // 7318
      var doc           = composer.doc,                                                                                // 7319
          aliasTagName  = ALIAS_MAPPING[tagName] || tagName,                                                           // 7320
          range;                                                                                                       // 7321
                                                                                                                       // 7322
      // Check whether the document contains a node with the desired tagName                                           // 7323
      if (!wysihtml5.dom.hasElementWithTagName(doc, tagName) &&                                                        // 7324
          !wysihtml5.dom.hasElementWithTagName(doc, aliasTagName)) {                                                   // 7325
        return false;                                                                                                  // 7326
      }                                                                                                                // 7327
                                                                                                                       // 7328
       // Check whether the document contains a node with the desired className                                        // 7329
      if (className && !wysihtml5.dom.hasElementWithClassName(doc, className)) {                                       // 7330
         return false;                                                                                                 // 7331
      }                                                                                                                // 7332
                                                                                                                       // 7333
      range = composer.selection.getRange();                                                                           // 7334
      if (!range) {                                                                                                    // 7335
        return false;                                                                                                  // 7336
      }                                                                                                                // 7337
                                                                                                                       // 7338
      return _getApplier(tagName, className, classRegExp).isAppliedToRange(range);                                     // 7339
    },                                                                                                                 // 7340
                                                                                                                       // 7341
    value: function() {                                                                                                // 7342
      return undef;                                                                                                    // 7343
    }                                                                                                                  // 7344
  };                                                                                                                   // 7345
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7346
  var undef;                                                                                                           // 7347
                                                                                                                       // 7348
  wysihtml5.commands.insertHTML = {                                                                                    // 7349
    exec: function(composer, command, html) {                                                                          // 7350
      if (composer.commands.support(command)) {                                                                        // 7351
        composer.doc.execCommand(command, false, html);                                                                // 7352
      } else {                                                                                                         // 7353
        composer.selection.insertHTML(html);                                                                           // 7354
      }                                                                                                                // 7355
    },                                                                                                                 // 7356
                                                                                                                       // 7357
    state: function() {                                                                                                // 7358
      return false;                                                                                                    // 7359
    },                                                                                                                 // 7360
                                                                                                                       // 7361
    value: function() {                                                                                                // 7362
      return undef;                                                                                                    // 7363
    }                                                                                                                  // 7364
  };                                                                                                                   // 7365
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7366
  var NODE_NAME = "IMG";                                                                                               // 7367
                                                                                                                       // 7368
  wysihtml5.commands.insertImage = {                                                                                   // 7369
    /**                                                                                                                // 7370
     * Inserts an <img>                                                                                                // 7371
     * If selection is already an image link, it removes it                                                            // 7372
     *                                                                                                                 // 7373
     * @example                                                                                                        // 7374
     *    // either ...                                                                                                // 7375
     *    wysihtml5.commands.insertImage.exec(composer, "insertImage", "http://www.google.de/logo.jpg");               // 7376
     *    // ... or ...                                                                                                // 7377
     *    wysihtml5.commands.insertImage.exec(composer, "insertImage", { src: "http://www.google.de/logo.jpg", title: "foo" });
     */                                                                                                                // 7379
    exec: function(composer, command, value) {                                                                         // 7380
      value = typeof(value) === "object" ? value : { src: value };                                                     // 7381
                                                                                                                       // 7382
      var doc     = composer.doc,                                                                                      // 7383
          image   = this.state(composer),                                                                              // 7384
          textNode,                                                                                                    // 7385
          i,                                                                                                           // 7386
          parent;                                                                                                      // 7387
                                                                                                                       // 7388
      if (image) {                                                                                                     // 7389
        // Image already selected, set the caret before it and delete it                                               // 7390
        composer.selection.setBefore(image);                                                                           // 7391
        parent = image.parentNode;                                                                                     // 7392
        parent.removeChild(image);                                                                                     // 7393
                                                                                                                       // 7394
        // and it's parent <a> too if it hasn't got any other relevant child nodes                                     // 7395
        wysihtml5.dom.removeEmptyTextNodes(parent);                                                                    // 7396
        if (parent.nodeName === "A" && !parent.firstChild) {                                                           // 7397
          composer.selection.setAfter(parent);                                                                         // 7398
          parent.parentNode.removeChild(parent);                                                                       // 7399
        }                                                                                                              // 7400
                                                                                                                       // 7401
        // firefox and ie sometimes don't remove the image handles, even though the image got removed                  // 7402
        wysihtml5.quirks.redraw(composer.element);                                                                     // 7403
        return;                                                                                                        // 7404
      }                                                                                                                // 7405
                                                                                                                       // 7406
      image = doc.createElement(NODE_NAME);                                                                            // 7407
                                                                                                                       // 7408
      for (i in value) {                                                                                               // 7409
        image[i] = value[i];                                                                                           // 7410
      }                                                                                                                // 7411
                                                                                                                       // 7412
      composer.selection.insertNode(image);                                                                            // 7413
      if (wysihtml5.browser.hasProblemsSettingCaretAfterImg()) {                                                       // 7414
        textNode = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);                                                      // 7415
        composer.selection.insertNode(textNode);                                                                       // 7416
        composer.selection.setAfter(textNode);                                                                         // 7417
      } else {                                                                                                         // 7418
        composer.selection.setAfter(image);                                                                            // 7419
      }                                                                                                                // 7420
    },                                                                                                                 // 7421
                                                                                                                       // 7422
    state: function(composer) {                                                                                        // 7423
      var doc = composer.doc,                                                                                          // 7424
          selectedNode,                                                                                                // 7425
          text,                                                                                                        // 7426
          imagesInSelection;                                                                                           // 7427
                                                                                                                       // 7428
      if (!wysihtml5.dom.hasElementWithTagName(doc, NODE_NAME)) {                                                      // 7429
        return false;                                                                                                  // 7430
      }                                                                                                                // 7431
                                                                                                                       // 7432
      selectedNode = composer.selection.getSelectedNode();                                                             // 7433
      if (!selectedNode) {                                                                                             // 7434
        return false;                                                                                                  // 7435
      }                                                                                                                // 7436
                                                                                                                       // 7437
      if (selectedNode.nodeName === NODE_NAME) {                                                                       // 7438
        // This works perfectly in IE                                                                                  // 7439
        return selectedNode;                                                                                           // 7440
      }                                                                                                                // 7441
                                                                                                                       // 7442
      if (selectedNode.nodeType !== wysihtml5.ELEMENT_NODE) {                                                          // 7443
        return false;                                                                                                  // 7444
      }                                                                                                                // 7445
                                                                                                                       // 7446
      text = composer.selection.getText();                                                                             // 7447
      text = wysihtml5.lang.string(text).trim();                                                                       // 7448
      if (text) {                                                                                                      // 7449
        return false;                                                                                                  // 7450
      }                                                                                                                // 7451
                                                                                                                       // 7452
      imagesInSelection = composer.selection.getNodes(wysihtml5.ELEMENT_NODE, function(node) {                         // 7453
        return node.nodeName === "IMG";                                                                                // 7454
      });                                                                                                              // 7455
                                                                                                                       // 7456
      if (imagesInSelection.length !== 1) {                                                                            // 7457
        return false;                                                                                                  // 7458
      }                                                                                                                // 7459
                                                                                                                       // 7460
      return imagesInSelection[0];                                                                                     // 7461
    },                                                                                                                 // 7462
                                                                                                                       // 7463
    value: function(composer) {                                                                                        // 7464
      var image = this.state(composer);                                                                                // 7465
      return image && image.src;                                                                                       // 7466
    }                                                                                                                  // 7467
  };                                                                                                                   // 7468
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7469
  var undef,                                                                                                           // 7470
      LINE_BREAK = "<br>" + (wysihtml5.browser.needsSpaceAfterLineBreak() ? " " : "");                                 // 7471
                                                                                                                       // 7472
  wysihtml5.commands.insertLineBreak = {                                                                               // 7473
    exec: function(composer, command) {                                                                                // 7474
      if (composer.commands.support(command)) {                                                                        // 7475
        composer.doc.execCommand(command, false, null);                                                                // 7476
        if (!wysihtml5.browser.autoScrollsToCaret()) {                                                                 // 7477
          composer.selection.scrollIntoView();                                                                         // 7478
        }                                                                                                              // 7479
      } else {                                                                                                         // 7480
        composer.commands.exec("insertHTML", LINE_BREAK);                                                              // 7481
      }                                                                                                                // 7482
    },                                                                                                                 // 7483
                                                                                                                       // 7484
    state: function() {                                                                                                // 7485
      return false;                                                                                                    // 7486
    },                                                                                                                 // 7487
                                                                                                                       // 7488
    value: function() {                                                                                                // 7489
      return undef;                                                                                                    // 7490
    }                                                                                                                  // 7491
  };                                                                                                                   // 7492
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7493
  var undef;                                                                                                           // 7494
                                                                                                                       // 7495
  wysihtml5.commands.insertOrderedList = {                                                                             // 7496
    exec: function(composer, command) {                                                                                // 7497
      var doc           = composer.doc,                                                                                // 7498
          selectedNode  = composer.selection.getSelectedNode(),                                                        // 7499
          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "OL" }),                            // 7500
          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "UL" }),                            // 7501
          tempClassName =  "_wysihtml5-temp-" + new Date().getTime(),                                                  // 7502
          isEmpty,                                                                                                     // 7503
          tempElement;                                                                                                 // 7504
                                                                                                                       // 7505
      if (composer.commands.support(command)) {                                                                        // 7506
        doc.execCommand(command, false, null);                                                                         // 7507
        return;                                                                                                        // 7508
      }                                                                                                                // 7509
                                                                                                                       // 7510
      if (list) {                                                                                                      // 7511
        // Unwrap list                                                                                                 // 7512
        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7513
        // becomes:                                                                                                    // 7514
        // foo<br>bar<br>                                                                                              // 7515
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7516
          wysihtml5.dom.resolveList(list);                                                                             // 7517
        });                                                                                                            // 7518
      } else if (otherList) {                                                                                          // 7519
        // Turn an unordered list into an ordered list                                                                 // 7520
        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7521
        // becomes:                                                                                                    // 7522
        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7523
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7524
          wysihtml5.dom.renameElement(otherList, "ol");                                                                // 7525
        });                                                                                                            // 7526
      } else {                                                                                                         // 7527
        // Create list                                                                                                 // 7528
        composer.commands.exec("formatBlock", "div", tempClassName);                                                   // 7529
        tempElement = doc.querySelector("." + tempClassName);                                                          // 7530
        isEmpty = tempElement.innerHTML === "" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;                 // 7531
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7532
          list = wysihtml5.dom.convertToList(tempElement, "ol");                                                       // 7533
        });                                                                                                            // 7534
        if (isEmpty) {                                                                                                 // 7535
          composer.selection.selectNode(list.querySelector("li"));                                                     // 7536
        }                                                                                                              // 7537
      }                                                                                                                // 7538
    },                                                                                                                 // 7539
                                                                                                                       // 7540
    state: function(composer) {                                                                                        // 7541
      var selectedNode = composer.selection.getSelectedNode();                                                         // 7542
      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: "OL" });                                         // 7543
    },                                                                                                                 // 7544
                                                                                                                       // 7545
    value: function() {                                                                                                // 7546
      return undef;                                                                                                    // 7547
    }                                                                                                                  // 7548
  };                                                                                                                   // 7549
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7550
  var undef;                                                                                                           // 7551
                                                                                                                       // 7552
  wysihtml5.commands.insertUnorderedList = {                                                                           // 7553
    exec: function(composer, command) {                                                                                // 7554
      var doc           = composer.doc,                                                                                // 7555
          selectedNode  = composer.selection.getSelectedNode(),                                                        // 7556
          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "UL" }),                            // 7557
          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "OL" }),                            // 7558
          tempClassName =  "_wysihtml5-temp-" + new Date().getTime(),                                                  // 7559
          isEmpty,                                                                                                     // 7560
          tempElement;                                                                                                 // 7561
                                                                                                                       // 7562
      if (composer.commands.support(command)) {                                                                        // 7563
        doc.execCommand(command, false, null);                                                                         // 7564
        return;                                                                                                        // 7565
      }                                                                                                                // 7566
                                                                                                                       // 7567
      if (list) {                                                                                                      // 7568
        // Unwrap list                                                                                                 // 7569
        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7570
        // becomes:                                                                                                    // 7571
        // foo<br>bar<br>                                                                                              // 7572
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7573
          wysihtml5.dom.resolveList(list);                                                                             // 7574
        });                                                                                                            // 7575
      } else if (otherList) {                                                                                          // 7576
        // Turn an ordered list into an unordered list                                                                 // 7577
        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7578
        // becomes:                                                                                                    // 7579
        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7580
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7581
          wysihtml5.dom.renameElement(otherList, "ul");                                                                // 7582
        });                                                                                                            // 7583
      } else {                                                                                                         // 7584
        // Create list                                                                                                 // 7585
        composer.commands.exec("formatBlock", "div", tempClassName);                                                   // 7586
        tempElement = doc.querySelector("." + tempClassName);                                                          // 7587
        isEmpty = tempElement.innerHTML === "" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;                 // 7588
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7589
          list = wysihtml5.dom.convertToList(tempElement, "ul");                                                       // 7590
        });                                                                                                            // 7591
        if (isEmpty) {                                                                                                 // 7592
          composer.selection.selectNode(list.querySelector("li"));                                                     // 7593
        }                                                                                                              // 7594
      }                                                                                                                // 7595
    },                                                                                                                 // 7596
                                                                                                                       // 7597
    state: function(composer) {                                                                                        // 7598
      var selectedNode = composer.selection.getSelectedNode();                                                         // 7599
      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: "UL" });                                         // 7600
    },                                                                                                                 // 7601
                                                                                                                       // 7602
    value: function() {                                                                                                // 7603
      return undef;                                                                                                    // 7604
    }                                                                                                                  // 7605
  };                                                                                                                   // 7606
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7607
  var undef;                                                                                                           // 7608
                                                                                                                       // 7609
  wysihtml5.commands.italic = {                                                                                        // 7610
    exec: function(composer, command) {                                                                                // 7611
      return wysihtml5.commands.formatInline.exec(composer, command, "i");                                             // 7612
    },                                                                                                                 // 7613
                                                                                                                       // 7614
    state: function(composer, command, color) {                                                                        // 7615
      // element.ownerDocument.queryCommandState("italic") results:                                                    // 7616
      // firefox: only <i>                                                                                             // 7617
      // chrome:  <i>, <em>, <blockquote>, ...                                                                         // 7618
      // ie:      <i>, <em>                                                                                            // 7619
      // opera:   only <i>                                                                                             // 7620
      return wysihtml5.commands.formatInline.state(composer, command, "i");                                            // 7621
    },                                                                                                                 // 7622
                                                                                                                       // 7623
    value: function() {                                                                                                // 7624
      return undef;                                                                                                    // 7625
    }                                                                                                                  // 7626
  };                                                                                                                   // 7627
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7628
  var undef,                                                                                                           // 7629
      CLASS_NAME  = "wysiwyg-text-align-center",                                                                       // 7630
      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7631
                                                                                                                       // 7632
  wysihtml5.commands.justifyCenter = {                                                                                 // 7633
    exec: function(composer, command) {                                                                                // 7634
      return wysihtml5.commands.formatBlock.exec(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                  // 7635
    },                                                                                                                 // 7636
                                                                                                                       // 7637
    state: function(composer, command) {                                                                               // 7638
      return wysihtml5.commands.formatBlock.state(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                 // 7639
    },                                                                                                                 // 7640
                                                                                                                       // 7641
    value: function() {                                                                                                // 7642
      return undef;                                                                                                    // 7643
    }                                                                                                                  // 7644
  };                                                                                                                   // 7645
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7646
  var undef,                                                                                                           // 7647
      CLASS_NAME  = "wysiwyg-text-align-left",                                                                         // 7648
      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7649
                                                                                                                       // 7650
  wysihtml5.commands.justifyLeft = {                                                                                   // 7651
    exec: function(composer, command) {                                                                                // 7652
      return wysihtml5.commands.formatBlock.exec(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                  // 7653
    },                                                                                                                 // 7654
                                                                                                                       // 7655
    state: function(composer, command) {                                                                               // 7656
      return wysihtml5.commands.formatBlock.state(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                 // 7657
    },                                                                                                                 // 7658
                                                                                                                       // 7659
    value: function() {                                                                                                // 7660
      return undef;                                                                                                    // 7661
    }                                                                                                                  // 7662
  };                                                                                                                   // 7663
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7664
  var undef,                                                                                                           // 7665
      CLASS_NAME  = "wysiwyg-text-align-right",                                                                        // 7666
      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7667
                                                                                                                       // 7668
  wysihtml5.commands.justifyRight = {                                                                                  // 7669
    exec: function(composer, command) {                                                                                // 7670
      return wysihtml5.commands.formatBlock.exec(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                  // 7671
    },                                                                                                                 // 7672
                                                                                                                       // 7673
    state: function(composer, command) {                                                                               // 7674
      return wysihtml5.commands.formatBlock.state(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                 // 7675
    },                                                                                                                 // 7676
                                                                                                                       // 7677
    value: function() {                                                                                                // 7678
      return undef;                                                                                                    // 7679
    }                                                                                                                  // 7680
  };                                                                                                                   // 7681
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7682
  var undef;                                                                                                           // 7683
  wysihtml5.commands.underline = {                                                                                     // 7684
    exec: function(composer, command) {                                                                                // 7685
      return wysihtml5.commands.formatInline.exec(composer, command, "u");                                             // 7686
    },                                                                                                                 // 7687
                                                                                                                       // 7688
    state: function(composer, command) {                                                                               // 7689
      return wysihtml5.commands.formatInline.state(composer, command, "u");                                            // 7690
    },                                                                                                                 // 7691
                                                                                                                       // 7692
    value: function() {                                                                                                // 7693
      return undef;                                                                                                    // 7694
    }                                                                                                                  // 7695
  };                                                                                                                   // 7696
})(wysihtml5);/**                                                                                                      // 7697
 * Undo Manager for wysihtml5                                                                                          // 7698
 * slightly inspired by http://rniwa.com/editing/undomanager.html#the-undomanager-interface                            // 7699
 */                                                                                                                    // 7700
(function(wysihtml5) {                                                                                                 // 7701
  var Z_KEY               = 90,                                                                                        // 7702
      Y_KEY               = 89,                                                                                        // 7703
      BACKSPACE_KEY       = 8,                                                                                         // 7704
      DELETE_KEY          = 46,                                                                                        // 7705
      MAX_HISTORY_ENTRIES = 40,                                                                                        // 7706
      UNDO_HTML           = '<span id="_wysihtml5-undo" class="_wysihtml5-temp">' + wysihtml5.INVISIBLE_SPACE + '</span>',
      REDO_HTML           = '<span id="_wysihtml5-redo" class="_wysihtml5-temp">' + wysihtml5.INVISIBLE_SPACE + '</span>',
      dom                 = wysihtml5.dom;                                                                             // 7709
                                                                                                                       // 7710
  function cleanTempElements(doc) {                                                                                    // 7711
    var tempElement;                                                                                                   // 7712
    while (tempElement = doc.querySelector("._wysihtml5-temp")) {                                                      // 7713
      tempElement.parentNode.removeChild(tempElement);                                                                 // 7714
    }                                                                                                                  // 7715
  }                                                                                                                    // 7716
                                                                                                                       // 7717
  wysihtml5.UndoManager = wysihtml5.lang.Dispatcher.extend(                                                            // 7718
    /** @scope wysihtml5.UndoManager.prototype */ {                                                                    // 7719
    constructor: function(editor) {                                                                                    // 7720
      this.editor = editor;                                                                                            // 7721
      this.composer = editor.composer;                                                                                 // 7722
      this.element = this.composer.element;                                                                            // 7723
      this.history = [this.composer.getValue()];                                                                       // 7724
      this.position = 1;                                                                                               // 7725
                                                                                                                       // 7726
      // Undo manager currently only supported in browsers who have the insertHTML command (not IE)                    // 7727
      if (this.composer.commands.support("insertHTML")) {                                                              // 7728
        this._observe();                                                                                               // 7729
      }                                                                                                                // 7730
    },                                                                                                                 // 7731
                                                                                                                       // 7732
    _observe: function() {                                                                                             // 7733
      var that      = this,                                                                                            // 7734
          doc       = this.composer.sandbox.getDocument(),                                                             // 7735
          lastKey;                                                                                                     // 7736
                                                                                                                       // 7737
      // Catch CTRL+Z and CTRL+Y                                                                                       // 7738
      dom.observe(this.element, "keydown", function(event) {                                                           // 7739
        if (event.altKey || (!event.ctrlKey && !event.metaKey)) {                                                      // 7740
          return;                                                                                                      // 7741
        }                                                                                                              // 7742
                                                                                                                       // 7743
        var keyCode = event.keyCode,                                                                                   // 7744
            isUndo = keyCode === Z_KEY && !event.shiftKey,                                                             // 7745
            isRedo = (keyCode === Z_KEY && event.shiftKey) || (keyCode === Y_KEY);                                     // 7746
                                                                                                                       // 7747
        if (isUndo) {                                                                                                  // 7748
          that.undo();                                                                                                 // 7749
          event.preventDefault();                                                                                      // 7750
        } else if (isRedo) {                                                                                           // 7751
          that.redo();                                                                                                 // 7752
          event.preventDefault();                                                                                      // 7753
        }                                                                                                              // 7754
      });                                                                                                              // 7755
                                                                                                                       // 7756
      // Catch delete and backspace                                                                                    // 7757
      dom.observe(this.element, "keydown", function(event) {                                                           // 7758
        var keyCode = event.keyCode;                                                                                   // 7759
        if (keyCode === lastKey) {                                                                                     // 7760
          return;                                                                                                      // 7761
        }                                                                                                              // 7762
                                                                                                                       // 7763
        lastKey = keyCode;                                                                                             // 7764
                                                                                                                       // 7765
        if (keyCode === BACKSPACE_KEY || keyCode === DELETE_KEY) {                                                     // 7766
          that.transact();                                                                                             // 7767
        }                                                                                                              // 7768
      });                                                                                                              // 7769
                                                                                                                       // 7770
      // Now this is very hacky:                                                                                       // 7771
      // These days browsers don't offer a undo/redo event which we could hook into                                    // 7772
      // to be notified when the user hits undo/redo in the contextmenu.                                               // 7773
      // Therefore we simply insert two elements as soon as the contextmenu gets opened.                               // 7774
      // The last element being inserted will be immediately be removed again by a exexCommand("undo")                 // 7775
      //  => When the second element appears in the dom tree then we know the user clicked "redo" in the context menu  // 7776
      //  => When the first element disappears from the dom tree then we know the user clicked "undo" in the context menu
      if (wysihtml5.browser.hasUndoInContextMenu()) {                                                                  // 7778
        var interval, observed, cleanUp = function() {                                                                 // 7779
          cleanTempElements(doc);                                                                                      // 7780
          clearInterval(interval);                                                                                     // 7781
        };                                                                                                             // 7782
                                                                                                                       // 7783
        dom.observe(this.element, "contextmenu", function() {                                                          // 7784
          cleanUp();                                                                                                   // 7785
          that.composer.selection.executeAndRestoreSimple(function() {                                                 // 7786
            if (that.element.lastChild) {                                                                              // 7787
              that.composer.selection.setAfter(that.element.lastChild);                                                // 7788
            }                                                                                                          // 7789
                                                                                                                       // 7790
            // enable undo button in context menu                                                                      // 7791
            doc.execCommand("insertHTML", false, UNDO_HTML);                                                           // 7792
            // enable redo button in context menu                                                                      // 7793
            doc.execCommand("insertHTML", false, REDO_HTML);                                                           // 7794
            doc.execCommand("undo", false, null);                                                                      // 7795
          });                                                                                                          // 7796
                                                                                                                       // 7797
          interval = setInterval(function() {                                                                          // 7798
            if (doc.getElementById("_wysihtml5-redo")) {                                                               // 7799
              cleanUp();                                                                                               // 7800
              that.redo();                                                                                             // 7801
            } else if (!doc.getElementById("_wysihtml5-undo")) {                                                       // 7802
              cleanUp();                                                                                               // 7803
              that.undo();                                                                                             // 7804
            }                                                                                                          // 7805
          }, 400);                                                                                                     // 7806
                                                                                                                       // 7807
          if (!observed) {                                                                                             // 7808
            observed = true;                                                                                           // 7809
            dom.observe(document, "mousedown", cleanUp);                                                               // 7810
            dom.observe(doc, ["mousedown", "paste", "cut", "copy"], cleanUp);                                          // 7811
          }                                                                                                            // 7812
        });                                                                                                            // 7813
      }                                                                                                                // 7814
                                                                                                                       // 7815
      this.editor                                                                                                      // 7816
        .observe("newword:composer", function() {                                                                      // 7817
          that.transact();                                                                                             // 7818
        })                                                                                                             // 7819
                                                                                                                       // 7820
        .observe("beforecommand:composer", function() {                                                                // 7821
          that.transact();                                                                                             // 7822
        });                                                                                                            // 7823
    },                                                                                                                 // 7824
                                                                                                                       // 7825
    transact: function() {                                                                                             // 7826
      var previousHtml  = this.history[this.position - 1],                                                             // 7827
          currentHtml   = this.composer.getValue();                                                                    // 7828
                                                                                                                       // 7829
      if (currentHtml == previousHtml) {                                                                               // 7830
        return;                                                                                                        // 7831
      }                                                                                                                // 7832
                                                                                                                       // 7833
      var length = this.history.length = this.position;                                                                // 7834
      if (length > MAX_HISTORY_ENTRIES) {                                                                              // 7835
        this.history.shift();                                                                                          // 7836
        this.position--;                                                                                               // 7837
      }                                                                                                                // 7838
                                                                                                                       // 7839
      this.position++;                                                                                                 // 7840
      this.history.push(currentHtml);                                                                                  // 7841
    },                                                                                                                 // 7842
                                                                                                                       // 7843
    undo: function() {                                                                                                 // 7844
      this.transact();                                                                                                 // 7845
                                                                                                                       // 7846
      if (this.position <= 1) {                                                                                        // 7847
        return;                                                                                                        // 7848
      }                                                                                                                // 7849
                                                                                                                       // 7850
      this.set(this.history[--this.position - 1]);                                                                     // 7851
      this.editor.fire("undo:composer");                                                                               // 7852
    },                                                                                                                 // 7853
                                                                                                                       // 7854
    redo: function() {                                                                                                 // 7855
      if (this.position >= this.history.length) {                                                                      // 7856
        return;                                                                                                        // 7857
      }                                                                                                                // 7858
                                                                                                                       // 7859
      this.set(this.history[++this.position - 1]);                                                                     // 7860
      this.editor.fire("redo:composer");                                                                               // 7861
    },                                                                                                                 // 7862
                                                                                                                       // 7863
    set: function(html) {                                                                                              // 7864
      this.composer.setValue(html);                                                                                    // 7865
      this.editor.focus(true);                                                                                         // 7866
    }                                                                                                                  // 7867
  });                                                                                                                  // 7868
})(wysihtml5);                                                                                                         // 7869
/**                                                                                                                    // 7870
 * TODO: the following methods still need unit test coverage                                                           // 7871
 */                                                                                                                    // 7872
wysihtml5.views.View = Base.extend(                                                                                    // 7873
  /** @scope wysihtml5.views.View.prototype */ {                                                                       // 7874
  constructor: function(parent, textareaElement, config) {                                                             // 7875
    this.parent   = parent;                                                                                            // 7876
    this.element  = textareaElement;                                                                                   // 7877
    this.config   = config;                                                                                            // 7878
                                                                                                                       // 7879
    this._observeViewChange();                                                                                         // 7880
  },                                                                                                                   // 7881
                                                                                                                       // 7882
  _observeViewChange: function() {                                                                                     // 7883
    var that = this;                                                                                                   // 7884
    this.parent.observe("beforeload", function() {                                                                     // 7885
      that.parent.observe("change_view", function(view) {                                                              // 7886
        if (view === that.name) {                                                                                      // 7887
          that.parent.currentView = that;                                                                              // 7888
          that.show();                                                                                                 // 7889
          // Using tiny delay here to make sure that the placeholder is set before focusing                            // 7890
          setTimeout(function() { that.focus(); }, 0);                                                                 // 7891
        } else {                                                                                                       // 7892
          that.hide();                                                                                                 // 7893
        }                                                                                                              // 7894
      });                                                                                                              // 7895
    });                                                                                                                // 7896
  },                                                                                                                   // 7897
                                                                                                                       // 7898
  focus: function() {                                                                                                  // 7899
    if (this.element.ownerDocument.querySelector(":focus") === this.element) {                                         // 7900
      return;                                                                                                          // 7901
    }                                                                                                                  // 7902
                                                                                                                       // 7903
    try { this.element.focus(); } catch(e) {}                                                                          // 7904
  },                                                                                                                   // 7905
                                                                                                                       // 7906
  hide: function() {                                                                                                   // 7907
    this.element.style.display = "none";                                                                               // 7908
  },                                                                                                                   // 7909
                                                                                                                       // 7910
  show: function() {                                                                                                   // 7911
    this.element.style.display = "";                                                                                   // 7912
  },                                                                                                                   // 7913
                                                                                                                       // 7914
  disable: function() {                                                                                                // 7915
    this.element.setAttribute("disabled", "disabled");                                                                 // 7916
  },                                                                                                                   // 7917
                                                                                                                       // 7918
  enable: function() {                                                                                                 // 7919
    this.element.removeAttribute("disabled");                                                                          // 7920
  }                                                                                                                    // 7921
});(function(wysihtml5) {                                                                                              // 7922
  var dom       = wysihtml5.dom,                                                                                       // 7923
      browser   = wysihtml5.browser;                                                                                   // 7924
                                                                                                                       // 7925
  wysihtml5.views.Composer = wysihtml5.views.View.extend(                                                              // 7926
    /** @scope wysihtml5.views.Composer.prototype */ {                                                                 // 7927
    name: "composer",                                                                                                  // 7928
                                                                                                                       // 7929
    // Needed for firefox in order to display a proper caret in an empty contentEditable                               // 7930
    CARET_HACK: "<br>",                                                                                                // 7931
                                                                                                                       // 7932
    constructor: function(parent, textareaElement, config) {                                                           // 7933
      this.base(parent, textareaElement, config);                                                                      // 7934
      this.textarea = this.parent.textarea;                                                                            // 7935
      this._initSandbox();                                                                                             // 7936
    },                                                                                                                 // 7937
                                                                                                                       // 7938
    clear: function() {                                                                                                // 7939
      this.element.innerHTML = browser.displaysCaretInEmptyContentEditableCorrectly() ? "" : this.CARET_HACK;          // 7940
    },                                                                                                                 // 7941
                                                                                                                       // 7942
    getValue: function(parse) {                                                                                        // 7943
      var value = this.isEmpty() ? "" : wysihtml5.quirks.getCorrectInnerHTML(this.element);                            // 7944
                                                                                                                       // 7945
      if (parse) {                                                                                                     // 7946
        value = this.parent.parse(value);                                                                              // 7947
      }                                                                                                                // 7948
                                                                                                                       // 7949
      // Replace all "zero width no breaking space" chars                                                              // 7950
      // which are used as hacks to enable some functionalities                                                        // 7951
      // Also remove all CARET hacks that somehow got left                                                             // 7952
      value = wysihtml5.lang.string(value).replace(wysihtml5.INVISIBLE_SPACE).by("");                                  // 7953
                                                                                                                       // 7954
      return value;                                                                                                    // 7955
    },                                                                                                                 // 7956
                                                                                                                       // 7957
    setValue: function(html, parse) {                                                                                  // 7958
      if (parse) {                                                                                                     // 7959
        html = this.parent.parse(html);                                                                                // 7960
      }                                                                                                                // 7961
      this.element.innerHTML = html;                                                                                   // 7962
    },                                                                                                                 // 7963
                                                                                                                       // 7964
    show: function() {                                                                                                 // 7965
      this.iframe.style.display = this._displayStyle || "";                                                            // 7966
                                                                                                                       // 7967
      // Firefox needs this, otherwise contentEditable becomes uneditable                                              // 7968
      this.disable();                                                                                                  // 7969
      this.enable();                                                                                                   // 7970
    },                                                                                                                 // 7971
                                                                                                                       // 7972
    hide: function() {                                                                                                 // 7973
      this._displayStyle = dom.getStyle("display").from(this.iframe);                                                  // 7974
      if (this._displayStyle === "none") {                                                                             // 7975
        this._displayStyle = null;                                                                                     // 7976
      }                                                                                                                // 7977
      this.iframe.style.display = "none";                                                                              // 7978
    },                                                                                                                 // 7979
                                                                                                                       // 7980
    disable: function() {                                                                                              // 7981
      this.element.removeAttribute("contentEditable");                                                                 // 7982
      this.base();                                                                                                     // 7983
    },                                                                                                                 // 7984
                                                                                                                       // 7985
    enable: function() {                                                                                               // 7986
      this.element.setAttribute("contentEditable", "true");                                                            // 7987
      this.base();                                                                                                     // 7988
    },                                                                                                                 // 7989
                                                                                                                       // 7990
    focus: function(setToEnd) {                                                                                        // 7991
      // IE 8 fires the focus event after .focus()                                                                     // 7992
      // This is needed by our simulate_placeholder.js to work                                                         // 7993
      // therefore we clear it ourselves this time                                                                     // 7994
      if (wysihtml5.browser.doesAsyncFocus() && this.hasPlaceholderSet()) {                                            // 7995
        this.clear();                                                                                                  // 7996
      }                                                                                                                // 7997
                                                                                                                       // 7998
      this.base();                                                                                                     // 7999
                                                                                                                       // 8000
      var lastChild = this.element.lastChild;                                                                          // 8001
      if (setToEnd && lastChild) {                                                                                     // 8002
        if (lastChild.nodeName === "BR") {                                                                             // 8003
          this.selection.setBefore(this.element.lastChild);                                                            // 8004
        } else {                                                                                                       // 8005
          this.selection.setAfter(this.element.lastChild);                                                             // 8006
        }                                                                                                              // 8007
      }                                                                                                                // 8008
    },                                                                                                                 // 8009
                                                                                                                       // 8010
    getTextContent: function() {                                                                                       // 8011
      return dom.getTextContent(this.element);                                                                         // 8012
    },                                                                                                                 // 8013
                                                                                                                       // 8014
    hasPlaceholderSet: function() {                                                                                    // 8015
      return this.getTextContent() == this.textarea.element.getAttribute("placeholder");                               // 8016
    },                                                                                                                 // 8017
                                                                                                                       // 8018
    isEmpty: function() {                                                                                              // 8019
      var innerHTML               = this.element.innerHTML,                                                            // 8020
          elementsWithVisualValue = "blockquote, ul, ol, img, embed, object, table, iframe, svg, video, audio, button, input, select, textarea";
      return innerHTML === ""              ||                                                                          // 8022
             innerHTML === this.CARET_HACK ||                                                                          // 8023
             this.hasPlaceholderSet()      ||                                                                          // 8024
             (this.getTextContent() === "" && !this.element.querySelector(elementsWithVisualValue));                   // 8025
    },                                                                                                                 // 8026
                                                                                                                       // 8027
    _initSandbox: function() {                                                                                         // 8028
      var that = this;                                                                                                 // 8029
                                                                                                                       // 8030
      this.sandbox = new dom.Sandbox(function() {                                                                      // 8031
        that._create();                                                                                                // 8032
      }, {                                                                                                             // 8033
        stylesheets:  this.config.stylesheets                                                                          // 8034
      });                                                                                                              // 8035
      this.iframe  = this.sandbox.getIframe();                                                                         // 8036
                                                                                                                       // 8037
      // Create hidden field which tells the server after submit, that the user used an wysiwyg editor                 // 8038
      var hiddenField = document.createElement("input");                                                               // 8039
      hiddenField.type   = "hidden";                                                                                   // 8040
      hiddenField.name   = "_wysihtml5_mode";                                                                          // 8041
      hiddenField.value  = 1;                                                                                          // 8042
                                                                                                                       // 8043
      // Store reference to current wysihtml5 instance on the textarea element                                         // 8044
      var textareaElement = this.textarea.element;                                                                     // 8045
      dom.insert(this.iframe).after(textareaElement);                                                                  // 8046
      dom.insert(hiddenField).after(textareaElement);                                                                  // 8047
    },                                                                                                                 // 8048
                                                                                                                       // 8049
    _create: function() {                                                                                              // 8050
      var that = this;                                                                                                 // 8051
                                                                                                                       // 8052
      this.doc                = this.sandbox.getDocument();                                                            // 8053
      this.element            = this.doc.body;                                                                         // 8054
      this.textarea           = this.parent.textarea;                                                                  // 8055
      this.element.innerHTML  = this.textarea.getValue(true);                                                          // 8056
      this.enable();                                                                                                   // 8057
                                                                                                                       // 8058
      // Make sure our selection handler is ready                                                                      // 8059
      this.selection = new wysihtml5.Selection(this.parent);                                                           // 8060
                                                                                                                       // 8061
      // Make sure commands dispatcher is ready                                                                        // 8062
      this.commands  = new wysihtml5.Commands(this.parent);                                                            // 8063
                                                                                                                       // 8064
      dom.copyAttributes([                                                                                             // 8065
        "className", "spellcheck", "title", "lang", "dir", "accessKey"                                                 // 8066
      ]).from(this.textarea.element).to(this.element);                                                                 // 8067
                                                                                                                       // 8068
      dom.addClass(this.element, this.config.composerClassName);                                                       // 8069
                                                                                                                       // 8070
      // Make the editor look like the original textarea, by syncing styles                                            // 8071
      if (this.config.style) {                                                                                         // 8072
        this.style();                                                                                                  // 8073
      }                                                                                                                // 8074
                                                                                                                       // 8075
      this.observe();                                                                                                  // 8076
                                                                                                                       // 8077
      var name = this.config.name;                                                                                     // 8078
      if (name) {                                                                                                      // 8079
        dom.addClass(this.element, name);                                                                              // 8080
        dom.addClass(this.iframe, name);                                                                               // 8081
      }                                                                                                                // 8082
                                                                                                                       // 8083
      // Simulate html5 placeholder attribute on contentEditable element                                               // 8084
      var placeholderText = typeof(this.config.placeholder) === "string"                                               // 8085
        ? this.config.placeholder                                                                                      // 8086
        : this.textarea.element.getAttribute("placeholder");                                                           // 8087
      if (placeholderText) {                                                                                           // 8088
        dom.simulatePlaceholder(this.parent, this, placeholderText);                                                   // 8089
      }                                                                                                                // 8090
                                                                                                                       // 8091
      // Make sure that the browser avoids using inline styles whenever possible                                       // 8092
      this.commands.exec("styleWithCSS", false);                                                                       // 8093
                                                                                                                       // 8094
      this._initAutoLinking();                                                                                         // 8095
      this._initObjectResizing();                                                                                      // 8096
      this._initUndoManager();                                                                                         // 8097
                                                                                                                       // 8098
      // Simulate html5 autofocus on contentEditable element                                                           // 8099
      if (this.textarea.element.hasAttribute("autofocus") || document.querySelector(":focus") == this.textarea.element) {
        setTimeout(function() { that.focus(); }, 100);                                                                 // 8101
      }                                                                                                                // 8102
                                                                                                                       // 8103
      wysihtml5.quirks.insertLineBreakOnReturn(this);                                                                  // 8104
                                                                                                                       // 8105
      // IE sometimes leaves a single paragraph, which can't be removed by the user                                    // 8106
      if (!browser.clearsContentEditableCorrectly()) {                                                                 // 8107
        wysihtml5.quirks.ensureProperClearing(this);                                                                   // 8108
      }                                                                                                                // 8109
                                                                                                                       // 8110
      if (!browser.clearsListsInContentEditableCorrectly()) {                                                          // 8111
        wysihtml5.quirks.ensureProperClearingOfLists(this);                                                            // 8112
      }                                                                                                                // 8113
                                                                                                                       // 8114
      // Set up a sync that makes sure that textarea and editor have the same content                                  // 8115
      if (this.initSync && this.config.sync) {                                                                         // 8116
        this.initSync();                                                                                               // 8117
      }                                                                                                                // 8118
                                                                                                                       // 8119
      // Okay hide the textarea, we are ready to go                                                                    // 8120
      this.textarea.hide();                                                                                            // 8121
                                                                                                                       // 8122
      // Fire global (before-)load event                                                                               // 8123
      this.parent.fire("beforeload").fire("load");                                                                     // 8124
    },                                                                                                                 // 8125
                                                                                                                       // 8126
    _initAutoLinking: function() {                                                                                     // 8127
      var that                           = this,                                                                       // 8128
          supportsDisablingOfAutoLinking = browser.canDisableAutoLinking(),                                            // 8129
          supportsAutoLinking            = browser.doesAutoLinkingInContentEditable();                                 // 8130
      if (supportsDisablingOfAutoLinking) {                                                                            // 8131
        this.commands.exec("autoUrlDetect", false);                                                                    // 8132
      }                                                                                                                // 8133
                                                                                                                       // 8134
      if (!this.config.autoLink) {                                                                                     // 8135
        return;                                                                                                        // 8136
      }                                                                                                                // 8137
                                                                                                                       // 8138
      // Only do the auto linking by ourselves when the browser doesn't support auto linking                           // 8139
      // OR when he supports auto linking but we were able to turn it off (IE9+)                                       // 8140
      if (!supportsAutoLinking || (supportsAutoLinking && supportsDisablingOfAutoLinking)) {                           // 8141
        this.parent.observe("newword:composer", function() {                                                           // 8142
          that.selection.executeAndRestore(function(startContainer, endContainer) {                                    // 8143
            dom.autoLink(endContainer.parentNode);                                                                     // 8144
          });                                                                                                          // 8145
        });                                                                                                            // 8146
      }                                                                                                                // 8147
                                                                                                                       // 8148
      // Assuming we have the following:                                                                               // 8149
      //  <a href="http://www.google.de">http://www.google.de</a>                                                      // 8150
      // If a user now changes the url in the innerHTML we want to make sure that                                      // 8151
      // it's synchronized with the href attribute (as long as the innerHTML is still a url)                           // 8152
      var // Use a live NodeList to check whether there are any links in the document                                  // 8153
          links           = this.sandbox.getDocument().getElementsByTagName("a"),                                      // 8154
          // The autoLink helper method reveals a reg exp to detect correct urls                                       // 8155
          urlRegExp       = dom.autoLink.URL_REG_EXP,                                                                  // 8156
          getTextContent  = function(element) {                                                                        // 8157
            var textContent = wysihtml5.lang.string(dom.getTextContent(element)).trim();                               // 8158
            if (textContent.substr(0, 4) === "www.") {                                                                 // 8159
              textContent = "http://" + textContent;                                                                   // 8160
            }                                                                                                          // 8161
            return textContent;                                                                                        // 8162
          };                                                                                                           // 8163
                                                                                                                       // 8164
      dom.observe(this.element, "keydown", function(event) {                                                           // 8165
        if (!links.length) {                                                                                           // 8166
          return;                                                                                                      // 8167
        }                                                                                                              // 8168
                                                                                                                       // 8169
        var selectedNode = that.selection.getSelectedNode(event.target.ownerDocument),                                 // 8170
            link         = dom.getParentElement(selectedNode, { nodeName: "A" }, 4),                                   // 8171
            textContent;                                                                                               // 8172
                                                                                                                       // 8173
        if (!link) {                                                                                                   // 8174
          return;                                                                                                      // 8175
        }                                                                                                              // 8176
                                                                                                                       // 8177
        textContent = getTextContent(link);                                                                            // 8178
        // keydown is fired before the actual content is changed                                                       // 8179
        // therefore we set a timeout to change the href                                                               // 8180
        setTimeout(function() {                                                                                        // 8181
          var newTextContent = getTextContent(link);                                                                   // 8182
          if (newTextContent === textContent) {                                                                        // 8183
            return;                                                                                                    // 8184
          }                                                                                                            // 8185
                                                                                                                       // 8186
          // Only set href when new href looks like a valid url                                                        // 8187
          if (newTextContent.match(urlRegExp)) {                                                                       // 8188
            link.setAttribute("href", newTextContent);                                                                 // 8189
          }                                                                                                            // 8190
        }, 0);                                                                                                         // 8191
      });                                                                                                              // 8192
    },                                                                                                                 // 8193
                                                                                                                       // 8194
    _initObjectResizing: function() {                                                                                  // 8195
      var properties        = ["width", "height"],                                                                     // 8196
          propertiesLength  = properties.length,                                                                       // 8197
          element           = this.element;                                                                            // 8198
                                                                                                                       // 8199
      this.commands.exec("enableObjectResizing", this.config.allowObjectResizing);                                     // 8200
                                                                                                                       // 8201
      if (this.config.allowObjectResizing) {                                                                           // 8202
         // IE sets inline styles after resizing objects                                                               // 8203
         // The following lines make sure that the width/height css properties                                         // 8204
         // are copied over to the width/height attributes                                                             // 8205
        if (browser.supportsEvent("resizeend")) {                                                                      // 8206
          dom.observe(element, "resizeend", function(event) {                                                          // 8207
            var target = event.target || event.srcElement,                                                             // 8208
                style  = target.style,                                                                                 // 8209
                i      = 0,                                                                                            // 8210
                property;                                                                                              // 8211
            for(; i<propertiesLength; i++) {                                                                           // 8212
              property = properties[i];                                                                                // 8213
              if (style[property]) {                                                                                   // 8214
                target.setAttribute(property, parseInt(style[property], 10));                                          // 8215
                style[property] = "";                                                                                  // 8216
              }                                                                                                        // 8217
            }                                                                                                          // 8218
            // After resizing IE sometimes forgets to remove the old resize handles                                    // 8219
            wysihtml5.quirks.redraw(element);                                                                          // 8220
          });                                                                                                          // 8221
        }                                                                                                              // 8222
      } else {                                                                                                         // 8223
        if (browser.supportsEvent("resizestart")) {                                                                    // 8224
          dom.observe(element, "resizestart", function(event) { event.preventDefault(); });                            // 8225
        }                                                                                                              // 8226
      }                                                                                                                // 8227
    },                                                                                                                 // 8228
                                                                                                                       // 8229
    _initUndoManager: function() {                                                                                     // 8230
      new wysihtml5.UndoManager(this.parent);                                                                          // 8231
    }                                                                                                                  // 8232
  });                                                                                                                  // 8233
})(wysihtml5);(function(wysihtml5) {                                                                                   // 8234
  var dom             = wysihtml5.dom,                                                                                 // 8235
      doc             = document,                                                                                      // 8236
      win             = window,                                                                                        // 8237
      HOST_TEMPLATE   = doc.createElement("div"),                                                                      // 8238
      /**                                                                                                              // 8239
       * Styles to copy from textarea to the composer element                                                          // 8240
       */                                                                                                              // 8241
      TEXT_FORMATTING = [                                                                                              // 8242
        "background-color",                                                                                            // 8243
        "color", "cursor",                                                                                             // 8244
        "font-family", "font-size", "font-style", "font-variant", "font-weight",                                       // 8245
        "line-height", "letter-spacing",                                                                               // 8246
        "text-align", "text-decoration", "text-indent", "text-rendering",                                              // 8247
        "word-break", "word-wrap", "word-spacing"                                                                      // 8248
      ],                                                                                                               // 8249
      /**                                                                                                              // 8250
       * Styles to copy from textarea to the iframe                                                                    // 8251
       */                                                                                                              // 8252
      BOX_FORMATTING = [                                                                                               // 8253
        "background-color",                                                                                            // 8254
        "border-collapse",                                                                                             // 8255
        "border-bottom-color", "border-bottom-style", "border-bottom-width",                                           // 8256
        "border-left-color", "border-left-style", "border-left-width",                                                 // 8257
        "border-right-color", "border-right-style", "border-right-width",                                              // 8258
        "border-top-color", "border-top-style", "border-top-width",                                                    // 8259
        "clear", "display", "float",                                                                                   // 8260
        "margin-bottom", "margin-left", "margin-right", "margin-top",                                                  // 8261
        "outline-color", "outline-offset", "outline-width", "outline-style",                                           // 8262
        "padding-left", "padding-right", "padding-top", "padding-bottom",                                              // 8263
        "position", "top", "left", "right", "bottom", "z-index",                                                       // 8264
        "vertical-align", "text-align",                                                                                // 8265
        "-webkit-box-sizing", "-moz-box-sizing", "-ms-box-sizing", "box-sizing",                                       // 8266
        "-webkit-box-shadow", "-moz-box-shadow", "-ms-box-shadow","box-shadow",                                        // 8267
        "-webkit-border-top-right-radius", "-moz-border-radius-topright", "border-top-right-radius",                   // 8268
        "-webkit-border-bottom-right-radius", "-moz-border-radius-bottomright", "border-bottom-right-radius",          // 8269
        "-webkit-border-bottom-left-radius", "-moz-border-radius-bottomleft", "border-bottom-left-radius",             // 8270
        "-webkit-border-top-left-radius", "-moz-border-radius-topleft", "border-top-left-radius",                      // 8271
        "width", "height"                                                                                              // 8272
      ],                                                                                                               // 8273
      /**                                                                                                              // 8274
       * Styles to sync while the window gets resized                                                                  // 8275
       */                                                                                                              // 8276
      RESIZE_STYLE = [                                                                                                 // 8277
        "width", "height",                                                                                             // 8278
        "top", "left", "right", "bottom"                                                                               // 8279
      ],                                                                                                               // 8280
      ADDITIONAL_CSS_RULES = [                                                                                         // 8281
        "html             { height: 100%; }",                                                                          // 8282
        "body             { min-height: 100%; padding: 0; margin: 0; margin-top: -1px; padding-top: 1px; }",           // 8283
        "._wysihtml5-temp { display: none; }",                                                                         // 8284
        wysihtml5.browser.isGecko ?                                                                                    // 8285
          "body.placeholder { color: graytext !important; }" :                                                         // 8286
          "body.placeholder { color: #a9a9a9 !important; }",                                                           // 8287
        "body[disabled]   { background-color: #eee !important; color: #999 !important; cursor: default !important; }", // 8288
        // Ensure that user see's broken images and can delete them                                                    // 8289
        "img:-moz-broken  { -moz-force-broken-image-icon: 1; height: 24px; width: 24px; }"                             // 8290
      ];                                                                                                               // 8291
                                                                                                                       // 8292
  /**                                                                                                                  // 8293
   * With "setActive" IE offers a smart way of focusing elements without scrolling them into view:                     // 8294
   * http://msdn.microsoft.com/en-us/library/ms536738(v=vs.85).aspx                                                    // 8295
   *                                                                                                                   // 8296
   * Other browsers need a more hacky way: (pssst don't tell my mama)                                                  // 8297
   * In order to prevent the element being scrolled into view when focusing it, we simply                              // 8298
   * move it out of the scrollable area, focus it, and reset it's position                                             // 8299
   */                                                                                                                  // 8300
  var focusWithoutScrolling = function(element) {                                                                      // 8301
    if (element.setActive) {                                                                                           // 8302
      // Following line could cause a js error when the textarea is invisible                                          // 8303
      // See https://github.com/xing/wysihtml5/issues/9                                                                // 8304
      try { element.setActive(); } catch(e) {}                                                                         // 8305
    } else {                                                                                                           // 8306
      var elementStyle = element.style,                                                                                // 8307
          originalScrollTop = doc.documentElement.scrollTop || doc.body.scrollTop,                                     // 8308
          originalScrollLeft = doc.documentElement.scrollLeft || doc.body.scrollLeft,                                  // 8309
          originalStyles = {                                                                                           // 8310
            position:         elementStyle.position,                                                                   // 8311
            top:              elementStyle.top,                                                                        // 8312
            left:             elementStyle.left,                                                                       // 8313
            WebkitUserSelect: elementStyle.WebkitUserSelect                                                            // 8314
          };                                                                                                           // 8315
                                                                                                                       // 8316
      dom.setStyles({                                                                                                  // 8317
        position:         "absolute",                                                                                  // 8318
        top:              "-99999px",                                                                                  // 8319
        left:             "-99999px",                                                                                  // 8320
        // Don't ask why but temporarily setting -webkit-user-select to none makes the whole thing performing smoother // 8321
        WebkitUserSelect: "none"                                                                                       // 8322
      }).on(element);                                                                                                  // 8323
                                                                                                                       // 8324
      element.focus();                                                                                                 // 8325
                                                                                                                       // 8326
      dom.setStyles(originalStyles).on(element);                                                                       // 8327
                                                                                                                       // 8328
      if (win.scrollTo) {                                                                                              // 8329
        // Some browser extensions unset this method to prevent annoyances                                             // 8330
        // "Better PopUp Blocker" for Chrome http://code.google.com/p/betterpopupblocker/source/browse/trunk/blockStart.js#100
        // Issue: http://code.google.com/p/betterpopupblocker/issues/detail?id=1                                       // 8332
        win.scrollTo(originalScrollLeft, originalScrollTop);                                                           // 8333
      }                                                                                                                // 8334
    }                                                                                                                  // 8335
  };                                                                                                                   // 8336
                                                                                                                       // 8337
                                                                                                                       // 8338
  wysihtml5.views.Composer.prototype.style = function() {                                                              // 8339
    var that                  = this,                                                                                  // 8340
        originalActiveElement = doc.querySelector(":focus"),                                                           // 8341
        textareaElement       = this.textarea.element,                                                                 // 8342
        hasPlaceholder        = textareaElement.hasAttribute("placeholder"),                                           // 8343
        originalPlaceholder   = hasPlaceholder && textareaElement.getAttribute("placeholder");                         // 8344
    this.focusStylesHost      = this.focusStylesHost  || HOST_TEMPLATE.cloneNode(false);                               // 8345
    this.blurStylesHost       = this.blurStylesHost   || HOST_TEMPLATE.cloneNode(false);                               // 8346
                                                                                                                       // 8347
    // Remove placeholder before copying (as the placeholder has an affect on the computed style)                      // 8348
    if (hasPlaceholder) {                                                                                              // 8349
      textareaElement.removeAttribute("placeholder");                                                                  // 8350
    }                                                                                                                  // 8351
                                                                                                                       // 8352
    if (textareaElement === originalActiveElement) {                                                                   // 8353
      textareaElement.blur();                                                                                          // 8354
    }                                                                                                                  // 8355
                                                                                                                       // 8356
    // --------- iframe styles (has to be set before editor styles, otherwise IE9 sets wrong fontFamily on blurStylesHost) ---------
    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.iframe).andTo(this.blurStylesHost);                   // 8358
                                                                                                                       // 8359
    // --------- editor styles ---------                                                                               // 8360
    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.element).andTo(this.blurStylesHost);                 // 8361
                                                                                                                       // 8362
    // --------- apply standard rules ---------                                                                        // 8363
    dom.insertCSS(ADDITIONAL_CSS_RULES).into(this.element.ownerDocument);                                              // 8364
                                                                                                                       // 8365
    // --------- :focus styles ---------                                                                               // 8366
    focusWithoutScrolling(textareaElement);                                                                            // 8367
    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.focusStylesHost);                                     // 8368
    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.focusStylesHost);                                    // 8369
                                                                                                                       // 8370
    // Make sure that we don't change the display style of the iframe when copying styles oblur/onfocus                // 8371
    // this is needed for when the change_view event is fired where the iframe is hidden and then                      // 8372
    // the blur event fires and re-displays it                                                                         // 8373
    var boxFormattingStyles = wysihtml5.lang.array(BOX_FORMATTING).without(["display"]);                               // 8374
                                                                                                                       // 8375
    // --------- restore focus ---------                                                                               // 8376
    if (originalActiveElement) {                                                                                       // 8377
      originalActiveElement.focus();                                                                                   // 8378
    } else {                                                                                                           // 8379
      textareaElement.blur();                                                                                          // 8380
    }                                                                                                                  // 8381
                                                                                                                       // 8382
    // --------- restore placeholder ---------                                                                         // 8383
    if (hasPlaceholder) {                                                                                              // 8384
      textareaElement.setAttribute("placeholder", originalPlaceholder);                                                // 8385
    }                                                                                                                  // 8386
                                                                                                                       // 8387
    // When copying styles, we only get the computed style which is never returned in percent unit                     // 8388
    // Therefore we've to recalculate style onresize                                                                   // 8389
    if (!wysihtml5.browser.hasCurrentStyleProperty()) {                                                                // 8390
      var winObserver = dom.observe(win, "resize", function() {                                                        // 8391
        // Remove event listener if composer doesn't exist anymore                                                     // 8392
        if (!dom.contains(document.documentElement, that.iframe)) {                                                    // 8393
          winObserver.stop();                                                                                          // 8394
          return;                                                                                                      // 8395
        }                                                                                                              // 8396
        var originalTextareaDisplayStyle = dom.getStyle("display").from(textareaElement),                              // 8397
            originalComposerDisplayStyle = dom.getStyle("display").from(that.iframe);                                  // 8398
        textareaElement.style.display = "";                                                                            // 8399
        that.iframe.style.display = "none";                                                                            // 8400
        dom.copyStyles(RESIZE_STYLE)                                                                                   // 8401
          .from(textareaElement)                                                                                       // 8402
          .to(that.iframe)                                                                                             // 8403
          .andTo(that.focusStylesHost)                                                                                 // 8404
          .andTo(that.blurStylesHost);                                                                                 // 8405
        that.iframe.style.display = originalComposerDisplayStyle;                                                      // 8406
        textareaElement.style.display = originalTextareaDisplayStyle;                                                  // 8407
      });                                                                                                              // 8408
    }                                                                                                                  // 8409
                                                                                                                       // 8410
    // --------- Sync focus/blur styles ---------                                                                      // 8411
    this.parent.observe("focus:composer", function() {                                                                 // 8412
      dom.copyStyles(boxFormattingStyles) .from(that.focusStylesHost).to(that.iframe);                                 // 8413
      dom.copyStyles(TEXT_FORMATTING)     .from(that.focusStylesHost).to(that.element);                                // 8414
    });                                                                                                                // 8415
                                                                                                                       // 8416
    this.parent.observe("blur:composer", function() {                                                                  // 8417
      dom.copyStyles(boxFormattingStyles) .from(that.blurStylesHost).to(that.iframe);                                  // 8418
      dom.copyStyles(TEXT_FORMATTING)     .from(that.blurStylesHost).to(that.element);                                 // 8419
    });                                                                                                                // 8420
                                                                                                                       // 8421
    return this;                                                                                                       // 8422
  };                                                                                                                   // 8423
})(wysihtml5);/**                                                                                                      // 8424
 * Taking care of events                                                                                               // 8425
 *  - Simulating 'change' event on contentEditable element                                                             // 8426
 *  - Handling drag & drop logic                                                                                       // 8427
 *  - Catch paste events                                                                                               // 8428
 *  - Dispatch proprietary newword:composer event                                                                      // 8429
 *  - Keyboard shortcuts                                                                                               // 8430
 */                                                                                                                    // 8431
(function(wysihtml5) {                                                                                                 // 8432
  var dom       = wysihtml5.dom,                                                                                       // 8433
      browser   = wysihtml5.browser,                                                                                   // 8434
      /**                                                                                                              // 8435
       * Map keyCodes to query commands                                                                                // 8436
       */                                                                                                              // 8437
      shortcuts = {                                                                                                    // 8438
        "66": "bold",     // B                                                                                         // 8439
        "73": "italic",   // I                                                                                         // 8440
        "85": "underline" // U                                                                                         // 8441
      };                                                                                                               // 8442
                                                                                                                       // 8443
  wysihtml5.views.Composer.prototype.observe = function() {                                                            // 8444
    var that                = this,                                                                                    // 8445
        state               = this.getValue(),                                                                         // 8446
        iframe              = this.sandbox.getIframe(),                                                                // 8447
        element             = this.element,                                                                            // 8448
        focusBlurElement    = browser.supportsEventsInIframeCorrectly() ? element : this.sandbox.getWindow(),          // 8449
        // Firefox < 3.5 doesn't support the drop event, instead it supports a so called "dragdrop" event which behaves almost the same
        pasteEvents         = browser.supportsEvent("drop") ? ["drop", "paste"] : ["dragdrop", "paste"];               // 8451
                                                                                                                       // 8452
    // --------- destroy:composer event ---------                                                                      // 8453
    dom.observe(iframe, "DOMNodeRemoved", function() {                                                                 // 8454
      clearInterval(domNodeRemovedInterval);                                                                           // 8455
      that.parent.fire("destroy:composer");                                                                            // 8456
    });                                                                                                                // 8457
                                                                                                                       // 8458
    // DOMNodeRemoved event is not supported in IE 8                                                                   // 8459
    var domNodeRemovedInterval = setInterval(function() {                                                              // 8460
      if (!dom.contains(document.documentElement, iframe)) {                                                           // 8461
        clearInterval(domNodeRemovedInterval);                                                                         // 8462
        that.parent.fire("destroy:composer");                                                                          // 8463
      }                                                                                                                // 8464
    }, 250);                                                                                                           // 8465
                                                                                                                       // 8466
                                                                                                                       // 8467
    // --------- Focus & blur logic ---------                                                                          // 8468
    dom.observe(focusBlurElement, "focus", function() {                                                                // 8469
      that.parent.fire("focus").fire("focus:composer");                                                                // 8470
                                                                                                                       // 8471
      // Delay storing of state until all focus handler are fired                                                      // 8472
      // especially the one which resets the placeholder                                                               // 8473
      setTimeout(function() { state = that.getValue(); }, 0);                                                          // 8474
    });                                                                                                                // 8475
                                                                                                                       // 8476
    dom.observe(focusBlurElement, "blur", function() {                                                                 // 8477
      if (state !== that.getValue()) {                                                                                 // 8478
        that.parent.fire("change").fire("change:composer");                                                            // 8479
      }                                                                                                                // 8480
      that.parent.fire("blur").fire("blur:composer");                                                                  // 8481
    });                                                                                                                // 8482
                                                                                                                       // 8483
    if (wysihtml5.browser.isIos()) {                                                                                   // 8484
      // When on iPad/iPhone/IPod after clicking outside of editor, the editor loses focus                             // 8485
      // but the UI still acts as if the editor has focus (blinking caret and onscreen keyboard visible)               // 8486
      // We prevent that by focusing a temporary input element which immediately loses focus                           // 8487
      dom.observe(element, "blur", function() {                                                                        // 8488
        var input = element.ownerDocument.createElement("input"),                                                      // 8489
            originalScrollTop = document.documentElement.scrollTop || document.body.scrollTop,                         // 8490
            originalScrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;                      // 8491
        try {                                                                                                          // 8492
          that.selection.insertNode(input);                                                                            // 8493
        } catch(e) {                                                                                                   // 8494
          element.appendChild(input);                                                                                  // 8495
        }                                                                                                              // 8496
        input.focus();                                                                                                 // 8497
        input.parentNode.removeChild(input);                                                                           // 8498
                                                                                                                       // 8499
        window.scrollTo(originalScrollLeft, originalScrollTop);                                                        // 8500
      });                                                                                                              // 8501
    }                                                                                                                  // 8502
                                                                                                                       // 8503
    // --------- Drag & Drop logic ---------                                                                           // 8504
    dom.observe(element, "dragenter", function() {                                                                     // 8505
      that.parent.fire("unset_placeholder");                                                                           // 8506
    });                                                                                                                // 8507
                                                                                                                       // 8508
    if (browser.firesOnDropOnlyWhenOnDragOverIsCancelled()) {                                                          // 8509
      dom.observe(element, ["dragover", "dragenter"], function(event) {                                                // 8510
        event.preventDefault();                                                                                        // 8511
      });                                                                                                              // 8512
    }                                                                                                                  // 8513
                                                                                                                       // 8514
    dom.observe(element, pasteEvents, function(event) {                                                                // 8515
      var dataTransfer = event.dataTransfer,                                                                           // 8516
          data;                                                                                                        // 8517
                                                                                                                       // 8518
                                                                                                                       // 8519
      console.log('PASTED', event);                                                                                    // 8520
      if (dataTransfer && browser.supportsDataTransfer()) {                                                            // 8521
        data = dataTransfer.getData("text/html") || dataTransfer.getData("text/plain");                                // 8522
      }                                                                                                                // 8523
      if (data) {                                                                                                      // 8524
        element.focus();                                                                                               // 8525
        that.commands.exec("insertHTML", data);                                                                        // 8526
        that.parent.fire("paste").fire("paste:composer");                                                              // 8527
        event.stopPropagation();                                                                                       // 8528
        event.preventDefault();                                                                                        // 8529
      } else {                                                                                                         // 8530
        setTimeout(function() {                                                                                        // 8531
          that.parent.fire("paste").fire("paste:composer");                                                            // 8532
        }, 0);                                                                                                         // 8533
      }                                                                                                                // 8534
    });                                                                                                                // 8535
                                                                                                                       // 8536
    // --------- neword event ---------                                                                                // 8537
    dom.observe(element, "keyup", function(event) {                                                                    // 8538
      var keyCode = event.keyCode;                                                                                     // 8539
      if (keyCode === wysihtml5.SPACE_KEY || keyCode === wysihtml5.ENTER_KEY) {                                        // 8540
        that.parent.fire("newword:composer");                                                                          // 8541
      }                                                                                                                // 8542
    });                                                                                                                // 8543
                                                                                                                       // 8544
    this.parent.observe("paste:composer", function() {                                                                 // 8545
      setTimeout(function() { that.parent.fire("newword:composer"); }, 0);                                             // 8546
    });                                                                                                                // 8547
                                                                                                                       // 8548
    // --------- Make sure that images are selected when clicking on them ---------                                    // 8549
    if (!browser.canSelectImagesInContentEditable()) {                                                                 // 8550
      dom.observe(element, "mousedown", function(event) {                                                              // 8551
        var target = event.target;                                                                                     // 8552
        if (target.nodeName === "IMG") {                                                                               // 8553
          that.selection.selectNode(target);                                                                           // 8554
          event.preventDefault();                                                                                      // 8555
        }                                                                                                              // 8556
      });                                                                                                              // 8557
    }                                                                                                                  // 8558
                                                                                                                       // 8559
    // --------- Shortcut logic ---------                                                                              // 8560
    dom.observe(element, "keydown", function(event) {                                                                  // 8561
      var keyCode  = event.keyCode,                                                                                    // 8562
          command  = shortcuts[keyCode];                                                                               // 8563
      if ((event.ctrlKey || event.metaKey) && !event.altKey && command) {                                              // 8564
        that.commands.exec(command);                                                                                   // 8565
        event.preventDefault();                                                                                        // 8566
      }                                                                                                                // 8567
    });                                                                                                                // 8568
                                                                                                                       // 8569
    // --------- Make sure that when pressing backspace/delete on selected images deletes the image and it's anchor ---------
    dom.observe(element, "keydown", function(event) {                                                                  // 8571
      var target  = that.selection.getSelectedNode(true),                                                              // 8572
          keyCode = event.keyCode,                                                                                     // 8573
          parent;                                                                                                      // 8574
      if (target && target.nodeName === "IMG" && (keyCode === wysihtml5.BACKSPACE_KEY || keyCode === wysihtml5.DELETE_KEY)) { // 8 => backspace, 46 => delete
        parent = target.parentNode;                                                                                    // 8576
        // delete the <img>                                                                                            // 8577
        parent.removeChild(target);                                                                                    // 8578
        // and it's parent <a> too if it hasn't got any other child nodes                                              // 8579
        if (parent.nodeName === "A" && !parent.firstChild) {                                                           // 8580
          parent.parentNode.removeChild(parent);                                                                       // 8581
        }                                                                                                              // 8582
                                                                                                                       // 8583
        setTimeout(function() { wysihtml5.quirks.redraw(element); }, 0);                                               // 8584
        event.preventDefault();                                                                                        // 8585
      }                                                                                                                // 8586
    });                                                                                                                // 8587
                                                                                                                       // 8588
    // --------- Show url in tooltip when hovering links or images ---------                                           // 8589
    var titlePrefixes = {                                                                                              // 8590
      IMG: "Image: ",                                                                                                  // 8591
      A:   "Link: "                                                                                                    // 8592
    };                                                                                                                 // 8593
                                                                                                                       // 8594
    dom.observe(element, "mouseover", function(event) {                                                                // 8595
      var target   = event.target,                                                                                     // 8596
          nodeName = target.nodeName,                                                                                  // 8597
          title;                                                                                                       // 8598
      if (nodeName !== "A" && nodeName !== "IMG") {                                                                    // 8599
        return;                                                                                                        // 8600
      }                                                                                                                // 8601
      var hasTitle = target.hasAttribute("title");                                                                     // 8602
      if(!hasTitle){                                                                                                   // 8603
        title = titlePrefixes[nodeName] + (target.getAttribute("href") || target.getAttribute("src"));                 // 8604
        target.setAttribute("title", title);                                                                           // 8605
      }                                                                                                                // 8606
    });                                                                                                                // 8607
  };                                                                                                                   // 8608
})(wysihtml5);/**                                                                                                      // 8609
 * Class that takes care that the value of the composer and the textarea is always in sync                             // 8610
 */                                                                                                                    // 8611
(function(wysihtml5) {                                                                                                 // 8612
  var INTERVAL = 400;                                                                                                  // 8613
                                                                                                                       // 8614
  wysihtml5.views.Synchronizer = Base.extend(                                                                          // 8615
    /** @scope wysihtml5.views.Synchronizer.prototype */ {                                                             // 8616
                                                                                                                       // 8617
    constructor: function(editor, textarea, composer) {                                                                // 8618
      this.editor   = editor;                                                                                          // 8619
      this.textarea = textarea;                                                                                        // 8620
      this.composer = composer;                                                                                        // 8621
                                                                                                                       // 8622
      this._observe();                                                                                                 // 8623
    },                                                                                                                 // 8624
                                                                                                                       // 8625
    /**                                                                                                                // 8626
     * Sync html from composer to textarea                                                                             // 8627
     * Takes care of placeholders                                                                                      // 8628
     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the textarea     // 8629
     */                                                                                                                // 8630
    fromComposerToTextarea: function(shouldParseHtml) {                                                                // 8631
      this.textarea.setValue(wysihtml5.lang.string(this.composer.getValue()).trim(), shouldParseHtml);                 // 8632
    },                                                                                                                 // 8633
                                                                                                                       // 8634
    /**                                                                                                                // 8635
     * Sync value of textarea to composer                                                                              // 8636
     * Takes care of placeholders                                                                                      // 8637
     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer     // 8638
     */                                                                                                                // 8639
    fromTextareaToComposer: function(shouldParseHtml) {                                                                // 8640
      var textareaValue = this.textarea.getValue();                                                                    // 8641
      if (textareaValue) {                                                                                             // 8642
        this.composer.setValue(textareaValue, shouldParseHtml);                                                        // 8643
      } else {                                                                                                         // 8644
        this.composer.clear();                                                                                         // 8645
        this.editor.fire("set_placeholder");                                                                           // 8646
      }                                                                                                                // 8647
    },                                                                                                                 // 8648
                                                                                                                       // 8649
    /**                                                                                                                // 8650
     * Invoke syncing based on view state                                                                              // 8651
     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer/textarea
     */                                                                                                                // 8653
    sync: function(shouldParseHtml) {                                                                                  // 8654
      if (this.editor.currentView.name === "textarea") {                                                               // 8655
        this.fromTextareaToComposer(shouldParseHtml);                                                                  // 8656
      } else {                                                                                                         // 8657
        this.fromComposerToTextarea(shouldParseHtml);                                                                  // 8658
      }                                                                                                                // 8659
    },                                                                                                                 // 8660
                                                                                                                       // 8661
    /**                                                                                                                // 8662
     * Initializes interval-based syncing                                                                              // 8663
     * also makes sure that on-submit the composer's content is synced with the textarea                               // 8664
     * immediately when the form gets submitted                                                                        // 8665
     */                                                                                                                // 8666
    _observe: function() {                                                                                             // 8667
      var interval,                                                                                                    // 8668
          that          = this,                                                                                        // 8669
          form          = this.textarea.element.form,                                                                  // 8670
          startInterval = function() {                                                                                 // 8671
            interval = setInterval(function() { that.fromComposerToTextarea(); }, INTERVAL);                           // 8672
          },                                                                                                           // 8673
          stopInterval  = function() {                                                                                 // 8674
            clearInterval(interval);                                                                                   // 8675
            interval = null;                                                                                           // 8676
          };                                                                                                           // 8677
                                                                                                                       // 8678
      startInterval();                                                                                                 // 8679
                                                                                                                       // 8680
      if (form) {                                                                                                      // 8681
        // If the textarea is in a form make sure that after onreset and onsubmit the composer                         // 8682
        // has the correct state                                                                                       // 8683
        wysihtml5.dom.observe(form, "submit", function() {                                                             // 8684
          that.sync(true);                                                                                             // 8685
        });                                                                                                            // 8686
        wysihtml5.dom.observe(form, "reset", function() {                                                              // 8687
          setTimeout(function() { that.fromTextareaToComposer(); }, 0);                                                // 8688
        });                                                                                                            // 8689
      }                                                                                                                // 8690
                                                                                                                       // 8691
      this.editor.observe("change_view", function(view) {                                                              // 8692
        if (view === "composer" && !interval) {                                                                        // 8693
          that.fromTextareaToComposer(true);                                                                           // 8694
          startInterval();                                                                                             // 8695
        } else if (view === "textarea") {                                                                              // 8696
          that.fromComposerToTextarea(true);                                                                           // 8697
          stopInterval();                                                                                              // 8698
        }                                                                                                              // 8699
      });                                                                                                              // 8700
                                                                                                                       // 8701
      this.editor.observe("destroy:composer", stopInterval);                                                           // 8702
    }                                                                                                                  // 8703
  });                                                                                                                  // 8704
})(wysihtml5);                                                                                                         // 8705
wysihtml5.views.Textarea = wysihtml5.views.View.extend(                                                                // 8706
  /** @scope wysihtml5.views.Textarea.prototype */ {                                                                   // 8707
  name: "textarea",                                                                                                    // 8708
                                                                                                                       // 8709
  constructor: function(parent, textareaElement, config) {                                                             // 8710
    this.base(parent, textareaElement, config);                                                                        // 8711
                                                                                                                       // 8712
    this._observe();                                                                                                   // 8713
  },                                                                                                                   // 8714
                                                                                                                       // 8715
  clear: function() {                                                                                                  // 8716
    this.element.value = "";                                                                                           // 8717
  },                                                                                                                   // 8718
                                                                                                                       // 8719
  getValue: function(parse) {                                                                                          // 8720
    var value = this.isEmpty() ? "" : this.element.value;                                                              // 8721
    if (parse) {                                                                                                       // 8722
      value = this.parent.parse(value);                                                                                // 8723
    }                                                                                                                  // 8724
    return value;                                                                                                      // 8725
  },                                                                                                                   // 8726
                                                                                                                       // 8727
  setValue: function(html, parse) {                                                                                    // 8728
    if (parse) {                                                                                                       // 8729
      html = this.parent.parse(html);                                                                                  // 8730
    }                                                                                                                  // 8731
    this.element.value = html;                                                                                         // 8732
  },                                                                                                                   // 8733
                                                                                                                       // 8734
  hasPlaceholderSet: function() {                                                                                      // 8735
    var supportsPlaceholder = wysihtml5.browser.supportsPlaceholderAttributeOn(this.element),                          // 8736
        placeholderText     = this.element.getAttribute("placeholder") || null,                                        // 8737
        value               = this.element.value,                                                                      // 8738
        isEmpty             = !value;                                                                                  // 8739
    return (supportsPlaceholder && isEmpty) || (value === placeholderText);                                            // 8740
  },                                                                                                                   // 8741
                                                                                                                       // 8742
  isEmpty: function() {                                                                                                // 8743
    return !wysihtml5.lang.string(this.element.value).trim() || this.hasPlaceholderSet();                              // 8744
  },                                                                                                                   // 8745
                                                                                                                       // 8746
  _observe: function() {                                                                                               // 8747
    var element = this.element,                                                                                        // 8748
        parent  = this.parent,                                                                                         // 8749
        eventMapping = {                                                                                               // 8750
          focusin:  "focus",                                                                                           // 8751
          focusout: "blur"                                                                                             // 8752
        },                                                                                                             // 8753
        /**                                                                                                            // 8754
         * Calling focus() or blur() on an element doesn't synchronously trigger the attached focus/blur events        // 8755
         * This is the case for focusin and focusout, so let's use them whenever possible, kkthxbai                    // 8756
         */                                                                                                            // 8757
        events = wysihtml5.browser.supportsEvent("focusin") ? ["focusin", "focusout", "change"] : ["focus", "blur", "change"];
                                                                                                                       // 8759
    parent.observe("beforeload", function() {                                                                          // 8760
      wysihtml5.dom.observe(element, events, function(event) {                                                         // 8761
        var eventName = eventMapping[event.type] || event.type;                                                        // 8762
        parent.fire(eventName).fire(eventName + ":textarea");                                                          // 8763
      });                                                                                                              // 8764
                                                                                                                       // 8765
      wysihtml5.dom.observe(element, ["paste", "drop"], function() {                                                   // 8766
        setTimeout(function() { parent.fire("paste").fire("paste:textarea"); }, 0);                                    // 8767
      });                                                                                                              // 8768
    });                                                                                                                // 8769
  }                                                                                                                    // 8770
});/**                                                                                                                 // 8771
 * Toolbar Dialog                                                                                                      // 8772
 *                                                                                                                     // 8773
 * @param {Element} link The toolbar link which causes the dialog to show up                                           // 8774
 * @param {Element} container The dialog container                                                                     // 8775
 *                                                                                                                     // 8776
 * @example                                                                                                            // 8777
 *    <!-- Toolbar link -->                                                                                            // 8778
 *    <a data-wysihtml5-command="insertImage">insert an image</a>                                                      // 8779
 *                                                                                                                     // 8780
 *    <!-- Dialog -->                                                                                                  // 8781
 *    <div data-wysihtml5-dialog="insertImage" style="display: none;">                                                 // 8782
 *      <label>                                                                                                        // 8783
 *        URL: <input data-wysihtml5-dialog-field="src" value="http://">                                               // 8784
 *      </label>                                                                                                       // 8785
 *      <label>                                                                                                        // 8786
 *        Alternative text: <input data-wysihtml5-dialog-field="alt" value="">                                         // 8787
 *      </label>                                                                                                       // 8788
 *    </div>                                                                                                           // 8789
 *                                                                                                                     // 8790
 *    <script>                                                                                                         // 8791
 *      var dialog = new wysihtml5.toolbar.Dialog(                                                                     // 8792
 *        document.querySelector("[data-wysihtml5-command='insertImage']"),                                            // 8793
 *        document.querySelector("[data-wysihtml5-dialog='insertImage']")                                              // 8794
 *      );                                                                                                             // 8795
 *      dialog.observe("save", function(attributes) {                                                                  // 8796
 *        // do something                                                                                              // 8797
 *      });                                                                                                            // 8798
 *    </script>                                                                                                        // 8799
 */                                                                                                                    // 8800
(function(wysihtml5) {                                                                                                 // 8801
  var dom                     = wysihtml5.dom,                                                                         // 8802
      CLASS_NAME_OPENED       = "wysihtml5-command-dialog-opened",                                                     // 8803
      SELECTOR_FORM_ELEMENTS  = "input, select, textarea",                                                             // 8804
      SELECTOR_FIELDS         = "[data-wysihtml5-dialog-field]",                                                       // 8805
      ATTRIBUTE_FIELDS        = "data-wysihtml5-dialog-field";                                                         // 8806
                                                                                                                       // 8807
                                                                                                                       // 8808
  wysihtml5.toolbar.Dialog = wysihtml5.lang.Dispatcher.extend(                                                         // 8809
    /** @scope wysihtml5.toolbar.Dialog.prototype */ {                                                                 // 8810
    constructor: function(link, container) {                                                                           // 8811
      this.link       = link;                                                                                          // 8812
      this.container  = container;                                                                                     // 8813
    },                                                                                                                 // 8814
                                                                                                                       // 8815
    _observe: function() {                                                                                             // 8816
      if (this._observed) {                                                                                            // 8817
        return;                                                                                                        // 8818
      }                                                                                                                // 8819
                                                                                                                       // 8820
      var that = this,                                                                                                 // 8821
          callbackWrapper = function(event) {                                                                          // 8822
            var attributes = that._serialize();                                                                        // 8823
            if (attributes == that.elementToChange) {                                                                  // 8824
              that.fire("edit", attributes);                                                                           // 8825
            } else {                                                                                                   // 8826
              that.fire("save", attributes);                                                                           // 8827
            }                                                                                                          // 8828
            that.hide();                                                                                               // 8829
            event.preventDefault();                                                                                    // 8830
            event.stopPropagation();                                                                                   // 8831
          };                                                                                                           // 8832
                                                                                                                       // 8833
      dom.observe(that.link, "click", function(event) {                                                                // 8834
        if (dom.hasClass(that.link, CLASS_NAME_OPENED)) {                                                              // 8835
          setTimeout(function() { that.hide(); }, 0);                                                                  // 8836
        }                                                                                                              // 8837
      });                                                                                                              // 8838
                                                                                                                       // 8839
      dom.observe(this.container, "keydown", function(event) {                                                         // 8840
        var keyCode = event.keyCode;                                                                                   // 8841
        if (keyCode === wysihtml5.ENTER_KEY) {                                                                         // 8842
          callbackWrapper(event);                                                                                      // 8843
        }                                                                                                              // 8844
        if (keyCode === wysihtml5.ESCAPE_KEY) {                                                                        // 8845
          that.hide();                                                                                                 // 8846
        }                                                                                                              // 8847
      });                                                                                                              // 8848
                                                                                                                       // 8849
      dom.delegate(this.container, "[data-wysihtml5-dialog-action=save]", "click", callbackWrapper);                   // 8850
                                                                                                                       // 8851
      dom.delegate(this.container, "[data-wysihtml5-dialog-action=cancel]", "click", function(event) {                 // 8852
        that.fire("cancel");                                                                                           // 8853
        that.hide();                                                                                                   // 8854
        event.preventDefault();                                                                                        // 8855
        event.stopPropagation();                                                                                       // 8856
      });                                                                                                              // 8857
                                                                                                                       // 8858
      var formElements  = this.container.querySelectorAll(SELECTOR_FORM_ELEMENTS),                                     // 8859
          i             = 0,                                                                                           // 8860
          length        = formElements.length,                                                                         // 8861
          _clearInterval = function() { clearInterval(that.interval); };                                               // 8862
      for (; i<length; i++) {                                                                                          // 8863
        dom.observe(formElements[i], "change", _clearInterval);                                                        // 8864
      }                                                                                                                // 8865
                                                                                                                       // 8866
      this._observed = true;                                                                                           // 8867
    },                                                                                                                 // 8868
                                                                                                                       // 8869
    /**                                                                                                                // 8870
     * Grabs all fields in the dialog and puts them in key=>value style in an object which                             // 8871
     * then gets returned                                                                                              // 8872
     */                                                                                                                // 8873
    _serialize: function() {                                                                                           // 8874
      var data    = this.elementToChange || {},                                                                        // 8875
          fields  = this.container.querySelectorAll(SELECTOR_FIELDS),                                                  // 8876
          length  = fields.length,                                                                                     // 8877
          i       = 0;                                                                                                 // 8878
      for (; i<length; i++) {                                                                                          // 8879
        data[fields[i].getAttribute(ATTRIBUTE_FIELDS)] = fields[i].value;                                              // 8880
      }                                                                                                                // 8881
      return data;                                                                                                     // 8882
    },                                                                                                                 // 8883
                                                                                                                       // 8884
    /**                                                                                                                // 8885
     * Takes the attributes of the "elementToChange"                                                                   // 8886
     * and inserts them in their corresponding dialog input fields                                                     // 8887
     *                                                                                                                 // 8888
     * Assume the "elementToChange" looks like this:                                                                   // 8889
     *    <a href="http://www.google.com" target="_blank">foo</a>                                                      // 8890
     *                                                                                                                 // 8891
     * and we have the following dialog:                                                                               // 8892
     *    <input type="text" data-wysihtml5-dialog-field="href" value="">                                              // 8893
     *    <input type="text" data-wysihtml5-dialog-field="target" value="">                                            // 8894
     *                                                                                                                 // 8895
     * after calling _interpolate() the dialog will look like this                                                     // 8896
     *    <input type="text" data-wysihtml5-dialog-field="href" value="http://www.google.com">                         // 8897
     *    <input type="text" data-wysihtml5-dialog-field="target" value="_blank">                                      // 8898
     *                                                                                                                 // 8899
     * Basically it adopted the attribute values into the corresponding input fields                                   // 8900
     *                                                                                                                 // 8901
     */                                                                                                                // 8902
    _interpolate: function(avoidHiddenFields) {                                                                        // 8903
      var field,                                                                                                       // 8904
          fieldName,                                                                                                   // 8905
          newValue,                                                                                                    // 8906
          focusedElement = document.querySelector(":focus"),                                                           // 8907
          fields         = this.container.querySelectorAll(SELECTOR_FIELDS),                                           // 8908
          length         = fields.length,                                                                              // 8909
          i              = 0;                                                                                          // 8910
      for (; i<length; i++) {                                                                                          // 8911
        field = fields[i];                                                                                             // 8912
                                                                                                                       // 8913
        // Never change elements where the user is currently typing in                                                 // 8914
        if (field === focusedElement) {                                                                                // 8915
          continue;                                                                                                    // 8916
        }                                                                                                              // 8917
                                                                                                                       // 8918
        // Don't update hidden fields                                                                                  // 8919
        // See https://github.com/xing/wysihtml5/pull/14                                                               // 8920
        if (avoidHiddenFields && field.type === "hidden") {                                                            // 8921
          continue;                                                                                                    // 8922
        }                                                                                                              // 8923
                                                                                                                       // 8924
        fieldName = field.getAttribute(ATTRIBUTE_FIELDS);                                                              // 8925
        newValue  = this.elementToChange ? (this.elementToChange[fieldName] || "") : field.defaultValue;               // 8926
        field.value = newValue;                                                                                        // 8927
      }                                                                                                                // 8928
    },                                                                                                                 // 8929
                                                                                                                       // 8930
    /**                                                                                                                // 8931
     * Show the dialog element                                                                                         // 8932
     */                                                                                                                // 8933
    show: function(elementToChange) {                                                                                  // 8934
      var that        = this,                                                                                          // 8935
          firstField  = this.container.querySelector(SELECTOR_FORM_ELEMENTS);                                          // 8936
      this.elementToChange = elementToChange;                                                                          // 8937
      this._observe();                                                                                                 // 8938
      this._interpolate();                                                                                             // 8939
      if (elementToChange) {                                                                                           // 8940
        this.interval = setInterval(function() { that._interpolate(true); }, 500);                                     // 8941
      }                                                                                                                // 8942
      dom.addClass(this.link, CLASS_NAME_OPENED);                                                                      // 8943
      this.container.style.display = "";                                                                               // 8944
      this.fire("show");                                                                                               // 8945
      if (firstField && !elementToChange) {                                                                            // 8946
        try {                                                                                                          // 8947
          firstField.focus();                                                                                          // 8948
        } catch(e) {}                                                                                                  // 8949
      }                                                                                                                // 8950
    },                                                                                                                 // 8951
                                                                                                                       // 8952
    /**                                                                                                                // 8953
     * Hide the dialog element                                                                                         // 8954
     */                                                                                                                // 8955
    hide: function() {                                                                                                 // 8956
      clearInterval(this.interval);                                                                                    // 8957
      this.elementToChange = null;                                                                                     // 8958
      dom.removeClass(this.link, CLASS_NAME_OPENED);                                                                   // 8959
      this.container.style.display = "none";                                                                           // 8960
      this.fire("hide");                                                                                               // 8961
    }                                                                                                                  // 8962
  });                                                                                                                  // 8963
})(wysihtml5);                                                                                                         // 8964
/**                                                                                                                    // 8965
 * Converts speech-to-text and inserts this into the editor                                                            // 8966
 * As of now (2011/03/25) this only is supported in Chrome >= 11                                                       // 8967
 *                                                                                                                     // 8968
 * Note that it sends the recorded audio to the google speech recognition api:                                         // 8969
 * http://stackoverflow.com/questions/4361826/does-chrome-have-buil-in-speech-recognition-for-input-type-text-x-webkit-speec
 *                                                                                                                     // 8971
 * Current HTML5 draft can be found here                                                                               // 8972
 * http://lists.w3.org/Archives/Public/public-xg-htmlspeech/2011Feb/att-0020/api-draft.html                            // 8973
 *                                                                                                                     // 8974
 * "Accessing Google Speech API Chrome 11"                                                                             // 8975
 * http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/                                                 // 8976
 */                                                                                                                    // 8977
(function(wysihtml5) {                                                                                                 // 8978
  var dom = wysihtml5.dom;                                                                                             // 8979
                                                                                                                       // 8980
  var linkStyles = {                                                                                                   // 8981
    position: "relative"                                                                                               // 8982
  };                                                                                                                   // 8983
                                                                                                                       // 8984
  var wrapperStyles = {                                                                                                // 8985
    left:     0,                                                                                                       // 8986
    margin:   0,                                                                                                       // 8987
    opacity:  0,                                                                                                       // 8988
    overflow: "hidden",                                                                                                // 8989
    padding:  0,                                                                                                       // 8990
    position: "absolute",                                                                                              // 8991
    top:      0,                                                                                                       // 8992
    zIndex:   1                                                                                                        // 8993
  };                                                                                                                   // 8994
                                                                                                                       // 8995
  var inputStyles = {                                                                                                  // 8996
    cursor:     "inherit",                                                                                             // 8997
    fontSize:   "50px",                                                                                                // 8998
    height:     "50px",                                                                                                // 8999
    marginTop:  "-25px",                                                                                               // 9000
    outline:    0,                                                                                                     // 9001
    padding:    0,                                                                                                     // 9002
    position:   "absolute",                                                                                            // 9003
    right:      "-4px",                                                                                                // 9004
    top:        "50%"                                                                                                  // 9005
  };                                                                                                                   // 9006
                                                                                                                       // 9007
  var inputAttributes = {                                                                                              // 9008
    "x-webkit-speech": "",                                                                                             // 9009
    "speech":          ""                                                                                              // 9010
  };                                                                                                                   // 9011
                                                                                                                       // 9012
  wysihtml5.toolbar.Speech = function(parent, link) {                                                                  // 9013
    var input = document.createElement("input");                                                                       // 9014
    if (!wysihtml5.browser.supportsSpeechApiOn(input)) {                                                               // 9015
      link.style.display = "none";                                                                                     // 9016
      return;                                                                                                          // 9017
    }                                                                                                                  // 9018
                                                                                                                       // 9019
    var wrapper = document.createElement("div");                                                                       // 9020
                                                                                                                       // 9021
    wysihtml5.lang.object(wrapperStyles).merge({                                                                       // 9022
      width:  link.offsetWidth  + "px",                                                                                // 9023
      height: link.offsetHeight + "px"                                                                                 // 9024
    });                                                                                                                // 9025
                                                                                                                       // 9026
    dom.insert(input).into(wrapper);                                                                                   // 9027
    dom.insert(wrapper).into(link);                                                                                    // 9028
                                                                                                                       // 9029
    dom.setStyles(inputStyles).on(input);                                                                              // 9030
    dom.setAttributes(inputAttributes).on(input)                                                                       // 9031
                                                                                                                       // 9032
    dom.setStyles(wrapperStyles).on(wrapper);                                                                          // 9033
    dom.setStyles(linkStyles).on(link);                                                                                // 9034
                                                                                                                       // 9035
    var eventName = "onwebkitspeechchange" in input ? "webkitspeechchange" : "speechchange";                           // 9036
    dom.observe(input, eventName, function() {                                                                         // 9037
      parent.execCommand("insertText", input.value);                                                                   // 9038
      input.value = "";                                                                                                // 9039
    });                                                                                                                // 9040
                                                                                                                       // 9041
    dom.observe(input, "click", function(event) {                                                                      // 9042
      if (dom.hasClass(link, "wysihtml5-command-disabled")) {                                                          // 9043
        event.preventDefault();                                                                                        // 9044
      }                                                                                                                // 9045
                                                                                                                       // 9046
      event.stopPropagation();                                                                                         // 9047
    });                                                                                                                // 9048
  };                                                                                                                   // 9049
})(wysihtml5);/**                                                                                                      // 9050
 * Toolbar                                                                                                             // 9051
 *                                                                                                                     // 9052
 * @param {Object} parent Reference to instance of Editor instance                                                     // 9053
 * @param {Element} container Reference to the toolbar container element                                               // 9054
 *                                                                                                                     // 9055
 * @example                                                                                                            // 9056
 *    <div id="toolbar">                                                                                               // 9057
 *      <a data-wysihtml5-command="createLink">insert link</a>                                                         // 9058
 *      <a data-wysihtml5-command="formatBlock" data-wysihtml5-command-value="h1">insert h1</a>                        // 9059
 *    </div>                                                                                                           // 9060
 *                                                                                                                     // 9061
 *    <script>                                                                                                         // 9062
 *      var toolbar = new wysihtml5.toolbar.Toolbar(editor, document.getElementById("toolbar"));                       // 9063
 *    </script>                                                                                                        // 9064
 */                                                                                                                    // 9065
(function(wysihtml5) {                                                                                                 // 9066
  var CLASS_NAME_COMMAND_DISABLED   = "wysihtml5-command-disabled",                                                    // 9067
      CLASS_NAME_COMMANDS_DISABLED  = "wysihtml5-commands-disabled",                                                   // 9068
      CLASS_NAME_COMMAND_ACTIVE     = "wysihtml5-command-active",                                                      // 9069
      CLASS_NAME_ACTION_ACTIVE      = "wysihtml5-action-active",                                                       // 9070
      dom                           = wysihtml5.dom;                                                                   // 9071
                                                                                                                       // 9072
  wysihtml5.toolbar.Toolbar = Base.extend(                                                                             // 9073
    /** @scope wysihtml5.toolbar.Toolbar.prototype */ {                                                                // 9074
    constructor: function(editor, container) {                                                                         // 9075
      this.editor     = editor;                                                                                        // 9076
      this.container  = typeof(container) === "string" ? document.getElementById(container) : container;               // 9077
      this.composer   = editor.composer;                                                                               // 9078
                                                                                                                       // 9079
      this._getLinks("command");                                                                                       // 9080
      this._getLinks("action");                                                                                        // 9081
                                                                                                                       // 9082
      this._observe();                                                                                                 // 9083
      this.show();                                                                                                     // 9084
                                                                                                                       // 9085
      var speechInputLinks  = this.container.querySelectorAll("[data-wysihtml5-command=insertSpeech]"),                // 9086
          length            = speechInputLinks.length,                                                                 // 9087
          i                 = 0;                                                                                       // 9088
      for (; i<length; i++) {                                                                                          // 9089
        new wysihtml5.toolbar.Speech(this, speechInputLinks[i]);                                                       // 9090
      }                                                                                                                // 9091
    },                                                                                                                 // 9092
                                                                                                                       // 9093
    _getLinks: function(type) {                                                                                        // 9094
      var links   = this[type + "Links"] = wysihtml5.lang.array(this.container.querySelectorAll("[data-wysihtml5-" + type + "]")).get(),
          length  = links.length,                                                                                      // 9096
          i       = 0,                                                                                                 // 9097
          mapping = this[type + "Mapping"] = {},                                                                       // 9098
          link,                                                                                                        // 9099
          group,                                                                                                       // 9100
          name,                                                                                                        // 9101
          value,                                                                                                       // 9102
          dialog;                                                                                                      // 9103
      for (; i<length; i++) {                                                                                          // 9104
        link    = links[i];                                                                                            // 9105
        name    = link.getAttribute("data-wysihtml5-" + type);                                                         // 9106
        value   = link.getAttribute("data-wysihtml5-" + type + "-value");                                              // 9107
        group   = this.container.querySelector("[data-wysihtml5-" + type + "-group='" + name + "']");                  // 9108
        dialog  = this._getDialog(link, name);                                                                         // 9109
                                                                                                                       // 9110
        mapping[name + ":" + value] = {                                                                                // 9111
          link:   link,                                                                                                // 9112
          group:  group,                                                                                               // 9113
          name:   name,                                                                                                // 9114
          value:  value,                                                                                               // 9115
          dialog: dialog,                                                                                              // 9116
          state:  false                                                                                                // 9117
        };                                                                                                             // 9118
      }                                                                                                                // 9119
    },                                                                                                                 // 9120
                                                                                                                       // 9121
    _getDialog: function(link, command) {                                                                              // 9122
      var that          = this,                                                                                        // 9123
          dialogElement = this.container.querySelector("[data-wysihtml5-dialog='" + command + "']"),                   // 9124
          dialog,                                                                                                      // 9125
          caretBookmark;                                                                                               // 9126
                                                                                                                       // 9127
      if (dialogElement) {                                                                                             // 9128
        dialog = new wysihtml5.toolbar.Dialog(link, dialogElement);                                                    // 9129
                                                                                                                       // 9130
        dialog.observe("show", function() {                                                                            // 9131
          caretBookmark = that.composer.selection.getBookmark();                                                       // 9132
                                                                                                                       // 9133
          that.editor.fire("show:dialog", { command: command, dialogContainer: dialogElement, commandLink: link });    // 9134
        });                                                                                                            // 9135
                                                                                                                       // 9136
        dialog.observe("save", function(attributes) {                                                                  // 9137
          if (caretBookmark) {                                                                                         // 9138
            that.composer.selection.setBookmark(caretBookmark);                                                        // 9139
          }                                                                                                            // 9140
          that._execCommand(command, attributes);                                                                      // 9141
                                                                                                                       // 9142
          that.editor.fire("save:dialog", { command: command, dialogContainer: dialogElement, commandLink: link });    // 9143
        });                                                                                                            // 9144
                                                                                                                       // 9145
        dialog.observe("cancel", function() {                                                                          // 9146
          that.editor.focus(false);                                                                                    // 9147
          that.editor.fire("cancel:dialog", { command: command, dialogContainer: dialogElement, commandLink: link });  // 9148
        });                                                                                                            // 9149
      }                                                                                                                // 9150
      return dialog;                                                                                                   // 9151
    },                                                                                                                 // 9152
                                                                                                                       // 9153
    /**                                                                                                                // 9154
     * @example                                                                                                        // 9155
     *    var toolbar = new wysihtml5.Toolbar();                                                                       // 9156
     *    // Insert a <blockquote> element or wrap current selection in <blockquote>                                   // 9157
     *    toolbar.execCommand("formatBlock", "blockquote");                                                            // 9158
     */                                                                                                                // 9159
    execCommand: function(command, commandValue) {                                                                     // 9160
      if (this.commandsDisabled) {                                                                                     // 9161
        return;                                                                                                        // 9162
      }                                                                                                                // 9163
                                                                                                                       // 9164
      var commandObj = this.commandMapping[command + ":" + commandValue];                                              // 9165
                                                                                                                       // 9166
      // Show dialog when available                                                                                    // 9167
      if (commandObj && commandObj.dialog && !commandObj.state) {                                                      // 9168
        commandObj.dialog.show();                                                                                      // 9169
      } else {                                                                                                         // 9170
        this._execCommand(command, commandValue);                                                                      // 9171
      }                                                                                                                // 9172
    },                                                                                                                 // 9173
                                                                                                                       // 9174
    _execCommand: function(command, commandValue) {                                                                    // 9175
      // Make sure that composer is focussed (false => don't move caret to the end)                                    // 9176
      this.editor.focus(false);                                                                                        // 9177
                                                                                                                       // 9178
      this.composer.commands.exec(command, commandValue);                                                              // 9179
      this._updateLinkStates();                                                                                        // 9180
    },                                                                                                                 // 9181
                                                                                                                       // 9182
    execAction: function(action) {                                                                                     // 9183
      var editor = this.editor;                                                                                        // 9184
      switch(action) {                                                                                                 // 9185
        case "change_view":                                                                                            // 9186
          if (editor.currentView === editor.textarea) {                                                                // 9187
            editor.fire("change_view", "composer");                                                                    // 9188
          } else {                                                                                                     // 9189
            editor.fire("change_view", "textarea");                                                                    // 9190
          }                                                                                                            // 9191
          break;                                                                                                       // 9192
      }                                                                                                                // 9193
    },                                                                                                                 // 9194
                                                                                                                       // 9195
    _observe: function() {                                                                                             // 9196
      var that      = this,                                                                                            // 9197
          editor    = this.editor,                                                                                     // 9198
          container = this.container,                                                                                  // 9199
          links     = this.commandLinks.concat(this.actionLinks),                                                      // 9200
          length    = links.length,                                                                                    // 9201
          i         = 0;                                                                                               // 9202
                                                                                                                       // 9203
      for (; i<length; i++) {                                                                                          // 9204
        // 'javascript:;' and unselectable=on Needed for IE, but done in all browsers to make sure that all get the same css applied
        // (you know, a:link { ... } doesn't match anchors with missing href attribute)                                // 9206
        dom.setAttributes({                                                                                            // 9207
          href:         "javascript:;",                                                                                // 9208
          unselectable: "on"                                                                                           // 9209
        }).on(links[i]);                                                                                               // 9210
      }                                                                                                                // 9211
                                                                                                                       // 9212
      // Needed for opera                                                                                              // 9213
      dom.delegate(container, "[data-wysihtml5-command]", "mousedown", function(event) { event.preventDefault(); });   // 9214
                                                                                                                       // 9215
      dom.delegate(container, "[data-wysihtml5-command]", "click", function(event) {                                   // 9216
        var link          = this,                                                                                      // 9217
            command       = link.getAttribute("data-wysihtml5-command"),                                               // 9218
            commandValue  = link.getAttribute("data-wysihtml5-command-value");                                         // 9219
        that.execCommand(command, commandValue);                                                                       // 9220
        event.preventDefault();                                                                                        // 9221
      });                                                                                                              // 9222
                                                                                                                       // 9223
      dom.delegate(container, "[data-wysihtml5-action]", "click", function(event) {                                    // 9224
        var action = this.getAttribute("data-wysihtml5-action");                                                       // 9225
        that.execAction(action);                                                                                       // 9226
        event.preventDefault();                                                                                        // 9227
      });                                                                                                              // 9228
                                                                                                                       // 9229
      editor.observe("focus:composer", function() {                                                                    // 9230
        that.bookmark = null;                                                                                          // 9231
        clearInterval(that.interval);                                                                                  // 9232
        that.interval = setInterval(function() { that._updateLinkStates(); }, 500);                                    // 9233
      });                                                                                                              // 9234
                                                                                                                       // 9235
      editor.observe("blur:composer", function() {                                                                     // 9236
        clearInterval(that.interval);                                                                                  // 9237
      });                                                                                                              // 9238
                                                                                                                       // 9239
      editor.observe("destroy:composer", function() {                                                                  // 9240
        clearInterval(that.interval);                                                                                  // 9241
      });                                                                                                              // 9242
                                                                                                                       // 9243
      editor.observe("change_view", function(currentView) {                                                            // 9244
        // Set timeout needed in order to let the blur event fire first                                                // 9245
        setTimeout(function() {                                                                                        // 9246
          that.commandsDisabled = (currentView !== "composer");                                                        // 9247
          that._updateLinkStates();                                                                                    // 9248
          if (that.commandsDisabled) {                                                                                 // 9249
            dom.addClass(container, CLASS_NAME_COMMANDS_DISABLED);                                                     // 9250
          } else {                                                                                                     // 9251
            dom.removeClass(container, CLASS_NAME_COMMANDS_DISABLED);                                                  // 9252
          }                                                                                                            // 9253
        }, 0);                                                                                                         // 9254
      });                                                                                                              // 9255
    },                                                                                                                 // 9256
                                                                                                                       // 9257
    _updateLinkStates: function() {                                                                                    // 9258
      var element           = this.composer.element,                                                                   // 9259
          commandMapping    = this.commandMapping,                                                                     // 9260
          actionMapping     = this.actionMapping,                                                                      // 9261
          i,                                                                                                           // 9262
          state,                                                                                                       // 9263
          action,                                                                                                      // 9264
          command;                                                                                                     // 9265
      // every millisecond counts... this is executed quite often                                                      // 9266
      for (i in commandMapping) {                                                                                      // 9267
        command = commandMapping[i];                                                                                   // 9268
        if (this.commandsDisabled) {                                                                                   // 9269
          state = false;                                                                                               // 9270
          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9271
          if (command.group) {                                                                                         // 9272
            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                 // 9273
          }                                                                                                            // 9274
          if (command.dialog) {                                                                                        // 9275
            command.dialog.hide();                                                                                     // 9276
          }                                                                                                            // 9277
        } else {                                                                                                       // 9278
          state = this.composer.commands.state(command.name, command.value);                                           // 9279
          if (wysihtml5.lang.object(state).isArray()) {                                                                // 9280
            // Grab first and only object/element in state array, otherwise convert state into boolean                 // 9281
            // to avoid showing a dialog for multiple selected elements which may have different attributes            // 9282
            // eg. when two links with different href are selected, the state will be an array consisting of both link elements
            // but the dialog interface can only update one                                                            // 9284
            state = state.length === 1 ? state[0] : true;                                                              // 9285
          }                                                                                                            // 9286
          dom.removeClass(command.link, CLASS_NAME_COMMAND_DISABLED);                                                  // 9287
          if (command.group) {                                                                                         // 9288
            dom.removeClass(command.group, CLASS_NAME_COMMAND_DISABLED);                                               // 9289
          }                                                                                                            // 9290
        }                                                                                                              // 9291
                                                                                                                       // 9292
        if (command.state === state) {                                                                                 // 9293
          continue;                                                                                                    // 9294
        }                                                                                                              // 9295
                                                                                                                       // 9296
        command.state = state;                                                                                         // 9297
        if (state) {                                                                                                   // 9298
          dom.addClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                       // 9299
          if (command.group) {                                                                                         // 9300
            dom.addClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9301
          }                                                                                                            // 9302
          if (command.dialog) {                                                                                        // 9303
            if (typeof(state) === "object") {                                                                          // 9304
              command.dialog.show(state);                                                                              // 9305
            } else {                                                                                                   // 9306
              command.dialog.hide();                                                                                   // 9307
            }                                                                                                          // 9308
          }                                                                                                            // 9309
        } else {                                                                                                       // 9310
          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9311
          if (command.group) {                                                                                         // 9312
            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                 // 9313
          }                                                                                                            // 9314
          if (command.dialog) {                                                                                        // 9315
            command.dialog.hide();                                                                                     // 9316
          }                                                                                                            // 9317
        }                                                                                                              // 9318
      }                                                                                                                // 9319
                                                                                                                       // 9320
      for (i in actionMapping) {                                                                                       // 9321
        action = actionMapping[i];                                                                                     // 9322
                                                                                                                       // 9323
        if (action.name === "change_view") {                                                                           // 9324
          action.state = this.editor.currentView === this.editor.textarea;                                             // 9325
          if (action.state) {                                                                                          // 9326
            dom.addClass(action.link, CLASS_NAME_ACTION_ACTIVE);                                                       // 9327
          } else {                                                                                                     // 9328
            dom.removeClass(action.link, CLASS_NAME_ACTION_ACTIVE);                                                    // 9329
          }                                                                                                            // 9330
        }                                                                                                              // 9331
      }                                                                                                                // 9332
    },                                                                                                                 // 9333
                                                                                                                       // 9334
    show: function() {                                                                                                 // 9335
      this.container.style.display = "";                                                                               // 9336
    },                                                                                                                 // 9337
                                                                                                                       // 9338
    hide: function() {                                                                                                 // 9339
      this.container.style.display = "none";                                                                           // 9340
    }                                                                                                                  // 9341
  });                                                                                                                  // 9342
                                                                                                                       // 9343
})(wysihtml5);                                                                                                         // 9344
/**                                                                                                                    // 9345
 * WYSIHTML5 Editor                                                                                                    // 9346
 *                                                                                                                     // 9347
 * @param {Element} textareaElement Reference to the textarea which should be turned into a rich text interface        // 9348
 * @param {Object} [config] See defaultConfig object below for explanation of each individual config option            // 9349
 *                                                                                                                     // 9350
 * @events                                                                                                             // 9351
 *    load                                                                                                             // 9352
 *    beforeload (for internal use only)                                                                               // 9353
 *    focus                                                                                                            // 9354
 *    focus:composer                                                                                                   // 9355
 *    focus:textarea                                                                                                   // 9356
 *    blur                                                                                                             // 9357
 *    blur:composer                                                                                                    // 9358
 *    blur:textarea                                                                                                    // 9359
 *    change                                                                                                           // 9360
 *    change:composer                                                                                                  // 9361
 *    change:textarea                                                                                                  // 9362
 *    paste                                                                                                            // 9363
 *    paste:composer                                                                                                   // 9364
 *    paste:textarea                                                                                                   // 9365
 *    newword:composer                                                                                                 // 9366
 *    destroy:composer                                                                                                 // 9367
 *    undo:composer                                                                                                    // 9368
 *    redo:composer                                                                                                    // 9369
 *    beforecommand:composer                                                                                           // 9370
 *    aftercommand:composer                                                                                            // 9371
 *    change_view                                                                                                      // 9372
 */                                                                                                                    // 9373
(function(wysihtml5) {                                                                                                 // 9374
  var undef;                                                                                                           // 9375
                                                                                                                       // 9376
  var defaultConfig = {                                                                                                // 9377
    // Give the editor a name, the name will also be set as class name on the iframe and on the iframe's body          // 9378
    name:                 undef,                                                                                       // 9379
    // Whether the editor should look like the textarea (by adopting styles)                                           // 9380
    style:                true,                                                                                        // 9381
    // Id of the toolbar element, pass falsey value if you don't want any toolbar logic                                // 9382
    toolbar:              undef,                                                                                       // 9383
    // Whether urls, entered by the user should automatically become clickable-links                                   // 9384
    autoLink:             true,                                                                                        // 9385
    // Object which includes parser rules to apply when html gets inserted via copy & paste                            // 9386
    // See parser_rules/*.js for examples                                                                              // 9387
    parserRules:          { tags: { br: {}, span: {}, div: {}, p: {} }, classes: {} },                                 // 9388
    // Parser method to use when the user inserts content via copy & paste                                             // 9389
    parser:               wysihtml5.dom.parse,                                                                         // 9390
    // Class name which should be set on the contentEditable element in the created sandbox iframe, can be styled via the 'stylesheets' option
    composerClassName:    "wysihtml5-editor",                                                                          // 9392
    // Class name to add to the body when the wysihtml5 editor is supported                                            // 9393
    bodyClassName:        "wysihtml5-supported",                                                                       // 9394
    // Array (or single string) of stylesheet urls to be loaded in the editor's iframe                                 // 9395
    stylesheets:          [],                                                                                          // 9396
    // Placeholder text to use, defaults to the placeholder attribute on the textarea element                          // 9397
    placeholderText:      undef,                                                                                       // 9398
    // Whether the composer should allow the user to manually resize images, tables etc.                               // 9399
    allowObjectResizing:  true,                                                                                        // 9400
    // Whether the rich text editor should be rendered on touch devices (wysihtml5 >= 0.3.0 comes with basic support for iOS 5)
    supportTouchDevices:  true                                                                                         // 9402
  };                                                                                                                   // 9403
                                                                                                                       // 9404
  wysihtml5.Editor = wysihtml5.lang.Dispatcher.extend(                                                                 // 9405
    /** @scope wysihtml5.Editor.prototype */ {                                                                         // 9406
    constructor: function(textareaElement, config) {                                                                   // 9407
      this.textareaElement  = typeof(textareaElement) === "string" ? document.getElementById(textareaElement) : textareaElement;
      this.config           = wysihtml5.lang.object({}).merge(defaultConfig).merge(config).get();                      // 9409
      this.textarea         = new wysihtml5.views.Textarea(this, this.textareaElement, this.config);                   // 9410
      this.currentView      = this.textarea;                                                                           // 9411
      this._isCompatible    = wysihtml5.browser.supported();                                                           // 9412
                                                                                                                       // 9413
      // Sort out unsupported/unwanted browsers here                                                                   // 9414
      if (!this._isCompatible || (!this.config.supportTouchDevices && wysihtml5.browser.isTouchDevice())) {            // 9415
        var that = this;                                                                                               // 9416
        setTimeout(function() { that.fire("beforeload").fire("load"); }, 0);                                           // 9417
        return;                                                                                                        // 9418
      }                                                                                                                // 9419
                                                                                                                       // 9420
      // Add class name to body, to indicate that the editor is supported                                              // 9421
      wysihtml5.dom.addClass(document.body, this.config.bodyClassName);                                                // 9422
                                                                                                                       // 9423
      this.composer = new wysihtml5.views.Composer(this, this.textareaElement, this.config);                           // 9424
      this.currentView = this.composer;                                                                                // 9425
                                                                                                                       // 9426
      if (typeof(this.config.parser) === "function") {                                                                 // 9427
        this._initParser();                                                                                            // 9428
      }                                                                                                                // 9429
                                                                                                                       // 9430
      this.observe("beforeload", function() {                                                                          // 9431
        this.synchronizer = new wysihtml5.views.Synchronizer(this, this.textarea, this.composer);                      // 9432
        if (this.config.toolbar) {                                                                                     // 9433
          this.toolbar = new wysihtml5.toolbar.Toolbar(this, this.config.toolbar);                                     // 9434
        }                                                                                                              // 9435
      });                                                                                                              // 9436
                                                                                                                       // 9437
      try {                                                                                                            // 9438
        console.log("Heya! This page is using wysihtml5 for rich text editing. Check out https://github.com/xing/wysihtml5");
      } catch(e) {}                                                                                                    // 9440
    },                                                                                                                 // 9441
                                                                                                                       // 9442
    isCompatible: function() {                                                                                         // 9443
      return this._isCompatible;                                                                                       // 9444
    },                                                                                                                 // 9445
                                                                                                                       // 9446
    clear: function() {                                                                                                // 9447
      this.currentView.clear();                                                                                        // 9448
      return this;                                                                                                     // 9449
    },                                                                                                                 // 9450
                                                                                                                       // 9451
    getValue: function(parse) {                                                                                        // 9452
      return this.currentView.getValue(parse);                                                                         // 9453
    },                                                                                                                 // 9454
                                                                                                                       // 9455
    setValue: function(html, parse) {                                                                                  // 9456
      if (!html) {                                                                                                     // 9457
        return this.clear();                                                                                           // 9458
      }                                                                                                                // 9459
      this.currentView.setValue(html, parse);                                                                          // 9460
      return this;                                                                                                     // 9461
    },                                                                                                                 // 9462
                                                                                                                       // 9463
    focus: function(setToEnd) {                                                                                        // 9464
      this.currentView.focus(setToEnd);                                                                                // 9465
      return this;                                                                                                     // 9466
    },                                                                                                                 // 9467
                                                                                                                       // 9468
    /**                                                                                                                // 9469
     * Deactivate editor (make it readonly)                                                                            // 9470
     */                                                                                                                // 9471
    disable: function() {                                                                                              // 9472
      this.currentView.disable();                                                                                      // 9473
      return this;                                                                                                     // 9474
    },                                                                                                                 // 9475
                                                                                                                       // 9476
    /**                                                                                                                // 9477
     * Activate editor                                                                                                 // 9478
     */                                                                                                                // 9479
    enable: function() {                                                                                               // 9480
      this.currentView.enable();                                                                                       // 9481
      return this;                                                                                                     // 9482
    },                                                                                                                 // 9483
                                                                                                                       // 9484
    isEmpty: function() {                                                                                              // 9485
      return this.currentView.isEmpty();                                                                               // 9486
    },                                                                                                                 // 9487
                                                                                                                       // 9488
    hasPlaceholderSet: function() {                                                                                    // 9489
      return this.currentView.hasPlaceholderSet();                                                                     // 9490
    },                                                                                                                 // 9491
                                                                                                                       // 9492
    parse: function(htmlOrElement) {                                                                                   // 9493
      var returnValue = this.config.parser(htmlOrElement, this.config.parserRules, this.composer.sandbox.getDocument(), true);
      if (typeof(htmlOrElement) === "object") {                                                                        // 9495
        wysihtml5.quirks.redraw(htmlOrElement);                                                                        // 9496
      }                                                                                                                // 9497
      return returnValue;                                                                                              // 9498
    },                                                                                                                 // 9499
                                                                                                                       // 9500
    /**                                                                                                                // 9501
     * Prepare html parser logic                                                                                       // 9502
     *  - Observes for paste and drop                                                                                  // 9503
     */                                                                                                                // 9504
    _initParser: function() {                                                                                          // 9505
      this.observe("paste:composer", function() {                                                                      // 9506
        var keepScrollPosition  = true,                                                                                // 9507
            that                = this;                                                                                // 9508
        that.composer.selection.executeAndRestore(function() {                                                         // 9509
          wysihtml5.quirks.cleanPastedHTML(that.composer.element);                                                     // 9510
          that.parse(that.composer.element);                                                                           // 9511
        }, keepScrollPosition);                                                                                        // 9512
      });                                                                                                              // 9513
                                                                                                                       // 9514
      this.observe("paste:textarea", function() {                                                                      // 9515
        var value   = this.textarea.getValue(),                                                                        // 9516
            newValue;                                                                                                  // 9517
        newValue = this.parse(value);                                                                                  // 9518
        this.textarea.setValue(newValue);                                                                              // 9519
      });                                                                                                              // 9520
    }                                                                                                                  // 9521
  });                                                                                                                  // 9522
})(wysihtml5);                                                                                                         // 9523
                                                                                                                       // 9524






/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mrt:bootstrap3-wysihtml5/lib/bootstrap3-wysihtml5.js                                                       //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function($, wysi) {                                                                                                   // 1
    "use strict";                                                                                                      // 2
                                                                                                                       // 3
    var tpl = {                                                                                                        // 4
        "font-styles": function(locale, options) {                                                                     // 5
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 6
            return "<li class='dropdown'>" +                                                                           // 7
                "<a class='btn dropdown-toggle btn-" + size + " btn-default' data-toggle='dropdown' href='#'>" +       // 8
                "<i class='glyphicon glyphicon-font'></i>&nbsp;<span class='current-font'>" + locale.font_styles.normal + "</span>&nbsp;<b class='caret'></b>" +
                "</a>" +                                                                                               // 10
                "<ul class='dropdown-menu'>" +                                                                         // 11
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='div' tabindex='-1'>" + locale.font_styles.normal + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h1' tabindex='-1'>" + locale.font_styles.h1 + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h2' tabindex='-1'>" + locale.font_styles.h2 + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h3' tabindex='-1'>" + locale.font_styles.h3 + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h4'>" + locale.font_styles.h4 + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h5'>" + locale.font_styles.h5 + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h6'>" + locale.font_styles.h6 + "</a></li>" +
                "</ul>" +                                                                                              // 19
                "</li>";                                                                                               // 20
        },                                                                                                             // 21
                                                                                                                       // 22
        "emphasis": function(locale, options) {                                                                        // 23
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 24
            return "<li>" +                                                                                            // 25
                "<div class='btn-group'>" +                                                                            // 26
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='bold' title='CTRL+B' tabindex='-1'>" + locale.emphasis.bold + "</a>" +
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='italic' title='CTRL+I' tabindex='-1'>" + locale.emphasis.italic + "</a>" +
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='underline' title='CTRL+U' tabindex='-1'>" + locale.emphasis.underline + "</a>" +
                "</div>" +                                                                                             // 30
                "</li>";                                                                                               // 31
        },                                                                                                             // 32
                                                                                                                       // 33
        "lists": function(locale, options) {                                                                           // 34
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 35
            return "<li>" +                                                                                            // 36
                "<div class='btn-group'>" +                                                                            // 37
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='insertUnorderedList' title='" + locale.lists.unordered + "' tabindex='-1'><i class='glyphicon glyphicon-list'></i></a>" +
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='insertOrderedList' title='" + locale.lists.ordered + "' tabindex='-1'><i class='glyphicon glyphicon-th-list'></i></a>" +
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='Outdent' title='" + locale.lists.outdent + "' tabindex='-1'><i class='glyphicon glyphicon-indent-right'></i></a>" +
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='Indent' title='" + locale.lists.indent + "' tabindex='-1'><i class='glyphicon glyphicon-indent-left'></i></a>" +
                "</div>" +                                                                                             // 42
                "</li>";                                                                                               // 43
        },                                                                                                             // 44
                                                                                                                       // 45
        "link": function(locale, options) {                                                                            // 46
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 47
            return "<li>" +                                                                                            // 48
                ""+                                                                                                    // 49
                "<div class='bootstrap-wysihtml5-insert-link-modal modal fade'>" +                                     // 50
                "<div class='modal-dialog'>"+                                                                          // 51
                "<div class='modal-content'>"+                                                                         // 52
                "<div class='modal-header'>" +                                                                         // 53
                "<a class='close' data-dismiss='modal'>&times;</a>" +                                                  // 54
                "<h4>" + locale.link.insert + "</h4>" +                                                                // 55
                "</div>" +                                                                                             // 56
                "<div class='modal-body'>" +                                                                           // 57
                "<input value='http://' class='bootstrap-wysihtml5-insert-link-url form-control'>" +                   // 58
                "<label class='checkbox'> <input type='checkbox' class='bootstrap-wysihtml5-insert-link-target' checked>" + locale.link.target + "</label>" +
                "</div>" +                                                                                             // 60
                "<div class='modal-footer'>" +                                                                         // 61
                "<button class='btn btn-default' data-dismiss='modal'>" + locale.link.cancel + "</button>" +           // 62
                "<button href='#' class='btn btn-primary' data-dismiss='modal'>" + locale.link.insert + "</button>" +  // 63
                "</div>" +                                                                                             // 64
                "</div>" +                                                                                             // 65
                "</div>" +                                                                                             // 66
                "</div>" +                                                                                             // 67
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='createLink' title='" + locale.link.insert + "' tabindex='-1'><i class='glyphicon glyphicon-share'></i></a>" +
                "</li>";                                                                                               // 69
        },                                                                                                             // 70
                                                                                                                       // 71
        "image": function(locale, options) {                                                                           // 72
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 73
            return "<li>" +                                                                                            // 74
                "<div class='bootstrap-wysihtml5-insert-image-modal modal fade'>" +                                    // 75
                "<div class='modal-dialog'>"+                                                                          // 76
                "<div class='modal-content'>"+                                                                         // 77
                "<div class='modal-header'>" +                                                                         // 78
                "<a class='close' data-dismiss='modal'>&times;</a>" +                                                  // 79
                "<h4>" + locale.image.insert + "</h4>" +                                                               // 80
                "</div>" +                                                                                             // 81
                "<div class='modal-body'>" +                                                                           // 82
                "<input value='http://' class='bootstrap-wysihtml5-insert-image-url form-control'>" +                  // 83
                "</div>" +                                                                                             // 84
                "<div class='modal-footer'>" +                                                                         // 85
                "<button class='btn btn-default' data-dismiss='modal'>" + locale.image.cancel + "</button>" +          // 86
                "<button class='btn btn-primary' data-dismiss='modal'>" + locale.image.insert + "</button>" +          // 87
                "</div>" +                                                                                             // 88
                "</div>" +                                                                                             // 89
                "</div>" +                                                                                             // 90
                "</div>" +                                                                                             // 91
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-command='insertImage' title='" + locale.image.insert + "' tabindex='-1'><i class='glyphicon glyphicon-picture'></i></a>" +
                "</li>";                                                                                               // 93
        },                                                                                                             // 94
                                                                                                                       // 95
        "html": function(locale, options) {                                                                            // 96
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 97
            return "<li>" +                                                                                            // 98
                "<div class='btn-group'>" +                                                                            // 99
                "<a class='btn btn-" + size + " btn-default' data-wysihtml5-action='change_view' title='" + locale.html.edit + "' tabindex='-1'><i class='glyphicon glyphicon-pencil'></i></a>" +
                "</div>" +                                                                                             // 101
                "</li>";                                                                                               // 102
        },                                                                                                             // 103
                                                                                                                       // 104
        "color": function(locale, options) {                                                                           // 105
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 106
            return "<li class='dropdown'>" +                                                                           // 107
                "<a class='btn dropdown-toggle btn-" + size + " btn-default' data-toggle='dropdown' href='#' tabindex='-1'>" +
                "<span class='current-color'>" + locale.colours.black + "</span>&nbsp;<b class='caret'></b>" +         // 109
                "</a>" +                                                                                               // 110
                "<ul class='dropdown-menu'>" +                                                                         // 111
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='black'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='black'>" + locale.colours.black + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='silver'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='silver'>" + locale.colours.silver + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='gray'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='gray'>" + locale.colours.gray + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='maroon'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='maroon'>" + locale.colours.maroon + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='red'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='red'>" + locale.colours.red + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='purple'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='purple'>" + locale.colours.purple + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='green'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='green'>" + locale.colours.green + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='olive'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='olive'>" + locale.colours.olive + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='navy'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='navy'>" + locale.colours.navy + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='blue'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='blue'>" + locale.colours.blue + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='orange'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='orange'>" + locale.colours.orange + "</a></li>" +
                "</ul>" +                                                                                              // 123
                "</li>";                                                                                               // 124
        }                                                                                                              // 125
    };                                                                                                                 // 126
                                                                                                                       // 127
    var templates = function(key, locale, options) {                                                                   // 128
        return tpl[key](locale, options);                                                                              // 129
    };                                                                                                                 // 130
                                                                                                                       // 131
                                                                                                                       // 132
    var Wysihtml5 = function(el, options) {                                                                            // 133
        this.el = el;                                                                                                  // 134
        var toolbarOpts = options || defaultOptions;                                                                   // 135
        for(var t in toolbarOpts.customTemplates) {                                                                    // 136
            tpl[t] = toolbarOpts.customTemplates[t];                                                                   // 137
        }                                                                                                              // 138
        this.toolbar = this.createToolbar(el, toolbarOpts);                                                            // 139
        this.editor =  this.createEditor(options);                                                                     // 140
                                                                                                                       // 141
        window.editor = this.editor;                                                                                   // 142
                                                                                                                       // 143
        $('iframe.wysihtml5-sandbox').each(function(i, el){                                                            // 144
            $(el.contentWindow).off('focus.wysihtml5').on({                                                            // 145
                'focus.wysihtml5' : function(){                                                                        // 146
                    $('li.dropdown').removeClass('open');                                                              // 147
                }                                                                                                      // 148
            });                                                                                                        // 149
        });                                                                                                            // 150
    };                                                                                                                 // 151
                                                                                                                       // 152
    Wysihtml5.prototype = {                                                                                            // 153
                                                                                                                       // 154
        constructor: Wysihtml5,                                                                                        // 155
                                                                                                                       // 156
        createEditor: function(options) {                                                                              // 157
            options = options || {};                                                                                   // 158
                                                                                                                       // 159
            // Add the toolbar to a clone of the options object so multiple instances                                  // 160
            // of the WYISYWG don't break because "toolbar" is already defined                                         // 161
            options = $.extend(true, {}, options);                                                                     // 162
            options.toolbar = this.toolbar[0];                                                                         // 163
                                                                                                                       // 164
            var editor = new wysihtml5.Editor(this.el[0], options);                                                    // 165
                                                                                                                       // 166
            if(options && options.events) {                                                                            // 167
                for(var eventName in options.events) {                                                                 // 168
                    editor.on(eventName, options.events[eventName]);                                                   // 169
                }                                                                                                      // 170
            }                                                                                                          // 171
            return editor;                                                                                             // 172
        },                                                                                                             // 173
                                                                                                                       // 174
        createToolbar: function(el, options) {                                                                         // 175
            var self = this;                                                                                           // 176
            var toolbar = $("<ul/>", {                                                                                 // 177
                'class' : "wysihtml5-toolbar",                                                                         // 178
                'style': "display:none"                                                                                // 179
            });                                                                                                        // 180
            var culture = options.locale || defaultOptions.locale || "en";                                             // 181
            for(var key in defaultOptions) {                                                                           // 182
                var value = false;                                                                                     // 183
                                                                                                                       // 184
                if(options[key] !== undefined) {                                                                       // 185
                    if(options[key] === true) {                                                                        // 186
                        value = true;                                                                                  // 187
                    }                                                                                                  // 188
                } else {                                                                                               // 189
                    value = defaultOptions[key];                                                                       // 190
                }                                                                                                      // 191
                                                                                                                       // 192
                if(value === true) {                                                                                   // 193
                    toolbar.append(templates(key, locale[culture], options));                                          // 194
                                                                                                                       // 195
                    if(key === "html") {                                                                               // 196
                        this.initHtml(toolbar);                                                                        // 197
                    }                                                                                                  // 198
                                                                                                                       // 199
                    if(key === "link") {                                                                               // 200
                        this.initInsertLink(toolbar);                                                                  // 201
                    }                                                                                                  // 202
                                                                                                                       // 203
                    if(key === "image") {                                                                              // 204
                        this.initInsertImage(toolbar);                                                                 // 205
                    }                                                                                                  // 206
                }                                                                                                      // 207
            }                                                                                                          // 208
                                                                                                                       // 209
            if(options.toolbar) {                                                                                      // 210
                for(key in options.toolbar) {                                                                          // 211
                    toolbar.append(options.toolbar[key]);                                                              // 212
                }                                                                                                      // 213
            }                                                                                                          // 214
                                                                                                                       // 215
            toolbar.find("a[data-wysihtml5-command='formatBlock']").click(function(e) {                                // 216
                var target = e.target || e.srcElement;                                                                 // 217
                var el = $(target);                                                                                    // 218
                self.toolbar.find('.current-font').text(el.html());                                                    // 219
            });                                                                                                        // 220
                                                                                                                       // 221
            toolbar.find("a[data-wysihtml5-command='foreColor']").click(function(e) {                                  // 222
                var target = e.target || e.srcElement;                                                                 // 223
                var el = $(target);                                                                                    // 224
                self.toolbar.find('.current-color').text(el.html());                                                   // 225
            });                                                                                                        // 226
                                                                                                                       // 227
            this.el.before(toolbar);                                                                                   // 228
                                                                                                                       // 229
            return toolbar;                                                                                            // 230
        },                                                                                                             // 231
                                                                                                                       // 232
        initHtml: function(toolbar) {                                                                                  // 233
            var changeViewSelector = "a[data-wysihtml5-action='change_view']";                                         // 234
            toolbar.find(changeViewSelector).click(function(e) {                                                       // 235
                toolbar.find('a.btn').not(changeViewSelector).toggleClass('disabled');                                 // 236
            });                                                                                                        // 237
        },                                                                                                             // 238
                                                                                                                       // 239
        initInsertImage: function(toolbar) {                                                                           // 240
            var self = this;                                                                                           // 241
            var insertImageModal = toolbar.find('.bootstrap-wysihtml5-insert-image-modal');                            // 242
            var urlInput = insertImageModal.find('.bootstrap-wysihtml5-insert-image-url');                             // 243
            var insertButton = insertImageModal.find('.btn-primary');                                                  // 244
            var initialValue = urlInput.val();                                                                         // 245
            var caretBookmark;                                                                                         // 246
                                                                                                                       // 247
            var insertImage = function() {                                                                             // 248
                var url = urlInput.val();                                                                              // 249
                urlInput.val(initialValue);                                                                            // 250
                self.editor.currentView.element.focus();                                                               // 251
                if (caretBookmark) {                                                                                   // 252
                    self.editor.composer.selection.setBookmark(caretBookmark);                                         // 253
                    caretBookmark = null;                                                                              // 254
                }                                                                                                      // 255
                self.editor.composer.commands.exec("insertImage", url);                                                // 256
            };                                                                                                         // 257
                                                                                                                       // 258
            urlInput.keypress(function(e) {                                                                            // 259
                if(e.which == 13) {                                                                                    // 260
                    insertImage();                                                                                     // 261
                    insertImageModal.modal('hide');                                                                    // 262
                }                                                                                                      // 263
            });                                                                                                        // 264
                                                                                                                       // 265
            insertButton.click(insertImage);                                                                           // 266
                                                                                                                       // 267
            insertImageModal.on('shown', function() {                                                                  // 268
                urlInput.focus();                                                                                      // 269
            });                                                                                                        // 270
                                                                                                                       // 271
            insertImageModal.on('hide', function() {                                                                   // 272
                self.editor.currentView.element.focus();                                                               // 273
            });                                                                                                        // 274
                                                                                                                       // 275
            toolbar.find('a[data-wysihtml5-command=insertImage]').click(function() {                                   // 276
                var activeButton = $(this).hasClass("wysihtml5-command-active");                                       // 277
                                                                                                                       // 278
                if (!activeButton) {                                                                                   // 279
                    self.editor.currentView.element.focus(false);                                                      // 280
                    caretBookmark = self.editor.composer.selection.getBookmark();                                      // 281
                    insertImageModal.appendTo('body').modal('show');                                                   // 282
                    insertImageModal.on('click.dismiss.modal', '[data-dismiss="modal"]', function(e) {                 // 283
                        e.stopPropagation();                                                                           // 284
                    });                                                                                                // 285
                    return false;                                                                                      // 286
                }                                                                                                      // 287
                else {                                                                                                 // 288
                    return true;                                                                                       // 289
                }                                                                                                      // 290
            });                                                                                                        // 291
        },                                                                                                             // 292
                                                                                                                       // 293
        initInsertLink: function(toolbar) {                                                                            // 294
            var self = this;                                                                                           // 295
            var insertLinkModal = toolbar.find('.bootstrap-wysihtml5-insert-link-modal');                              // 296
            var urlInput = insertLinkModal.find('.bootstrap-wysihtml5-insert-link-url');                               // 297
            var targetInput = insertLinkModal.find('.bootstrap-wysihtml5-insert-link-target');                         // 298
            var insertButton = insertLinkModal.find('.btn-primary');                                                   // 299
            var initialValue = urlInput.val();                                                                         // 300
            var caretBookmark;                                                                                         // 301
                                                                                                                       // 302
            var insertLink = function() {                                                                              // 303
                var url = urlInput.val();                                                                              // 304
                urlInput.val(initialValue);                                                                            // 305
                self.editor.currentView.element.focus();                                                               // 306
                if (caretBookmark) {                                                                                   // 307
                    self.editor.composer.selection.setBookmark(caretBookmark);                                         // 308
                    caretBookmark = null;                                                                              // 309
                }                                                                                                      // 310
                                                                                                                       // 311
                var newWindow = targetInput.prop("checked");                                                           // 312
                self.editor.composer.commands.exec("createLink", {                                                     // 313
                    'href' : url,                                                                                      // 314
                    'target' : (newWindow ? '_blank' : '_self'),                                                       // 315
                    'rel' : (newWindow ? 'nofollow' : '')                                                              // 316
                });                                                                                                    // 317
            };                                                                                                         // 318
            var pressedEnter = false;                                                                                  // 319
                                                                                                                       // 320
            urlInput.keypress(function(e) {                                                                            // 321
                if(e.which == 13) {                                                                                    // 322
                    insertLink();                                                                                      // 323
                    insertLinkModal.modal('hide');                                                                     // 324
                }                                                                                                      // 325
            });                                                                                                        // 326
                                                                                                                       // 327
            insertButton.click(insertLink);                                                                            // 328
                                                                                                                       // 329
            insertLinkModal.on('shown', function() {                                                                   // 330
                urlInput.focus();                                                                                      // 331
            });                                                                                                        // 332
                                                                                                                       // 333
            insertLinkModal.on('hide', function() {                                                                    // 334
                self.editor.currentView.element.focus();                                                               // 335
            });                                                                                                        // 336
                                                                                                                       // 337
            toolbar.find('a[data-wysihtml5-command=createLink]').click(function() {                                    // 338
                var activeButton = $(this).hasClass("wysihtml5-command-active");                                       // 339
                                                                                                                       // 340
                if (!activeButton) {                                                                                   // 341
                    self.editor.currentView.element.focus(false);                                                      // 342
                    caretBookmark = self.editor.composer.selection.getBookmark();                                      // 343
                    insertLinkModal.appendTo('body').modal('show');                                                    // 344
                    insertLinkModal.on('click.dismiss.modal', '[data-dismiss="modal"]', function(e) {                  // 345
                        e.stopPropagation();                                                                           // 346
                    });                                                                                                // 347
                    return false;                                                                                      // 348
                }                                                                                                      // 349
                else {                                                                                                 // 350
                    return true;                                                                                       // 351
                }                                                                                                      // 352
            });                                                                                                        // 353
        }                                                                                                              // 354
    };                                                                                                                 // 355
                                                                                                                       // 356
    // these define our public api                                                                                     // 357
    var methods = {                                                                                                    // 358
        resetDefaults: function() {                                                                                    // 359
            $.fn.wysihtml5.defaultOptions = $.extend(true, {}, $.fn.wysihtml5.defaultOptionsCache);                    // 360
        },                                                                                                             // 361
        bypassDefaults: function(options) {                                                                            // 362
            return this.each(function () {                                                                             // 363
                var $this = $(this);                                                                                   // 364
                $this.data('wysihtml5', new Wysihtml5($this, options));                                                // 365
            });                                                                                                        // 366
        },                                                                                                             // 367
        shallowExtend: function (options) {                                                                            // 368
            var settings = $.extend({}, $.fn.wysihtml5.defaultOptions, options || {}, $(this).data());                 // 369
            var that = this;                                                                                           // 370
            return methods.bypassDefaults.apply(that, [settings]);                                                     // 371
        },                                                                                                             // 372
        deepExtend: function(options) {                                                                                // 373
            var settings = $.extend(true, {}, $.fn.wysihtml5.defaultOptions, options || {});                           // 374
            var that = this;                                                                                           // 375
            return methods.bypassDefaults.apply(that, [settings]);                                                     // 376
        },                                                                                                             // 377
        init: function(options) {                                                                                      // 378
            var that = this;                                                                                           // 379
            return methods.shallowExtend.apply(that, [options]);                                                       // 380
        }                                                                                                              // 381
    };                                                                                                                 // 382
                                                                                                                       // 383
    $.fn.wysihtml5 = function ( method ) {                                                                             // 384
        if ( methods[method] ) {                                                                                       // 385
            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));                           // 386
        } else if ( typeof method === 'object' || ! method ) {                                                         // 387
            return methods.init.apply( this, arguments );                                                              // 388
        } else {                                                                                                       // 389
            $.error( 'Method ' +  method + ' does not exist on jQuery.wysihtml5' );                                    // 390
        }                                                                                                              // 391
    };                                                                                                                 // 392
                                                                                                                       // 393
    $.fn.wysihtml5.Constructor = Wysihtml5;                                                                            // 394
                                                                                                                       // 395
    var defaultOptions = $.fn.wysihtml5.defaultOptions = {                                                             // 396
        "font-styles": true,                                                                                           // 397
        "color": false,                                                                                                // 398
        "emphasis": true,                                                                                              // 399
        "lists": true,                                                                                                 // 400
        "html": false,                                                                                                 // 401
        "link": true,                                                                                                  // 402
        "image": true,                                                                                                 // 403
        "size": 'sm',                                                                                                  // 404
        events: {},                                                                                                    // 405
        parserRules: {                                                                                                 // 406
            classes: {                                                                                                 // 407
                // (path_to_project/lib/css/bootstrap3-wysiwyg5-color.css)                                             // 408
                "wysiwyg-color-silver" : 1,                                                                            // 409
                "wysiwyg-color-gray" : 1,                                                                              // 410
                "wysiwyg-color-white" : 1,                                                                             // 411
                "wysiwyg-color-maroon" : 1,                                                                            // 412
                "wysiwyg-color-red" : 1,                                                                               // 413
                "wysiwyg-color-purple" : 1,                                                                            // 414
                "wysiwyg-color-fuchsia" : 1,                                                                           // 415
                "wysiwyg-color-green" : 1,                                                                             // 416
                "wysiwyg-color-lime" : 1,                                                                              // 417
                "wysiwyg-color-olive" : 1,                                                                             // 418
                "wysiwyg-color-yellow" : 1,                                                                            // 419
                "wysiwyg-color-navy" : 1,                                                                              // 420
                "wysiwyg-color-blue" : 1,                                                                              // 421
                "wysiwyg-color-teal" : 1,                                                                              // 422
                "wysiwyg-color-aqua" : 1,                                                                              // 423
                "wysiwyg-color-orange" : 1                                                                             // 424
            },                                                                                                         // 425
            tags: {                                                                                                    // 426
                "b":  {},                                                                                              // 427
                "i":  {},                                                                                              // 428
                "br": {},                                                                                              // 429
                "ol": {},                                                                                              // 430
                "ul": {},                                                                                              // 431
                "li": {},                                                                                              // 432
                "h1": {},                                                                                              // 433
                "h2": {},                                                                                              // 434
                "h3": {},                                                                                              // 435
                "h4": {},                                                                                              // 436
                "h5": {},                                                                                              // 437
                "h6": {},                                                                                              // 438
                "blockquote": {},                                                                                      // 439
                "u": 1,                                                                                                // 440
                "img": {                                                                                               // 441
                    "check_attributes": {                                                                              // 442
                        "width": "numbers",                                                                            // 443
                        "alt": "alt",                                                                                  // 444
                        "src": "url",                                                                                  // 445
                        "height": "numbers"                                                                            // 446
                    }                                                                                                  // 447
                },                                                                                                     // 448
                "a":  {                                                                                                // 449
                    check_attributes: {                                                                                // 450
                        'href': "url", // important to avoid XSS                                                       // 451
                        'target': 'alt',                                                                               // 452
                        'rel': 'alt'                                                                                   // 453
                    }                                                                                                  // 454
                },                                                                                                     // 455
                "span": 1,                                                                                             // 456
                "div": 1,                                                                                              // 457
                // to allow save and edit files with code tag hacks                                                    // 458
                "code": 1,                                                                                             // 459
                "pre": 1                                                                                               // 460
            }                                                                                                          // 461
        },                                                                                                             // 462
        stylesheets: ["./css/bootstrap3-wysiwyg5-color.css"], // (path_to_project/lib/css/bootstrap3-wysiwyg5-color.css)
        locale: "en"                                                                                                   // 464
    };                                                                                                                 // 465
                                                                                                                       // 466
    if (typeof $.fn.wysihtml5.defaultOptionsCache === 'undefined') {                                                   // 467
        $.fn.wysihtml5.defaultOptionsCache = $.extend(true, {}, $.fn.wysihtml5.defaultOptions);                        // 468
    }                                                                                                                  // 469
                                                                                                                       // 470
    var locale = $.fn.wysihtml5.locale = {                                                                             // 471
        en: {                                                                                                          // 472
            font_styles: {                                                                                             // 473
                normal: "Normal text",                                                                                 // 474
                h1: "Heading 1",                                                                                       // 475
                h2: "Heading 2",                                                                                       // 476
                h3: "Heading 3",                                                                                       // 477
                h4: "Heading 4",                                                                                       // 478
                h5: "Heading 5",                                                                                       // 479
                h6: "Heading 6"                                                                                        // 480
            },                                                                                                         // 481
            emphasis: {                                                                                                // 482
                bold: "Bold",                                                                                          // 483
                italic: "Italic",                                                                                      // 484
                underline: "Underline"                                                                                 // 485
            },                                                                                                         // 486
            lists: {                                                                                                   // 487
                unordered: "Unordered list",                                                                           // 488
                ordered: "Ordered list",                                                                               // 489
                outdent: "Outdent",                                                                                    // 490
                indent: "Indent"                                                                                       // 491
            },                                                                                                         // 492
            link: {                                                                                                    // 493
                insert: "Insert link",                                                                                 // 494
                cancel: "Cancel",                                                                                      // 495
                target: "Open link in new window"                                                                      // 496
            },                                                                                                         // 497
            image: {                                                                                                   // 498
                insert: "Insert image",                                                                                // 499
                cancel: "Cancel"                                                                                       // 500
            },                                                                                                         // 501
            html: {                                                                                                    // 502
                edit: "Edit HTML"                                                                                      // 503
            },                                                                                                         // 504
            colours: {                                                                                                 // 505
                black: "Black",                                                                                        // 506
                silver: "Silver",                                                                                      // 507
                gray: "Grey",                                                                                          // 508
                maroon: "Maroon",                                                                                      // 509
                red: "Red",                                                                                            // 510
                purple: "Purple",                                                                                      // 511
                green: "Green",                                                                                        // 512
                olive: "Olive",                                                                                        // 513
                navy: "Navy",                                                                                          // 514
                blue: "Blue",                                                                                          // 515
                orange: "Orange"                                                                                       // 516
            }                                                                                                          // 517
        }                                                                                                              // 518
    };                                                                                                                 // 519
                                                                                                                       // 520
}(window.jQuery, window.wysihtml5);                                                                                    // 521
                                                                                                                       // 522

/////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
Package._define("mrt:bootstrap3-wysihtml5");

})();
